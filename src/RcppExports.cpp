// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// serialize_value
std::string serialize_value(SEXP s);
RcppExport SEXP genthat_serialize_value(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(serialize_value(s));
    return rcpp_result_gen;
END_RCPP
}
// escape_name
std::string escape_name(std::string const& name);
RcppExport SEXP genthat_escape_name(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(escape_name(name));
    return rcpp_result_gen;
END_RCPP
}
// reassign_function
SEXP reassign_function(SEXP target_fun, SEXP new_fun);
RcppExport SEXP genthat_reassign_function(SEXP target_funSEXP, SEXP new_funSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type target_fun(target_funSEXP);
    Rcpp::traits::input_parameter< SEXP >::type new_fun(new_funSEXP);
    rcpp_result_gen = Rcpp::wrap(reassign_function(target_fun, new_fun));
    return rcpp_result_gen;
END_RCPP
}
// create_duplicate
SEXP create_duplicate(SEXP target);
RcppExport SEXP genthat_create_duplicate(SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(create_duplicate(target));
    return rcpp_result_gen;
END_RCPP
}
// environment_name
std::string environment_name(SEXP env);
RcppExport SEXP genthat_environment_name(SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type env(envSEXP);
    rcpp_result_gen = Rcpp::wrap(environment_name(env));
    return rcpp_result_gen;
END_RCPP
}
// environment_name_as_code
std::string environment_name_as_code(SEXP env);
RcppExport SEXP genthat_environment_name_as_code(SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type env(envSEXP);
    rcpp_result_gen = Rcpp::wrap(environment_name_as_code(env));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP copy_traces();
RcppExport SEXP get_trace(SEXP);
RcppExport SEXP push_trace(SEXP);
RcppExport SEXP reset_traces();
RcppExport SEXP update_trace(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"genthat_serialize_value", (DL_FUNC) &genthat_serialize_value, 1},
    {"genthat_escape_name", (DL_FUNC) &genthat_escape_name, 1},
    {"genthat_reassign_function", (DL_FUNC) &genthat_reassign_function, 2},
    {"genthat_create_duplicate", (DL_FUNC) &genthat_create_duplicate, 1},
    {"genthat_environment_name", (DL_FUNC) &genthat_environment_name, 1},
    {"genthat_environment_name_as_code", (DL_FUNC) &genthat_environment_name_as_code, 1},
    {"copy_traces",                      (DL_FUNC) &copy_traces,                      0},
    {"get_trace",                        (DL_FUNC) &get_trace,                        1},
    {"push_trace",                       (DL_FUNC) &push_trace,                       1},
    {"reset_traces",                     (DL_FUNC) &reset_traces,                     0},
    {"update_trace",                     (DL_FUNC) &update_trace,                     2},
    {NULL, NULL, 0}
};

RcppExport void R_init_genthat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
