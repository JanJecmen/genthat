func: abbreviate
argv: structure(list(minlength = 6, names.arg = "abbreviate"), .Names = c("minlength", 
argv: "names.arg"))

func: abbreviate
argv: structure(list(minlength = 2, names.arg = c("abcd", "efgh", "abce"
argv: )), .Names = c("minlength", "names.arg"))

func: abbreviate
argv: structure(list(minlength = 2, names.arg = c("abcd", "efgh", "abce"
argv: ), strict = TRUE), .Names = c("minlength", "names.arg", "strict"
argv: ))

func: abbreviate
argv: structure(list(minlength = 2, names.arg = c("Alabama", "Alaska", 
argv: "Arizona", "Arkansas", "California", "Colorado", "Connecticut", 
argv: "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", 
argv: "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", 
argv: "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
argv: "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
argv: "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
argv: "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
argv: "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", 
argv: "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", 
argv: "Wyoming")), .Names = c("minlength", "names.arg"))

func: abbreviate
argv: structure(list(minlength = 3, names.arg = c("Alabama", "Alaska", 
argv: "Arizona", "Arkansas", "California", "Colorado", "Connecticut", 
argv: "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", 
argv: "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", 
argv: "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
argv: "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
argv: "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
argv: "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
argv: "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", 
argv: "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", 
argv: "Wyoming"), strict = TRUE), .Names = c("minlength", "names.arg", 
argv: "strict"))

func: abbreviate
argv: structure(list(method = "both", minlength = 2, names.arg = c("Alabama", 
argv: "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", 
argv: "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", 
argv: "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", 
argv: "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
argv: "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
argv: "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
argv: "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
argv: "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", 
argv: "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", 
argv: "Wyoming")), .Names = c("method", "minlength", "names.arg"))

func: abbreviate
argv: structure(list(minlength = 6, names.arg = "abbreviate"), .Names = c("minlength", 
argv: "names.arg"))

func: abbreviate
argv: structure(list(minlength = 2, names.arg = c("abcd", "efgh", "abce"
argv: )), .Names = c("minlength", "names.arg"))

func: abbreviate
argv: structure(list(minlength = 2, names.arg = c("abcd", "efgh", "abce"
argv: ), strict = TRUE), .Names = c("minlength", "names.arg", "strict"
argv: ))

func: abbreviate
argv: structure(list(minlength = 2, names.arg = c("Alabama", "Alaska", 
argv: "Arizona", "Arkansas", "California", "Colorado", "Connecticut", 
argv: "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", 
argv: "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", 
argv: "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
argv: "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
argv: "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
argv: "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
argv: "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", 
argv: "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", 
argv: "Wyoming")), .Names = c("minlength", "names.arg"))

func: abbreviate
argv: structure(list(minlength = 3, names.arg = c("Alabama", "Alaska", 
argv: "Arizona", "Arkansas", "California", "Colorado", "Connecticut", 
argv: "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", 
argv: "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", 
argv: "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
argv: "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
argv: "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
argv: "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
argv: "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", 
argv: "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", 
argv: "Wyoming"), strict = TRUE), .Names = c("minlength", "names.arg", 
argv: "strict"))

func: abbreviate
argv: structure(list(method = "both", minlength = 2, names.arg = c("Alabama", 
argv: "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", 
argv: "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", 
argv: "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", 
argv: "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
argv: "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
argv: "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
argv: "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
argv: "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", 
argv: "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", 
argv: "Wyoming")), .Names = c("method", "minlength", "names.arg"))

func: qr.X
argv: structure(list(qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = "qr")

func: qr.X
argv: structure(list(complete = TRUE, qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = c("complete", 
argv: "qr"))

func: svd
argv: structure(list(x = structure(c(1, 0.5, 0.333333333333333, 0.25, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.5, 0.333333333333333, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.333333333333333, 0.25, 0.2, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.0909090909090909, 0.0833333333333333, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.0714285714285714), .Dim = c(9, 6))), .Names = "x")

func: is.vector
argv: structure(list(x = c("xzfile", "writeLines", "writeChar", "writeBin", 
argv: "withVisible", "which.min", "which.max", "which", "warning", 
argv: "Version", "vector", "vapply", "utf8ToInt", "url", "unz", "unserializeFromConn", 
argv: "unserialize", "unregisterNamespace", "unlockBinding", "unlist", 
argv: "unlink", "unique", "undebug", "typeof", "truncate", "traceOnOff", 
argv: "traceback", "toupper", "tolower", "textConnectionValue", "textConnection", 
argv: "tempfile", "tempdir", "tcrossprod", "tabulate", "t.default", 
argv: "system", "Sys.unsetenv", "Sys.umask", "Sys.time", "Sys.sleep", 
argv: "Sys.setlocale", "Sys.setenv", "Sys.readlink", "sys.parents", 
argv: "sys.parent", "sys.on.exit", "sys.nframe", "Sys.localeconv", 
argv: "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", "Sys.getenv", 
argv: "sys.function", "sys.frames", "sys.frame", "Sys.chmod", "sys.calls", 
argv: "sys.call", "summary.connection", "substr<-", "substr", "sub", 
argv: "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: )), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("unique")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("truncate")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, f, drop = FALSE, ...) 
argv: UseMethod("split")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, decreasing = FALSE, ...) 
argv: {
argv:     if (!is.logical(decreasing) || length(decreasing) != 1) 
argv:         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
argv:     UseMethod("sort")
argv: }), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "||"), .Names = "x")

func: grep
argv: structure(list(x = "!"), .Names = "x")

func: grep
argv: structure(list(x = "is.logical"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "!="), .Names = "x")

func: grep
argv: structure(list(x = "length"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("seek")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("pretty")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("open")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, y, ...) 
argv: UseMethod("merge")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("mean")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("format")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con) 
argv: UseMethod("flush")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("duplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("close")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXlt")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXct")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (a, perm, ...) 
argv: UseMethod("aperm")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("anyDuplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: lapply
argv: structure(c(FALSE, FALSE, FALSE, FALSE), .Names = c("Quote", 
argv: "expression", "quote", "local"))

func: unlist
argv: structure(list(x = structure(list(xzfile = 1, writeLines = 1, 
argv:     writeChar = 1, writeBin = 1, withVisible = 1, which.min = 1, 
argv:     which.max = 1, which = 1, warning = 1, Version = 1, vector = 1, 
argv:     vapply = 1, utf8ToInt = 1, url = 1, unz = 1, unserializeFromConn = 1, 
argv:     unserialize = 1, unregisterNamespace = 1, unlockBinding = 1, 
argv:     unlist = 1, unlink = 1, unique = 1, undebug = 1, typeof = 1, 
argv:     truncate = 1, traceOnOff = 1, traceback = 1, toupper = 1, 
argv:     tolower = 1, textConnectionValue = 1, textConnection = 1, 
argv:     tempfile = 1, tempdir = 1, tcrossprod = 1, tabulate = 1, 
argv:     t.default = 1, system = 1, Sys.unsetenv = 1, Sys.umask = 1, 
argv:     Sys.time = 1, Sys.sleep = 1, Sys.setlocale = 1, Sys.setenv = 1, 
argv:     Sys.readlink = 1, sys.parents = 1, sys.parent = 1, sys.on.exit = 1, 
argv:     sys.nframe = 1, Sys.localeconv = 1, Sys.info = 1, Sys.glob = 1, 
argv:     Sys.getpid = 1, Sys.getlocale = 1, Sys.getenv = 1, sys.function = 1, 
argv:     sys.frames = 1, sys.frame = 1, Sys.chmod = 1, sys.calls = 1, 
argv:     sys.call = 1, summary.connection = 1, "substr<-" = 1, substr = 1, 
argv:     sub = 1, strtrim = 1, strtoi = 1, strsplit = 1, strptime = 1, 
argv:     stop = 1, stdout = 1, stdin = 1, stderr = 1, sprintf = 1, 
argv:     split = 1, sort = 1, sockSelect = 1, socketConnection = 1, 
argv:     sink.number = 1, sink = 1, shortRowNames = 1, setwd = 1, 
argv:     setTimeLimit = 1, setSessionTimeLimit = 1, setS4Object = 1, 
argv:     setNumMathThreads = 1, setMaxNumMathThreads = 1, setFileTime = 1, 
argv:     seterrmessage = 1, setEncoding = 1, set.seed = 1, serializeToConn = 1, 
argv:     serializeb = 1, serialize = 1, seek = 1, search = 1, scan = 1, 
argv:     saveToConn = 1, save.to.file = 1, save = 1, sample2 = 1, 
argv:     sample = 1, rwilcox = 1, rweibull = 1, runif = 1, rt = 1, 
argv:     rsignrank = 1, rpois = 1, rowSums = 1, rowsum_matrix = 1, 
argv:     rowsum_df = 1, rowMeans = 1, row = 1, rnorm = 1, RNGkind = 1, 
argv:     rnchisq = 1, rnbinom_mu = 1, rnbinom = 1, rlogis = 1, rlnorm = 1, 
argv:     rhyper = 1, rgeom = 1, rgamma = 1, rf = 1, rexp = 1, restart = 1, 
argv:     rep.int = 1, rep_len = 1, remove = 1, registerNamespace = 1, 
argv:     regexpr = 1, regexec = 1, reg.finalizer = 1, recordGraphics = 1, 
argv:     Recall = 1, readRenviron = 1, readLines = 1, readline = 1, 
argv:     readDCF = 1, readChar = 1, readBin = 1, rchisq = 1, rcauchy = 1, 
argv:     rbinom = 1, rbind = 1, rbeta = 1, rawToChar = 1, rawToBits = 1, 
argv:     rawShift = 1, rawConnectionValue = 1, rawConnection = 1, 
argv:     rapply = 1, rank = 1, radixsort = 1, R.home = 1, qwilcox = 1, 
argv:     qweibull = 1, qunif = 1, quit = 1, qtukey = 1, qt = 1, qsort = 1, 
argv:     qsignrank = 1, qr_qy_real = 1, qr_qy_cmpl = 1, qr_coef_real = 1, 
argv:     qr_coef_cmplx = 1, qpois = 1, qnt = 1, qnorm = 1, qnf = 1, 
argv:     qnchisq = 1, qnbinom_mu = 1, qnbinom = 1, qnbeta = 1, qlogis = 1, 
argv:     qlnorm = 1, qhyper = 1, qgeom = 1, qgamma = 1, qf = 1, qexp = 1, 
argv:     qchisq = 1, qcauchy = 1, qbinom = 1, qbeta = 1, pwilcox = 1, 
argv:     pweibull = 1, putconst = 1, pushBackLength = 1, pushBack = 1, 
argv:     punif = 1, ptukey = 1, pt = 1, psort = 1, psignrank = 1, 
argv:     psigamma = 1, prmatrix = 1, printDeferredWarnings = 1, print.function = 1, 
argv:     print.default = 1, pretty = 1, ppois = 1, POSIXlt2Date = 1, 
argv:     polyroot = 1, pnt = 1, pnorm = 1, pnf = 1, pnchisq = 1, pnbinom_mu = 1, 
argv:     pnbinom = 1, pnbeta = 1, pmin = 1, pmax = 1, pmatch = 1, 
argv:     plogis = 1, plnorm = 1, pipe = 1, phyper = 1, pgeom = 1, 
argv:     pgamma = 1, pf = 1, pexp = 1, pchisq = 1, pcauchy = 1, pbinom = 1, 
argv:     pbeta = 1, path.expand = 1, paste0 = 1, paste = 1, parse = 1, 
argv:     parent.frame = 1, "parent.env<-" = 1, parent.env = 1, packBits = 1, 
argv:     order = 1, options = 1, open = 1, normalizePath = 1, ngettext = 1, 
argv:     NextMethod = 1, new.env = 1, nchar = 1, mkUnbound = 1, mkCode = 1, 
argv:     mget = 1, merge = 1, memory.profile = 1, memDecompress = 1, 
argv:     memCompress = 1, mem.limits = 1, mean = 1, max.col = 1, matrix = 1, 
argv:     match.call = 1, match = 1, mapply = 1, makeLazy = 1, makeActiveBinding = 1, 
argv:     make.unique = 1, make.names = 1, machine = 1, ls = 1, lockEnvironment = 1, 
argv:     lockBinding = 1, loadFromConn2 = 1, load.from.file = 1, load = 1, 
argv:     list2env = 1, list.files = 1, list.dirs = 1, lchoose = 1, 
argv:     lbeta = 1, lazyLoadDBinsertValue = 1, lazyLoadDBflush = 1, 
argv:     lapply = 1, La_ztrcon = 1, La_zgecon = 1, La_version = 1, 
argv:     La_svd_cmplx = 1, La_svd = 1, La_solve_cmplx = 1, La_solve = 1, 
argv:     La_rs_cmplx = 1, La_rs = 1, La_rg_cmplx = 1, La_rg = 1, La_qr_cmplx = 1, 
argv:     La_qr = 1, La_dtrcon = 1, La_dlange = 1, La_dgecon = 1, La_chol2inv = 1, 
argv:     La_chol = 1, l10n_info = 1, isSeekable = 1, isOpen = 1, isNamespaceEnv = 1, 
argv:     islistfactor = 1, isIncomplete = 1, isdebugged = 1, isatty = 1, 
argv:     is.vector = 1, is.unsorted = 1, is.loaded = 1, is.builtin.internal = 1, 
argv:     intToUtf8 = 1, intToBits = 1, interruptsSuspended = 1, inspect = 1, 
argv:     inherits = 1, importIntoEnv = 1, identical = 1, icuSetCollate = 1, 
argv:     icuGetCollate = 1, iconv = 1, gzfile = 1, gzcon = 1, gsub = 1, 
argv:     growconst = 1, grepRaw = 1, grepl = 1, grep = 1, gregexpr = 1, 
argv:     getwd = 1, getVarsFromFrame = 1, gettext = 1, getSymbolInfo = 1, 
argv:     getRegisteredRoutines = 1, getRegisteredNamespace = 1, getNamespaceRegistry = 1, 
argv:     getLoadedDLLs = 1, geterrmessage = 1, getconst = 1, getConnection = 1, 
argv:     getAllConnections = 1, get = 1, gctorture2 = 1, gctorture = 1, 
argv:     gcinfo = 1, gc = 1, formatC = 1, format.POSIXlt = 1, format.info = 1, 
argv:     format = 1, formals = 1, flush = 1, findInterval = 1, file.symlink = 1, 
argv:     file.show = 1, file.rename = 1, file.remove = 1, file.path = 1, 
argv:     file.link = 1, file.info = 1, file.exists = 1, file.create = 1, 
argv:     file.copy = 1, file.choose = 1, file.append = 1, file.access = 1, 
argv:     file = 1, fifo = 1, exists = 1, eval = 1, environmentName = 1, 
argv:     environmentIsLocked = 1, environment = 1, env2list = 1, env.profile = 1, 
argv:     Encoding = 1, encodeString = 1, enableJIT = 1, eapply = 1, 
argv:     dyn.unload = 1, dyn.load = 1, dwilcox = 1, dweibull = 1, 
argv:     duplicated = 1, dunif = 1, dump = 1, dtukey = 1, dt = 1, 
argv:     dsignrank = 1, drop = 1, dput = 1, dpois = 1, do.call = 1, 
argv:     dnt = 1, dnorm = 1, dnf = 1, dnchisq = 1, dnbinom_mu = 1, 
argv:     dnbinom = 1, dnbeta = 1, dlogis = 1, dlnorm = 1, disassemble = 1, 
argv:     dirname = 1, dir.create = 1, diag = 1, dhyper = 1, dgeom = 1, 
argv:     dgamma = 1, df = 1, dexp = 1, detach = 1, det_ge_real = 1, 
argv:     deparse = 1, delayedAssign = 1, debugonce = 1, debug = 1, 
argv:     dchisq = 1, dcauchy = 1, dbinom = 1, dbeta = 1, Date2POSIXlt = 1, 
argv:     date = 1, Cstack_info = 1, crossprod = 1, crc64 = 1, copyDFattr = 1, 
argv:     complex = 1, compilePKGS = 1, "comment<-" = 1, comment = 1, 
argv:     commandArgs = 1, colSums = 1, colMeans = 1, col = 1, close = 1, 
argv:     clearPushBack = 1, choose = 1, chartr = 1, charToRaw = 1, 
argv:     charmatch = 1, cbind = 1, cat = 1, capabilitiesX11 = 1, capabilities = 1, 
argv:     bzfile = 1, builtins = 1, browserText = 1, browserSetDebug = 1, 
argv:     browserCondition = 1, bodyCode = 1, body = 1, bitwiseXor = 1, 
argv:     bitwiseShiftR = 1, bitwiseShiftL = 1, bitwiseOr = 1, bitwiseNot = 1, 
argv:     bitwiseAnd = 1, bindtextdomain = 1, bindingIsLocked = 1, 
argv:     bindingIsActive = 1, bincode = 1, beta = 1, besselY = 1, 
argv:     besselK = 1, besselJ = 1, besselI = 1, bcVersion = 1, bcClose = 1, 
argv:     basename = 1, backsolve = 1, attach = 1, atan2 = 1, assign = 1, 
argv:     as.vector = 1, as.POSIXlt = 1, as.POSIXct = 1, as.function.default = 1, 
argv:     array = 1, args = 1, aregexec = 1, aperm = 1, anyDuplicated = 1, 
argv:     all.names = 1, agrepl = 1, agrep = 1, adist = 1, abbreviate = 1, 
argv:     .signalCondition = 1, .resetCondHands = 1, .invokeRestart = 1, 
argv:     .getRestart = 1, .dfltWarn = 1, .dfltStop = 1, .addTryHandlers = 1, 
argv:     .addRestart = 1, .addCondHands = 1), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(xzfile = TRUE, writeLines = TRUE, 
argv:     writeChar = TRUE, writeBin = TRUE, withVisible = TRUE, which.min = TRUE, 
argv:     which.max = TRUE, which = TRUE, warning = TRUE, Version = TRUE, 
argv:     vector = TRUE, vapply = TRUE, utf8ToInt = TRUE, url = TRUE, 
argv:     unz = TRUE, unserializeFromConn = TRUE, unserialize = TRUE, 
argv:     unregisterNamespace = TRUE, unlockBinding = TRUE, unlist = TRUE, 
argv:     unlink = TRUE, unique = TRUE, undebug = TRUE, typeof = TRUE, 
argv:     truncate = TRUE, traceOnOff = TRUE, traceback = TRUE, toupper = TRUE, 
argv:     tolower = TRUE, textConnectionValue = TRUE, textConnection = TRUE, 
argv:     tempfile = TRUE, tempdir = TRUE, tcrossprod = TRUE, tabulate = TRUE, 
argv:     t.default = TRUE, system = TRUE, Sys.unsetenv = TRUE, Sys.umask = TRUE, 
argv:     Sys.time = TRUE, Sys.sleep = TRUE, Sys.setlocale = TRUE, 
argv:     Sys.setenv = TRUE, Sys.readlink = TRUE, sys.parents = TRUE, 
argv:     sys.parent = TRUE, sys.on.exit = TRUE, sys.nframe = TRUE, 
argv:     Sys.localeconv = TRUE, Sys.info = TRUE, Sys.glob = TRUE, 
argv:     Sys.getpid = TRUE, Sys.getlocale = TRUE, Sys.getenv = TRUE, 
argv:     sys.function = TRUE, sys.frames = TRUE, sys.frame = TRUE, 
argv:     Sys.chmod = TRUE, sys.calls = TRUE, sys.call = TRUE, summary.connection = TRUE, 
argv:     "substr<-" = TRUE, substr = TRUE, sub = TRUE, strtrim = TRUE, 
argv:     strtoi = TRUE, strsplit = TRUE, strptime = TRUE, stop = TRUE, 
argv:     stdout = TRUE, stdin = TRUE, stderr = TRUE, sprintf = TRUE, 
argv:     split = TRUE, sort = TRUE, sockSelect = TRUE, socketConnection = TRUE, 
argv:     sink.number = TRUE, sink = TRUE, shortRowNames = TRUE, setwd = TRUE, 
argv:     setTimeLimit = TRUE, setSessionTimeLimit = TRUE, setS4Object = TRUE, 
argv:     setNumMathThreads = TRUE, setMaxNumMathThreads = TRUE, setFileTime = TRUE, 
argv:     seterrmessage = TRUE, setEncoding = TRUE, set.seed = TRUE, 
argv:     serializeToConn = TRUE, serializeb = TRUE, serialize = TRUE, 
argv:     seek = TRUE, search = TRUE, scan = TRUE, saveToConn = TRUE, 
argv:     save.to.file = TRUE, save = TRUE, sample2 = TRUE, sample = TRUE, 
argv:     rwilcox = TRUE, rweibull = TRUE, runif = TRUE, rt = TRUE, 
argv:     rsignrank = TRUE, rpois = TRUE, rowSums = TRUE, rowsum_matrix = TRUE, 
argv:     rowsum_df = TRUE, rowMeans = TRUE, row = TRUE, rnorm = TRUE, 
argv:     RNGkind = TRUE, rnchisq = TRUE, rnbinom_mu = TRUE, rnbinom = TRUE, 
argv:     rlogis = TRUE, rlnorm = TRUE, rhyper = TRUE, rgeom = TRUE, 
argv:     rgamma = TRUE, rf = TRUE, rexp = TRUE, restart = TRUE, rep.int = TRUE, 
argv:     rep_len = TRUE, remove = TRUE, registerNamespace = TRUE, 
argv:     regexpr = TRUE, regexec = TRUE, reg.finalizer = TRUE, recordGraphics = TRUE, 
argv:     Recall = TRUE, readRenviron = TRUE, readLines = TRUE, readline = TRUE, 
argv:     readDCF = TRUE, readChar = TRUE, readBin = TRUE, rchisq = TRUE, 
argv:     rcauchy = TRUE, rbinom = TRUE, rbind = TRUE, rbeta = TRUE, 
argv:     rawToChar = TRUE, rawToBits = TRUE, rawShift = TRUE, rawConnectionValue = TRUE, 
argv:     rawConnection = TRUE, rapply = TRUE, rank = TRUE, radixsort = TRUE, 
argv:     R.home = TRUE, qwilcox = TRUE, qweibull = TRUE, qunif = TRUE, 
argv:     quit = TRUE, qtukey = TRUE, qt = TRUE, qsort = TRUE, qsignrank = TRUE, 
argv:     qr_qy_real = TRUE, qr_qy_cmpl = TRUE, qr_coef_real = TRUE, 
argv:     qr_coef_cmplx = TRUE, qpois = TRUE, qnt = TRUE, qnorm = TRUE, 
argv:     qnf = TRUE, qnchisq = TRUE, qnbinom_mu = TRUE, qnbinom = TRUE, 
argv:     qnbeta = TRUE, qlogis = TRUE, qlnorm = TRUE, qhyper = TRUE, 
argv:     qgeom = TRUE, qgamma = TRUE, qf = TRUE, qexp = TRUE, qchisq = TRUE, 
argv:     qcauchy = TRUE, qbinom = TRUE, qbeta = TRUE, pwilcox = TRUE, 
argv:     pweibull = TRUE, putconst = TRUE, pushBackLength = TRUE, 
argv:     pushBack = TRUE, punif = TRUE, ptukey = TRUE, pt = TRUE, 
argv:     psort = TRUE, psignrank = TRUE, psigamma = TRUE, prmatrix = TRUE, 
argv:     printDeferredWarnings = TRUE, print.function = TRUE, print.default = TRUE, 
argv:     pretty = TRUE, ppois = TRUE, POSIXlt2Date = TRUE, polyroot = TRUE, 
argv:     pnt = TRUE, pnorm = TRUE, pnf = TRUE, pnchisq = TRUE, pnbinom_mu = TRUE, 
argv:     pnbinom = TRUE, pnbeta = TRUE, pmin = TRUE, pmax = TRUE, 
argv:     pmatch = TRUE, plogis = TRUE, plnorm = TRUE, pipe = TRUE, 
argv:     phyper = TRUE, pgeom = TRUE, pgamma = TRUE, pf = TRUE, pexp = TRUE, 
argv:     pchisq = TRUE, pcauchy = TRUE, pbinom = TRUE, pbeta = TRUE, 
argv:     path.expand = TRUE, paste0 = TRUE, paste = TRUE, parse = TRUE, 
argv:     parent.frame = TRUE, "parent.env<-" = TRUE, parent.env = TRUE, 
argv:     packBits = TRUE, order = TRUE, options = TRUE, open = TRUE, 
argv:     normalizePath = TRUE, ngettext = TRUE, NextMethod = TRUE, 
argv:     new.env = TRUE, nchar = TRUE, mkUnbound = TRUE, mkCode = TRUE, 
argv:     mget = TRUE, merge = TRUE, memory.profile = TRUE, memDecompress = TRUE, 
argv:     memCompress = TRUE, mem.limits = TRUE, mean = TRUE, max.col = TRUE, 
argv:     matrix = TRUE, match.call = TRUE, match = TRUE, mapply = TRUE, 
argv:     makeLazy = TRUE, makeActiveBinding = TRUE, make.unique = TRUE, 
argv:     make.names = TRUE, machine = TRUE, ls = TRUE, lockEnvironment = TRUE, 
argv:     lockBinding = TRUE, loadFromConn2 = TRUE, load.from.file = TRUE, 
argv:     load = TRUE, list2env = TRUE, list.files = TRUE, list.dirs = TRUE, 
argv:     lchoose = TRUE, lbeta = TRUE, lazyLoadDBinsertValue = TRUE, 
argv:     lazyLoadDBflush = TRUE, lapply = TRUE, La_ztrcon = TRUE, 
argv:     La_zgecon = TRUE, La_version = TRUE, La_svd_cmplx = TRUE, 
argv:     La_svd = TRUE, La_solve_cmplx = TRUE, La_solve = TRUE, La_rs_cmplx = TRUE, 
argv:     La_rs = TRUE, La_rg_cmplx = TRUE, La_rg = TRUE, La_qr_cmplx = TRUE, 
argv:     La_qr = TRUE, La_dtrcon = TRUE, La_dlange = TRUE, La_dgecon = TRUE, 
argv:     La_chol2inv = TRUE, La_chol = TRUE, l10n_info = TRUE, isSeekable = TRUE, 
argv:     isOpen = TRUE, isNamespaceEnv = TRUE, islistfactor = TRUE, 
argv:     isIncomplete = TRUE, isdebugged = TRUE, isatty = TRUE, is.vector = TRUE, 
argv:     is.unsorted = TRUE, is.loaded = TRUE, is.builtin.internal = TRUE, 
argv:     intToUtf8 = TRUE, intToBits = TRUE, interruptsSuspended = TRUE, 
argv:     inspect = TRUE, inherits = TRUE, importIntoEnv = TRUE, identical = TRUE, 
argv:     icuSetCollate = TRUE, icuGetCollate = TRUE, iconv = TRUE, 
argv:     gzfile = TRUE, gzcon = TRUE, gsub = TRUE, growconst = TRUE, 
argv:     grepRaw = TRUE, grepl = TRUE, grep = TRUE, gregexpr = TRUE, 
argv:     getwd = TRUE, getVarsFromFrame = TRUE, gettext = TRUE, getSymbolInfo = TRUE, 
argv:     getRegisteredRoutines = TRUE, getRegisteredNamespace = TRUE, 
argv:     getNamespaceRegistry = TRUE, getLoadedDLLs = TRUE, geterrmessage = TRUE, 
argv:     getconst = TRUE, getConnection = TRUE, getAllConnections = TRUE, 
argv:     get = TRUE, gctorture2 = TRUE, gctorture = TRUE, gcinfo = TRUE, 
argv:     gc = TRUE, formatC = TRUE, format.POSIXlt = TRUE, format.info = TRUE, 
argv:     format = TRUE, formals = TRUE, flush = TRUE, findInterval = TRUE, 
argv:     file.symlink = TRUE, file.show = TRUE, file.rename = TRUE, 
argv:     file.remove = TRUE, file.path = TRUE, file.link = TRUE, file.info = TRUE, 
argv:     file.exists = TRUE, file.create = TRUE, file.copy = TRUE, 
argv:     file.choose = TRUE, file.append = TRUE, file.access = TRUE, 
argv:     file = TRUE, fifo = TRUE, exists = TRUE, eval = TRUE, environmentName = TRUE, 
argv:     environmentIsLocked = TRUE, environment = TRUE, env2list = TRUE, 
argv:     env.profile = TRUE, Encoding = TRUE, encodeString = TRUE, 
argv:     enableJIT = TRUE, eapply = TRUE, dyn.unload = TRUE, dyn.load = TRUE, 
argv:     dwilcox = TRUE, dweibull = TRUE, duplicated = TRUE, dunif = TRUE, 
argv:     dump = TRUE, dtukey = TRUE, dt = TRUE, dsignrank = TRUE, 
argv:     drop = TRUE, dput = TRUE, dpois = TRUE, do.call = TRUE, dnt = TRUE, 
argv:     dnorm = TRUE, dnf = TRUE, dnchisq = TRUE, dnbinom_mu = TRUE, 
argv:     dnbinom = TRUE, dnbeta = TRUE, dlogis = TRUE, dlnorm = TRUE, 
argv:     disassemble = TRUE, dirname = TRUE, dir.create = TRUE, diag = TRUE, 
argv:     dhyper = TRUE, dgeom = TRUE, dgamma = TRUE, df = TRUE, dexp = TRUE, 
argv:     detach = TRUE, det_ge_real = TRUE, deparse = TRUE, delayedAssign = TRUE, 
argv:     debugonce = TRUE, debug = TRUE, dchisq = TRUE, dcauchy = TRUE, 
argv:     dbinom = TRUE, dbeta = TRUE, Date2POSIXlt = TRUE, date = TRUE, 
argv:     Cstack_info = TRUE, crossprod = TRUE, crc64 = TRUE, copyDFattr = TRUE, 
argv:     complex = TRUE, compilePKGS = TRUE, "comment<-" = TRUE, comment = TRUE, 
argv:     commandArgs = TRUE, colSums = TRUE, colMeans = TRUE, col = TRUE, 
argv:     close = TRUE, clearPushBack = TRUE, choose = TRUE, chartr = TRUE, 
argv:     charToRaw = TRUE, charmatch = TRUE, cbind = TRUE, cat = TRUE, 
argv:     capabilitiesX11 = TRUE, capabilities = TRUE, bzfile = TRUE, 
argv:     builtins = TRUE, browserText = TRUE, browserSetDebug = TRUE, 
argv:     browserCondition = TRUE, bodyCode = TRUE, body = TRUE, bitwiseXor = TRUE, 
argv:     bitwiseShiftR = TRUE, bitwiseShiftL = TRUE, bitwiseOr = TRUE, 
argv:     bitwiseNot = TRUE, bitwiseAnd = TRUE, bindtextdomain = TRUE, 
argv:     bindingIsLocked = TRUE, bindingIsActive = TRUE, bincode = TRUE, 
argv:     beta = TRUE, besselY = TRUE, besselK = TRUE, besselJ = TRUE, 
argv:     besselI = TRUE, bcVersion = TRUE, bcClose = TRUE, basename = TRUE, 
argv:     backsolve = TRUE, attach = TRUE, atan2 = TRUE, assign = TRUE, 
argv:     as.vector = TRUE, as.POSIXlt = TRUE, as.POSIXct = TRUE, as.function.default = TRUE, 
argv:     array = TRUE, args = TRUE, aregexec = TRUE, aperm = TRUE, 
argv:     anyDuplicated = TRUE, all.names = TRUE, agrepl = TRUE, agrep = TRUE, 
argv:     adist = TRUE, abbreviate = TRUE, .signalCondition = TRUE, 
argv:     .resetCondHands = TRUE, .invokeRestart = TRUE, .getRestart = TRUE, 
argv:     .dfltWarn = TRUE, .dfltStop = TRUE, .addTryHandlers = TRUE, 
argv:     .addRestart = TRUE, .addCondHands = TRUE), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(length(testr:::cache$decorated) > 
argv:     0)), .Names = c("pattern", "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpXnq2eO"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(all(check.dec))), .Names = c("pattern", 
argv: "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpXnq2eO"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: qr.X
argv: structure(list(qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = "qr")

func: qr.X
argv: structure(list(complete = TRUE, qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = c("complete", 
argv: "qr"))

func: svd
argv: structure(list(x = structure(c(1, 0.5, 0.333333333333333, 0.25, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.5, 0.333333333333333, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.333333333333333, 0.25, 0.2, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.0909090909090909, 0.0833333333333333, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.0714285714285714), .Dim = c(9, 6))), .Names = "x")

func: is.vector
argv: structure(list(x = c("xzfile", "writeLines", "writeChar", "writeBin", 
argv: "withVisible", "which.min", "which.max", "which", "warning", 
argv: "Version", "vector", "vapply", "utf8ToInt", "url", "unz", "unserializeFromConn", 
argv: "unserialize", "unregisterNamespace", "unlockBinding", "unlist", 
argv: "unlink", "unique", "undebug", "typeof", "truncate", "traceOnOff", 
argv: "traceback", "toupper", "tolower", "textConnectionValue", "textConnection", 
argv: "tempfile", "tempdir", "tcrossprod", "tabulate", "t.default", 
argv: "system", "Sys.unsetenv", "Sys.umask", "Sys.time", "Sys.sleep", 
argv: "Sys.setlocale", "Sys.setenv", "Sys.readlink", "sys.parents", 
argv: "sys.parent", "sys.on.exit", "sys.nframe", "Sys.localeconv", 
argv: "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", "Sys.getenv", 
argv: "sys.function", "sys.frames", "sys.frame", "Sys.chmod", "sys.calls", 
argv: "sys.call", "summary.connection", "substr<-", "substr", "sub", 
argv: "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: )), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("unique")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("truncate")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, f, drop = FALSE, ...) 
argv: UseMethod("split")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, decreasing = FALSE, ...) 
argv: {
argv:     if (!is.logical(decreasing) || length(decreasing) != 1) 
argv:         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
argv:     UseMethod("sort")
argv: }), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "||"), .Names = "x")

func: grep
argv: structure(list(x = "!"), .Names = "x")

func: grep
argv: structure(list(x = "is.logical"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "!="), .Names = "x")

func: grep
argv: structure(list(x = "length"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("seek")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("pretty")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("open")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, y, ...) 
argv: UseMethod("merge")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("mean")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("format")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con) 
argv: UseMethod("flush")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("duplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("close")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXlt")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXct")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (a, perm, ...) 
argv: UseMethod("aperm")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("anyDuplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: lapply
argv: structure(c(FALSE, FALSE, FALSE, FALSE), .Names = c("Quote", 
argv: "expression", "quote", "local"))

func: unlist
argv: structure(list(x = structure(list(xzfile = 1, writeLines = 1, 
argv:     writeChar = 1, writeBin = 1, withVisible = 1, which.min = 1, 
argv:     which.max = 1, which = 1, warning = 1, Version = 1, vector = 1, 
argv:     vapply = 1, utf8ToInt = 1, url = 1, unz = 1, unserializeFromConn = 1, 
argv:     unserialize = 1, unregisterNamespace = 1, unlockBinding = 1, 
argv:     unlist = 1, unlink = 1, unique = 1, undebug = 1, typeof = 1, 
argv:     truncate = 1, traceOnOff = 1, traceback = 1, toupper = 1, 
argv:     tolower = 1, textConnectionValue = 1, textConnection = 1, 
argv:     tempfile = 1, tempdir = 1, tcrossprod = 1, tabulate = 1, 
argv:     t.default = 1, system = 1, Sys.unsetenv = 1, Sys.umask = 1, 
argv:     Sys.time = 1, Sys.sleep = 1, Sys.setlocale = 1, Sys.setenv = 1, 
argv:     Sys.readlink = 1, sys.parents = 1, sys.parent = 1, sys.on.exit = 1, 
argv:     sys.nframe = 1, Sys.localeconv = 1, Sys.info = 1, Sys.glob = 1, 
argv:     Sys.getpid = 1, Sys.getlocale = 1, Sys.getenv = 1, sys.function = 1, 
argv:     sys.frames = 1, sys.frame = 1, Sys.chmod = 1, sys.calls = 1, 
argv:     sys.call = 1, summary.connection = 1, "substr<-" = 1, substr = 1, 
argv:     sub = 1, strtrim = 1, strtoi = 1, strsplit = 1, strptime = 1, 
argv:     stop = 1, stdout = 1, stdin = 1, stderr = 1, sprintf = 1, 
argv:     split = 1, sort = 1, sockSelect = 1, socketConnection = 1, 
argv:     sink.number = 1, sink = 1, shortRowNames = 1, setwd = 1, 
argv:     setTimeLimit = 1, setSessionTimeLimit = 1, setS4Object = 1, 
argv:     setNumMathThreads = 1, setMaxNumMathThreads = 1, setFileTime = 1, 
argv:     seterrmessage = 1, setEncoding = 1, set.seed = 1, serializeToConn = 1, 
argv:     serializeb = 1, serialize = 1, seek = 1, search = 1, scan = 1, 
argv:     saveToConn = 1, save.to.file = 1, save = 1, sample2 = 1, 
argv:     sample = 1, rwilcox = 1, rweibull = 1, runif = 1, rt = 1, 
argv:     rsignrank = 1, rpois = 1, rowSums = 1, rowsum_matrix = 1, 
argv:     rowsum_df = 1, rowMeans = 1, row = 1, rnorm = 1, RNGkind = 1, 
argv:     rnchisq = 1, rnbinom_mu = 1, rnbinom = 1, rlogis = 1, rlnorm = 1, 
argv:     rhyper = 1, rgeom = 1, rgamma = 1, rf = 1, rexp = 1, restart = 1, 
argv:     rep.int = 1, rep_len = 1, remove = 1, registerNamespace = 1, 
argv:     regexpr = 1, regexec = 1, reg.finalizer = 1, recordGraphics = 1, 
argv:     Recall = 1, readRenviron = 1, readLines = 1, readline = 1, 
argv:     readDCF = 1, readChar = 1, readBin = 1, rchisq = 1, rcauchy = 1, 
argv:     rbinom = 1, rbind = 1, rbeta = 1, rawToChar = 1, rawToBits = 1, 
argv:     rawShift = 1, rawConnectionValue = 1, rawConnection = 1, 
argv:     rapply = 1, rank = 1, radixsort = 1, R.home = 1, qwilcox = 1, 
argv:     qweibull = 1, qunif = 1, quit = 1, qtukey = 1, qt = 1, qsort = 1, 
argv:     qsignrank = 1, qr_qy_real = 1, qr_qy_cmpl = 1, qr_coef_real = 1, 
argv:     qr_coef_cmplx = 1, qpois = 1, qnt = 1, qnorm = 1, qnf = 1, 
argv:     qnchisq = 1, qnbinom_mu = 1, qnbinom = 1, qnbeta = 1, qlogis = 1, 
argv:     qlnorm = 1, qhyper = 1, qgeom = 1, qgamma = 1, qf = 1, qexp = 1, 
argv:     qchisq = 1, qcauchy = 1, qbinom = 1, qbeta = 1, pwilcox = 1, 
argv:     pweibull = 1, putconst = 1, pushBackLength = 1, pushBack = 1, 
argv:     punif = 1, ptukey = 1, pt = 1, psort = 1, psignrank = 1, 
argv:     psigamma = 1, prmatrix = 1, printDeferredWarnings = 1, print.function = 1, 
argv:     print.default = 1, pretty = 1, ppois = 1, POSIXlt2Date = 1, 
argv:     polyroot = 1, pnt = 1, pnorm = 1, pnf = 1, pnchisq = 1, pnbinom_mu = 1, 
argv:     pnbinom = 1, pnbeta = 1, pmin = 1, pmax = 1, pmatch = 1, 
argv:     plogis = 1, plnorm = 1, pipe = 1, phyper = 1, pgeom = 1, 
argv:     pgamma = 1, pf = 1, pexp = 1, pchisq = 1, pcauchy = 1, pbinom = 1, 
argv:     pbeta = 1, path.expand = 1, paste0 = 1, paste = 1, parse = 1, 
argv:     parent.frame = 1, "parent.env<-" = 1, parent.env = 1, packBits = 1, 
argv:     order = 1, options = 1, open = 1, normalizePath = 1, ngettext = 1, 
argv:     NextMethod = 1, new.env = 1, nchar = 1, mkUnbound = 1, mkCode = 1, 
argv:     mget = 1, merge = 1, memory.profile = 1, memDecompress = 1, 
argv:     memCompress = 1, mem.limits = 1, mean = 1, max.col = 1, matrix = 1, 
argv:     match.call = 1, match = 1, mapply = 1, makeLazy = 1, makeActiveBinding = 1, 
argv:     make.unique = 1, make.names = 1, machine = 1, ls = 1, lockEnvironment = 1, 
argv:     lockBinding = 1, loadFromConn2 = 1, load.from.file = 1, load = 1, 
argv:     list2env = 1, list.files = 1, list.dirs = 1, lchoose = 1, 
argv:     lbeta = 1, lazyLoadDBinsertValue = 1, lazyLoadDBflush = 1, 
argv:     lapply = 1, La_ztrcon = 1, La_zgecon = 1, La_version = 1, 
argv:     La_svd_cmplx = 1, La_svd = 1, La_solve_cmplx = 1, La_solve = 1, 
argv:     La_rs_cmplx = 1, La_rs = 1, La_rg_cmplx = 1, La_rg = 1, La_qr_cmplx = 1, 
argv:     La_qr = 1, La_dtrcon = 1, La_dlange = 1, La_dgecon = 1, La_chol2inv = 1, 
argv:     La_chol = 1, l10n_info = 1, isSeekable = 1, isOpen = 1, isNamespaceEnv = 1, 
argv:     islistfactor = 1, isIncomplete = 1, isdebugged = 1, isatty = 1, 
argv:     is.vector = 1, is.unsorted = 1, is.loaded = 1, is.builtin.internal = 1, 
argv:     intToUtf8 = 1, intToBits = 1, interruptsSuspended = 1, inspect = 1, 
argv:     inherits = 1, importIntoEnv = 1, identical = 1, icuSetCollate = 1, 
argv:     icuGetCollate = 1, iconv = 1, gzfile = 1, gzcon = 1, gsub = 1, 
argv:     growconst = 1, grepRaw = 1, grepl = 1, grep = 1, gregexpr = 1, 
argv:     getwd = 1, getVarsFromFrame = 1, gettext = 1, getSymbolInfo = 1, 
argv:     getRegisteredRoutines = 1, getRegisteredNamespace = 1, getNamespaceRegistry = 1, 
argv:     getLoadedDLLs = 1, geterrmessage = 1, getconst = 1, getConnection = 1, 
argv:     getAllConnections = 1, get = 1, gctorture2 = 1, gctorture = 1, 
argv:     gcinfo = 1, gc = 1, formatC = 1, format.POSIXlt = 1, format.info = 1, 
argv:     format = 1, formals = 1, flush = 1, findInterval = 1, file.symlink = 1, 
argv:     file.show = 1, file.rename = 1, file.remove = 1, file.path = 1, 
argv:     file.link = 1, file.info = 1, file.exists = 1, file.create = 1, 
argv:     file.copy = 1, file.choose = 1, file.append = 1, file.access = 1, 
argv:     file = 1, fifo = 1, exists = 1, eval = 1, environmentName = 1, 
argv:     environmentIsLocked = 1, environment = 1, env2list = 1, env.profile = 1, 
argv:     Encoding = 1, encodeString = 1, enableJIT = 1, eapply = 1, 
argv:     dyn.unload = 1, dyn.load = 1, dwilcox = 1, dweibull = 1, 
argv:     duplicated = 1, dunif = 1, dump = 1, dtukey = 1, dt = 1, 
argv:     dsignrank = 1, drop = 1, dput = 1, dpois = 1, do.call = 1, 
argv:     dnt = 1, dnorm = 1, dnf = 1, dnchisq = 1, dnbinom_mu = 1, 
argv:     dnbinom = 1, dnbeta = 1, dlogis = 1, dlnorm = 1, disassemble = 1, 
argv:     dirname = 1, dir.create = 1, diag = 1, dhyper = 1, dgeom = 1, 
argv:     dgamma = 1, df = 1, dexp = 1, detach = 1, det_ge_real = 1, 
argv:     deparse = 1, delayedAssign = 1, debugonce = 1, debug = 1, 
argv:     dchisq = 1, dcauchy = 1, dbinom = 1, dbeta = 1, Date2POSIXlt = 1, 
argv:     date = 1, Cstack_info = 1, crossprod = 1, crc64 = 1, copyDFattr = 1, 
argv:     complex = 1, compilePKGS = 1, "comment<-" = 1, comment = 1, 
argv:     commandArgs = 1, colSums = 1, colMeans = 1, col = 1, close = 1, 
argv:     clearPushBack = 1, choose = 1, chartr = 1, charToRaw = 1, 
argv:     charmatch = 1, cbind = 1, cat = 1, capabilitiesX11 = 1, capabilities = 1, 
argv:     bzfile = 1, builtins = 1, browserText = 1, browserSetDebug = 1, 
argv:     browserCondition = 1, bodyCode = 1, body = 1, bitwiseXor = 1, 
argv:     bitwiseShiftR = 1, bitwiseShiftL = 1, bitwiseOr = 1, bitwiseNot = 1, 
argv:     bitwiseAnd = 1, bindtextdomain = 1, bindingIsLocked = 1, 
argv:     bindingIsActive = 1, bincode = 1, beta = 1, besselY = 1, 
argv:     besselK = 1, besselJ = 1, besselI = 1, bcVersion = 1, bcClose = 1, 
argv:     basename = 1, backsolve = 1, attach = 1, atan2 = 1, assign = 1, 
argv:     as.vector = 1, as.POSIXlt = 1, as.POSIXct = 1, as.function.default = 1, 
argv:     array = 1, args = 1, aregexec = 1, aperm = 1, anyDuplicated = 1, 
argv:     all.names = 1, agrepl = 1, agrep = 1, adist = 1, abbreviate = 1, 
argv:     .signalCondition = 1, .resetCondHands = 1, .invokeRestart = 1, 
argv:     .getRestart = 1, .dfltWarn = 1, .dfltStop = 1, .addTryHandlers = 1, 
argv:     .addRestart = 1, .addCondHands = 1), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(xzfile = TRUE, writeLines = TRUE, 
argv:     writeChar = TRUE, writeBin = TRUE, withVisible = TRUE, which.min = TRUE, 
argv:     which.max = TRUE, which = TRUE, warning = TRUE, Version = TRUE, 
argv:     vector = TRUE, vapply = TRUE, utf8ToInt = TRUE, url = TRUE, 
argv:     unz = TRUE, unserializeFromConn = TRUE, unserialize = TRUE, 
argv:     unregisterNamespace = TRUE, unlockBinding = TRUE, unlist = TRUE, 
argv:     unlink = TRUE, unique = TRUE, undebug = TRUE, typeof = TRUE, 
argv:     truncate = TRUE, traceOnOff = TRUE, traceback = TRUE, toupper = TRUE, 
argv:     tolower = TRUE, textConnectionValue = TRUE, textConnection = TRUE, 
argv:     tempfile = TRUE, tempdir = TRUE, tcrossprod = TRUE, tabulate = TRUE, 
argv:     t.default = TRUE, system = TRUE, Sys.unsetenv = TRUE, Sys.umask = TRUE, 
argv:     Sys.time = TRUE, Sys.sleep = TRUE, Sys.setlocale = TRUE, 
argv:     Sys.setenv = TRUE, Sys.readlink = TRUE, sys.parents = TRUE, 
argv:     sys.parent = TRUE, sys.on.exit = TRUE, sys.nframe = TRUE, 
argv:     Sys.localeconv = TRUE, Sys.info = TRUE, Sys.glob = TRUE, 
argv:     Sys.getpid = TRUE, Sys.getlocale = TRUE, Sys.getenv = TRUE, 
argv:     sys.function = TRUE, sys.frames = TRUE, sys.frame = TRUE, 
argv:     Sys.chmod = TRUE, sys.calls = TRUE, sys.call = TRUE, summary.connection = TRUE, 
argv:     "substr<-" = TRUE, substr = TRUE, sub = TRUE, strtrim = TRUE, 
argv:     strtoi = TRUE, strsplit = TRUE, strptime = TRUE, stop = TRUE, 
argv:     stdout = TRUE, stdin = TRUE, stderr = TRUE, sprintf = TRUE, 
argv:     split = TRUE, sort = TRUE, sockSelect = TRUE, socketConnection = TRUE, 
argv:     sink.number = TRUE, sink = TRUE, shortRowNames = TRUE, setwd = TRUE, 
argv:     setTimeLimit = TRUE, setSessionTimeLimit = TRUE, setS4Object = TRUE, 
argv:     setNumMathThreads = TRUE, setMaxNumMathThreads = TRUE, setFileTime = TRUE, 
argv:     seterrmessage = TRUE, setEncoding = TRUE, set.seed = TRUE, 
argv:     serializeToConn = TRUE, serializeb = TRUE, serialize = TRUE, 
argv:     seek = TRUE, search = TRUE, scan = TRUE, saveToConn = TRUE, 
argv:     save.to.file = TRUE, save = TRUE, sample2 = TRUE, sample = TRUE, 
argv:     rwilcox = TRUE, rweibull = TRUE, runif = TRUE, rt = TRUE, 
argv:     rsignrank = TRUE, rpois = TRUE, rowSums = TRUE, rowsum_matrix = TRUE, 
argv:     rowsum_df = TRUE, rowMeans = TRUE, row = TRUE, rnorm = TRUE, 
argv:     RNGkind = TRUE, rnchisq = TRUE, rnbinom_mu = TRUE, rnbinom = TRUE, 
argv:     rlogis = TRUE, rlnorm = TRUE, rhyper = TRUE, rgeom = TRUE, 
argv:     rgamma = TRUE, rf = TRUE, rexp = TRUE, restart = TRUE, rep.int = TRUE, 
argv:     rep_len = TRUE, remove = TRUE, registerNamespace = TRUE, 
argv:     regexpr = TRUE, regexec = TRUE, reg.finalizer = TRUE, recordGraphics = TRUE, 
argv:     Recall = TRUE, readRenviron = TRUE, readLines = TRUE, readline = TRUE, 
argv:     readDCF = TRUE, readChar = TRUE, readBin = TRUE, rchisq = TRUE, 
argv:     rcauchy = TRUE, rbinom = TRUE, rbind = TRUE, rbeta = TRUE, 
argv:     rawToChar = TRUE, rawToBits = TRUE, rawShift = TRUE, rawConnectionValue = TRUE, 
argv:     rawConnection = TRUE, rapply = TRUE, rank = TRUE, radixsort = TRUE, 
argv:     R.home = TRUE, qwilcox = TRUE, qweibull = TRUE, qunif = TRUE, 
argv:     quit = TRUE, qtukey = TRUE, qt = TRUE, qsort = TRUE, qsignrank = TRUE, 
argv:     qr_qy_real = TRUE, qr_qy_cmpl = TRUE, qr_coef_real = TRUE, 
argv:     qr_coef_cmplx = TRUE, qpois = TRUE, qnt = TRUE, qnorm = TRUE, 
argv:     qnf = TRUE, qnchisq = TRUE, qnbinom_mu = TRUE, qnbinom = TRUE, 
argv:     qnbeta = TRUE, qlogis = TRUE, qlnorm = TRUE, qhyper = TRUE, 
argv:     qgeom = TRUE, qgamma = TRUE, qf = TRUE, qexp = TRUE, qchisq = TRUE, 
argv:     qcauchy = TRUE, qbinom = TRUE, qbeta = TRUE, pwilcox = TRUE, 
argv:     pweibull = TRUE, putconst = TRUE, pushBackLength = TRUE, 
argv:     pushBack = TRUE, punif = TRUE, ptukey = TRUE, pt = TRUE, 
argv:     psort = TRUE, psignrank = TRUE, psigamma = TRUE, prmatrix = TRUE, 
argv:     printDeferredWarnings = TRUE, print.function = TRUE, print.default = TRUE, 
argv:     pretty = TRUE, ppois = TRUE, POSIXlt2Date = TRUE, polyroot = TRUE, 
argv:     pnt = TRUE, pnorm = TRUE, pnf = TRUE, pnchisq = TRUE, pnbinom_mu = TRUE, 
argv:     pnbinom = TRUE, pnbeta = TRUE, pmin = TRUE, pmax = TRUE, 
argv:     pmatch = TRUE, plogis = TRUE, plnorm = TRUE, pipe = TRUE, 
argv:     phyper = TRUE, pgeom = TRUE, pgamma = TRUE, pf = TRUE, pexp = TRUE, 
argv:     pchisq = TRUE, pcauchy = TRUE, pbinom = TRUE, pbeta = TRUE, 
argv:     path.expand = TRUE, paste0 = TRUE, paste = TRUE, parse = TRUE, 
argv:     parent.frame = TRUE, "parent.env<-" = TRUE, parent.env = TRUE, 
argv:     packBits = TRUE, order = TRUE, options = TRUE, open = TRUE, 
argv:     normalizePath = TRUE, ngettext = TRUE, NextMethod = TRUE, 
argv:     new.env = TRUE, nchar = TRUE, mkUnbound = TRUE, mkCode = TRUE, 
argv:     mget = TRUE, merge = TRUE, memory.profile = TRUE, memDecompress = TRUE, 
argv:     memCompress = TRUE, mem.limits = TRUE, mean = TRUE, max.col = TRUE, 
argv:     matrix = TRUE, match.call = TRUE, match = TRUE, mapply = TRUE, 
argv:     makeLazy = TRUE, makeActiveBinding = TRUE, make.unique = TRUE, 
argv:     make.names = TRUE, machine = TRUE, ls = TRUE, lockEnvironment = TRUE, 
argv:     lockBinding = TRUE, loadFromConn2 = TRUE, load.from.file = TRUE, 
argv:     load = TRUE, list2env = TRUE, list.files = TRUE, list.dirs = TRUE, 
argv:     lchoose = TRUE, lbeta = TRUE, lazyLoadDBinsertValue = TRUE, 
argv:     lazyLoadDBflush = TRUE, lapply = TRUE, La_ztrcon = TRUE, 
argv:     La_zgecon = TRUE, La_version = TRUE, La_svd_cmplx = TRUE, 
argv:     La_svd = TRUE, La_solve_cmplx = TRUE, La_solve = TRUE, La_rs_cmplx = TRUE, 
argv:     La_rs = TRUE, La_rg_cmplx = TRUE, La_rg = TRUE, La_qr_cmplx = TRUE, 
argv:     La_qr = TRUE, La_dtrcon = TRUE, La_dlange = TRUE, La_dgecon = TRUE, 
argv:     La_chol2inv = TRUE, La_chol = TRUE, l10n_info = TRUE, isSeekable = TRUE, 
argv:     isOpen = TRUE, isNamespaceEnv = TRUE, islistfactor = TRUE, 
argv:     isIncomplete = TRUE, isdebugged = TRUE, isatty = TRUE, is.vector = TRUE, 
argv:     is.unsorted = TRUE, is.loaded = TRUE, is.builtin.internal = TRUE, 
argv:     intToUtf8 = TRUE, intToBits = TRUE, interruptsSuspended = TRUE, 
argv:     inspect = TRUE, inherits = TRUE, importIntoEnv = TRUE, identical = TRUE, 
argv:     icuSetCollate = TRUE, icuGetCollate = TRUE, iconv = TRUE, 
argv:     gzfile = TRUE, gzcon = TRUE, gsub = TRUE, growconst = TRUE, 
argv:     grepRaw = TRUE, grepl = TRUE, grep = TRUE, gregexpr = TRUE, 
argv:     getwd = TRUE, getVarsFromFrame = TRUE, gettext = TRUE, getSymbolInfo = TRUE, 
argv:     getRegisteredRoutines = TRUE, getRegisteredNamespace = TRUE, 
argv:     getNamespaceRegistry = TRUE, getLoadedDLLs = TRUE, geterrmessage = TRUE, 
argv:     getconst = TRUE, getConnection = TRUE, getAllConnections = TRUE, 
argv:     get = TRUE, gctorture2 = TRUE, gctorture = TRUE, gcinfo = TRUE, 
argv:     gc = TRUE, formatC = TRUE, format.POSIXlt = TRUE, format.info = TRUE, 
argv:     format = TRUE, formals = TRUE, flush = TRUE, findInterval = TRUE, 
argv:     file.symlink = TRUE, file.show = TRUE, file.rename = TRUE, 
argv:     file.remove = TRUE, file.path = TRUE, file.link = TRUE, file.info = TRUE, 
argv:     file.exists = TRUE, file.create = TRUE, file.copy = TRUE, 
argv:     file.choose = TRUE, file.append = TRUE, file.access = TRUE, 
argv:     file = TRUE, fifo = TRUE, exists = TRUE, eval = TRUE, environmentName = TRUE, 
argv:     environmentIsLocked = TRUE, environment = TRUE, env2list = TRUE, 
argv:     env.profile = TRUE, Encoding = TRUE, encodeString = TRUE, 
argv:     enableJIT = TRUE, eapply = TRUE, dyn.unload = TRUE, dyn.load = TRUE, 
argv:     dwilcox = TRUE, dweibull = TRUE, duplicated = TRUE, dunif = TRUE, 
argv:     dump = TRUE, dtukey = TRUE, dt = TRUE, dsignrank = TRUE, 
argv:     drop = TRUE, dput = TRUE, dpois = TRUE, do.call = TRUE, dnt = TRUE, 
argv:     dnorm = TRUE, dnf = TRUE, dnchisq = TRUE, dnbinom_mu = TRUE, 
argv:     dnbinom = TRUE, dnbeta = TRUE, dlogis = TRUE, dlnorm = TRUE, 
argv:     disassemble = TRUE, dirname = TRUE, dir.create = TRUE, diag = TRUE, 
argv:     dhyper = TRUE, dgeom = TRUE, dgamma = TRUE, df = TRUE, dexp = TRUE, 
argv:     detach = TRUE, det_ge_real = TRUE, deparse = TRUE, delayedAssign = TRUE, 
argv:     debugonce = TRUE, debug = TRUE, dchisq = TRUE, dcauchy = TRUE, 
argv:     dbinom = TRUE, dbeta = TRUE, Date2POSIXlt = TRUE, date = TRUE, 
argv:     Cstack_info = TRUE, crossprod = TRUE, crc64 = TRUE, copyDFattr = TRUE, 
argv:     complex = TRUE, compilePKGS = TRUE, "comment<-" = TRUE, comment = TRUE, 
argv:     commandArgs = TRUE, colSums = TRUE, colMeans = TRUE, col = TRUE, 
argv:     close = TRUE, clearPushBack = TRUE, choose = TRUE, chartr = TRUE, 
argv:     charToRaw = TRUE, charmatch = TRUE, cbind = TRUE, cat = TRUE, 
argv:     capabilitiesX11 = TRUE, capabilities = TRUE, bzfile = TRUE, 
argv:     builtins = TRUE, browserText = TRUE, browserSetDebug = TRUE, 
argv:     browserCondition = TRUE, bodyCode = TRUE, body = TRUE, bitwiseXor = TRUE, 
argv:     bitwiseShiftR = TRUE, bitwiseShiftL = TRUE, bitwiseOr = TRUE, 
argv:     bitwiseNot = TRUE, bitwiseAnd = TRUE, bindtextdomain = TRUE, 
argv:     bindingIsLocked = TRUE, bindingIsActive = TRUE, bincode = TRUE, 
argv:     beta = TRUE, besselY = TRUE, besselK = TRUE, besselJ = TRUE, 
argv:     besselI = TRUE, bcVersion = TRUE, bcClose = TRUE, basename = TRUE, 
argv:     backsolve = TRUE, attach = TRUE, atan2 = TRUE, assign = TRUE, 
argv:     as.vector = TRUE, as.POSIXlt = TRUE, as.POSIXct = TRUE, as.function.default = TRUE, 
argv:     array = TRUE, args = TRUE, aregexec = TRUE, aperm = TRUE, 
argv:     anyDuplicated = TRUE, all.names = TRUE, agrepl = TRUE, agrep = TRUE, 
argv:     adist = TRUE, abbreviate = TRUE, .signalCondition = TRUE, 
argv:     .resetCondHands = TRUE, .invokeRestart = TRUE, .getRestart = TRUE, 
argv:     .dfltWarn = TRUE, .dfltStop = TRUE, .addTryHandlers = TRUE, 
argv:     .addRestart = TRUE, .addCondHands = TRUE), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(length(testr:::cache$decorated) > 
argv:     0)), .Names = c("pattern", "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpDu4rUB"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(all(check.dec))), .Names = c("pattern", 
argv: "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpDu4rUB"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: qr.X
argv: structure(list(qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = "qr")

func: qr.X
argv: structure(list(complete = TRUE, qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = c("complete", 
argv: "qr"))

func: svd
argv: structure(list(x = structure(c(1, 0.5, 0.333333333333333, 0.25, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.5, 0.333333333333333, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.333333333333333, 0.25, 0.2, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.0909090909090909, 0.0833333333333333, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.0714285714285714), .Dim = c(9, 6))), .Names = "x")

func: is.vector
argv: structure(list(x = c("xzfile", "writeLines", "writeChar", "writeBin", 
argv: "withVisible", "which.min", "which.max", "which", "warning", 
argv: "Version", "vector", "vapply", "utf8ToInt", "url", "unz", "unserializeFromConn", 
argv: "unserialize", "unregisterNamespace", "unlockBinding", "unlist", 
argv: "unlink", "unique", "undebug", "typeof", "truncate", "traceOnOff", 
argv: "traceback", "toupper", "tolower", "textConnectionValue", "textConnection", 
argv: "tempfile", "tempdir", "tcrossprod", "tabulate", "t.default", 
argv: "system", "Sys.unsetenv", "Sys.umask", "Sys.time", "Sys.sleep", 
argv: "Sys.setlocale", "Sys.setenv", "Sys.readlink", "sys.parents", 
argv: "sys.parent", "sys.on.exit", "sys.nframe", "Sys.localeconv", 
argv: "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", "Sys.getenv", 
argv: "sys.function", "sys.frames", "sys.frame", "Sys.chmod", "sys.calls", 
argv: "sys.call", "summary.connection", "substr<-", "substr", "sub", 
argv: "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: )), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("unique")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("truncate")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, f, drop = FALSE, ...) 
argv: UseMethod("split")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, decreasing = FALSE, ...) 
argv: {
argv:     if (!is.logical(decreasing) || length(decreasing) != 1) 
argv:         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
argv:     UseMethod("sort")
argv: }), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "||"), .Names = "x")

func: grep
argv: structure(list(x = "!"), .Names = "x")

func: grep
argv: structure(list(x = "is.logical"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "!="), .Names = "x")

func: grep
argv: structure(list(x = "length"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("seek")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("pretty")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("open")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, y, ...) 
argv: UseMethod("merge")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("mean")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("format")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con) 
argv: UseMethod("flush")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("duplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("close")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXlt")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXct")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (a, perm, ...) 
argv: UseMethod("aperm")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("anyDuplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: lapply
argv: structure(list(names = c("name", "objs", "where", "visible", 
argv: "dups"), class = "getAnywhere"), .Names = c("names", "class"))

func: unlist
argv: structure(list(x = structure(list(xzfile = 1, writeLines = 1, 
argv:     writeChar = 1, writeBin = 1, withVisible = 1, which.min = 1, 
argv:     which.max = 1, which = 1, warning = 1, Version = 1, vector = 1, 
argv:     vapply = 1, utf8ToInt = 1, url = 1, unz = 1, unserializeFromConn = 1, 
argv:     unserialize = 1, unregisterNamespace = 1, unlockBinding = 1, 
argv:     unlist = 1, unlink = 1, unique = 1, undebug = 1, typeof = 1, 
argv:     truncate = 1, traceOnOff = 1, traceback = 1, toupper = 1, 
argv:     tolower = 1, textConnectionValue = 1, textConnection = 1, 
argv:     tempfile = 1, tempdir = 1, tcrossprod = 1, tabulate = 1, 
argv:     t.default = 1, system = 1, Sys.unsetenv = 1, Sys.umask = 1, 
argv:     Sys.time = 1, Sys.sleep = 1, Sys.setlocale = 1, Sys.setenv = 1, 
argv:     Sys.readlink = 1, sys.parents = 1, sys.parent = 1, sys.on.exit = 1, 
argv:     sys.nframe = 1, Sys.localeconv = 1, Sys.info = 1, Sys.glob = 1, 
argv:     Sys.getpid = 1, Sys.getlocale = 1, Sys.getenv = 1, sys.function = 1, 
argv:     sys.frames = 1, sys.frame = 1, Sys.chmod = 1, sys.calls = 1, 
argv:     sys.call = 1, summary.connection = 1, "substr<-" = 1, substr = 1, 
argv:     sub = 1, strtrim = 1, strtoi = 1, strsplit = 1, strptime = 1, 
argv:     stop = 1, stdout = 1, stdin = 1, stderr = 1, sprintf = 1, 
argv:     split = 1, sort = 1, sockSelect = 1, socketConnection = 1, 
argv:     sink.number = 1, sink = 1, shortRowNames = 1, setwd = 1, 
argv:     setTimeLimit = 1, setSessionTimeLimit = 1, setS4Object = 1, 
argv:     setNumMathThreads = 1, setMaxNumMathThreads = 1, setFileTime = 1, 
argv:     seterrmessage = 1, setEncoding = 1, set.seed = 1, serializeToConn = 1, 
argv:     serializeb = 1, serialize = 1, seek = 1, search = 1, scan = 1, 
argv:     saveToConn = 1, save.to.file = 1, save = 1, sample2 = 1, 
argv:     sample = 1, rwilcox = 1, rweibull = 1, runif = 1, rt = 1, 
argv:     rsignrank = 1, rpois = 1, rowSums = 1, rowsum_matrix = 1, 
argv:     rowsum_df = 1, rowMeans = 1, row = 1, rnorm = 1, RNGkind = 1, 
argv:     rnchisq = 1, rnbinom_mu = 1, rnbinom = 1, rlogis = 1, rlnorm = 1, 
argv:     rhyper = 1, rgeom = 1, rgamma = 1, rf = 1, rexp = 1, restart = 1, 
argv:     rep.int = 1, rep_len = 1, remove = 1, registerNamespace = 1, 
argv:     regexpr = 1, regexec = 1, reg.finalizer = 1, recordGraphics = 1, 
argv:     Recall = 1, readRenviron = 1, readLines = 1, readline = 1, 
argv:     readDCF = 1, readChar = 1, readBin = 1, rchisq = 1, rcauchy = 1, 
argv:     rbinom = 1, rbind = 1, rbeta = 1, rawToChar = 1, rawToBits = 1, 
argv:     rawShift = 1, rawConnectionValue = 1, rawConnection = 1, 
argv:     rapply = 1, rank = 1, radixsort = 1, R.home = 1, qwilcox = 1, 
argv:     qweibull = 1, qunif = 1, quit = 1, qtukey = 1, qt = 1, qsort = 1, 
argv:     qsignrank = 1, qr_qy_real = 1, qr_qy_cmpl = 1, qr_coef_real = 1, 
argv:     qr_coef_cmplx = 1, qpois = 1, qnt = 1, qnorm = 1, qnf = 1, 
argv:     qnchisq = 1, qnbinom_mu = 1, qnbinom = 1, qnbeta = 1, qlogis = 1, 
argv:     qlnorm = 1, qhyper = 1, qgeom = 1, qgamma = 1, qf = 1, qexp = 1, 
argv:     qchisq = 1, qcauchy = 1, qbinom = 1, qbeta = 1, pwilcox = 1, 
argv:     pweibull = 1, putconst = 1, pushBackLength = 1, pushBack = 1, 
argv:     punif = 1, ptukey = 1, pt = 1, psort = 1, psignrank = 1, 
argv:     psigamma = 1, prmatrix = 1, printDeferredWarnings = 1, print.function = 1, 
argv:     print.default = 1, pretty = 1, ppois = 1, POSIXlt2Date = 1, 
argv:     polyroot = 1, pnt = 1, pnorm = 1, pnf = 1, pnchisq = 1, pnbinom_mu = 1, 
argv:     pnbinom = 1, pnbeta = 1, pmin = 1, pmax = 1, pmatch = 1, 
argv:     plogis = 1, plnorm = 1, pipe = 1, phyper = 1, pgeom = 1, 
argv:     pgamma = 1, pf = 1, pexp = 1, pchisq = 1, pcauchy = 1, pbinom = 1, 
argv:     pbeta = 1, path.expand = 1, paste0 = 1, paste = 1, parse = 1, 
argv:     parent.frame = 1, "parent.env<-" = 1, parent.env = 1, packBits = 1, 
argv:     order = 1, options = 1, open = 1, normalizePath = 1, ngettext = 1, 
argv:     NextMethod = 1, new.env = 1, nchar = 1, mkUnbound = 1, mkCode = 1, 
argv:     mget = 1, merge = 1, memory.profile = 1, memDecompress = 1, 
argv:     memCompress = 1, mem.limits = 1, mean = 1, max.col = 1, matrix = 1, 
argv:     match.call = 1, match = 1, mapply = 1, makeLazy = 1, makeActiveBinding = 1, 
argv:     make.unique = 1, make.names = 1, machine = 1, ls = 1, lockEnvironment = 1, 
argv:     lockBinding = 1, loadFromConn2 = 1, load.from.file = 1, load = 1, 
argv:     list2env = 1, list.files = 1, list.dirs = 1, lchoose = 1, 
argv:     lbeta = 1, lazyLoadDBinsertValue = 1, lazyLoadDBflush = 1, 
argv:     lapply = 1, La_ztrcon = 1, La_zgecon = 1, La_version = 1, 
argv:     La_svd_cmplx = 1, La_svd = 1, La_solve_cmplx = 1, La_solve = 1, 
argv:     La_rs_cmplx = 1, La_rs = 1, La_rg_cmplx = 1, La_rg = 1, La_qr_cmplx = 1, 
argv:     La_qr = 1, La_dtrcon = 1, La_dlange = 1, La_dgecon = 1, La_chol2inv = 1, 
argv:     La_chol = 1, l10n_info = 1, isSeekable = 1, isOpen = 1, isNamespaceEnv = 1, 
argv:     islistfactor = 1, isIncomplete = 1, isdebugged = 1, isatty = 1, 
argv:     is.vector = 1, is.unsorted = 1, is.loaded = 1, is.builtin.internal = 1, 
argv:     intToUtf8 = 1, intToBits = 1, interruptsSuspended = 1, inspect = 1, 
argv:     inherits = 1, importIntoEnv = 1, identical = 1, icuSetCollate = 1, 
argv:     icuGetCollate = 1, iconv = 1, gzfile = 1, gzcon = 1, gsub = 1, 
argv:     growconst = 1, grepRaw = 1, grepl = 1, grep = 1, gregexpr = 1, 
argv:     getwd = 1, getVarsFromFrame = 1, gettext = 1, getSymbolInfo = 1, 
argv:     getRegisteredRoutines = 1, getRegisteredNamespace = 1, getNamespaceRegistry = 1, 
argv:     getLoadedDLLs = 1, geterrmessage = 1, getconst = 1, getConnection = 1, 
argv:     getAllConnections = 1, get = 1, gctorture2 = 1, gctorture = 1, 
argv:     gcinfo = 1, gc = 1, formatC = 1, format.POSIXlt = 1, format.info = 1, 
argv:     format = 1, formals = 1, flush = 1, findInterval = 1, file.symlink = 1, 
argv:     file.show = 1, file.rename = 1, file.remove = 1, file.path = 1, 
argv:     file.link = 1, file.info = 1, file.exists = 1, file.create = 1, 
argv:     file.copy = 1, file.choose = 1, file.append = 1, file.access = 1, 
argv:     file = 1, fifo = 1, exists = 1, eval = 1, environmentName = 1, 
argv:     environmentIsLocked = 1, environment = 1, env2list = 1, env.profile = 1, 
argv:     Encoding = 1, encodeString = 1, enableJIT = 1, eapply = 1, 
argv:     dyn.unload = 1, dyn.load = 1, dwilcox = 1, dweibull = 1, 
argv:     duplicated = 1, dunif = 1, dump = 1, dtukey = 1, dt = 1, 
argv:     dsignrank = 1, drop = 1, dput = 1, dpois = 1, do.call = 1, 
argv:     dnt = 1, dnorm = 1, dnf = 1, dnchisq = 1, dnbinom_mu = 1, 
argv:     dnbinom = 1, dnbeta = 1, dlogis = 1, dlnorm = 1, disassemble = 1, 
argv:     dirname = 1, dir.create = 1, diag = 1, dhyper = 1, dgeom = 1, 
argv:     dgamma = 1, df = 1, dexp = 1, detach = 1, det_ge_real = 1, 
argv:     deparse = 1, delayedAssign = 1, debugonce = 1, debug = 1, 
argv:     dchisq = 1, dcauchy = 1, dbinom = 1, dbeta = 1, Date2POSIXlt = 1, 
argv:     date = 1, Cstack_info = 1, crossprod = 1, crc64 = 1, copyDFattr = 1, 
argv:     complex = 1, compilePKGS = 1, "comment<-" = 1, comment = 1, 
argv:     commandArgs = 1, colSums = 1, colMeans = 1, col = 1, close = 1, 
argv:     clearPushBack = 1, choose = 1, chartr = 1, charToRaw = 1, 
argv:     charmatch = 1, cbind = 1, cat = 1, capabilitiesX11 = 1, capabilities = 1, 
argv:     bzfile = 1, builtins = 1, browserText = 1, browserSetDebug = 1, 
argv:     browserCondition = 1, bodyCode = 1, body = 1, bitwiseXor = 1, 
argv:     bitwiseShiftR = 1, bitwiseShiftL = 1, bitwiseOr = 1, bitwiseNot = 1, 
argv:     bitwiseAnd = 1, bindtextdomain = 1, bindingIsLocked = 1, 
argv:     bindingIsActive = 1, bincode = 1, beta = 1, besselY = 1, 
argv:     besselK = 1, besselJ = 1, besselI = 1, bcVersion = 1, bcClose = 1, 
argv:     basename = 1, backsolve = 1, attach = 1, atan2 = 1, assign = 1, 
argv:     as.vector = 1, as.POSIXlt = 1, as.POSIXct = 1, as.function.default = 1, 
argv:     array = 1, args = 1, aregexec = 1, aperm = 1, anyDuplicated = 1, 
argv:     all.names = 1, agrepl = 1, agrep = 1, adist = 1, abbreviate = 1, 
argv:     .signalCondition = 1, .resetCondHands = 1, .invokeRestart = 1, 
argv:     .getRestart = 1, .dfltWarn = 1, .dfltStop = 1, .addTryHandlers = 1, 
argv:     .addRestart = 1, .addCondHands = 1), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(xzfile = TRUE, writeLines = TRUE, 
argv:     writeChar = TRUE, writeBin = TRUE, withVisible = TRUE, which.min = TRUE, 
argv:     which.max = TRUE, which = TRUE, warning = TRUE, Version = TRUE, 
argv:     vector = TRUE, vapply = TRUE, utf8ToInt = TRUE, url = TRUE, 
argv:     unz = TRUE, unserializeFromConn = TRUE, unserialize = TRUE, 
argv:     unregisterNamespace = TRUE, unlockBinding = TRUE, unlist = TRUE, 
argv:     unlink = TRUE, unique = TRUE, undebug = TRUE, typeof = TRUE, 
argv:     truncate = TRUE, traceOnOff = TRUE, traceback = TRUE, toupper = TRUE, 
argv:     tolower = TRUE, textConnectionValue = TRUE, textConnection = TRUE, 
argv:     tempfile = TRUE, tempdir = TRUE, tcrossprod = TRUE, tabulate = TRUE, 
argv:     t.default = TRUE, system = TRUE, Sys.unsetenv = TRUE, Sys.umask = TRUE, 
argv:     Sys.time = TRUE, Sys.sleep = TRUE, Sys.setlocale = TRUE, 
argv:     Sys.setenv = TRUE, Sys.readlink = TRUE, sys.parents = TRUE, 
argv:     sys.parent = TRUE, sys.on.exit = TRUE, sys.nframe = TRUE, 
argv:     Sys.localeconv = TRUE, Sys.info = TRUE, Sys.glob = TRUE, 
argv:     Sys.getpid = TRUE, Sys.getlocale = TRUE, Sys.getenv = TRUE, 
argv:     sys.function = TRUE, sys.frames = TRUE, sys.frame = TRUE, 
argv:     Sys.chmod = TRUE, sys.calls = TRUE, sys.call = TRUE, summary.connection = TRUE, 
argv:     "substr<-" = TRUE, substr = TRUE, sub = TRUE, strtrim = TRUE, 
argv:     strtoi = TRUE, strsplit = TRUE, strptime = TRUE, stop = TRUE, 
argv:     stdout = TRUE, stdin = TRUE, stderr = TRUE, sprintf = TRUE, 
argv:     split = TRUE, sort = TRUE, sockSelect = TRUE, socketConnection = TRUE, 
argv:     sink.number = TRUE, sink = TRUE, shortRowNames = TRUE, setwd = TRUE, 
argv:     setTimeLimit = TRUE, setSessionTimeLimit = TRUE, setS4Object = TRUE, 
argv:     setNumMathThreads = TRUE, setMaxNumMathThreads = TRUE, setFileTime = TRUE, 
argv:     seterrmessage = TRUE, setEncoding = TRUE, set.seed = TRUE, 
argv:     serializeToConn = TRUE, serializeb = TRUE, serialize = TRUE, 
argv:     seek = TRUE, search = TRUE, scan = TRUE, saveToConn = TRUE, 
argv:     save.to.file = TRUE, save = TRUE, sample2 = TRUE, sample = TRUE, 
argv:     rwilcox = TRUE, rweibull = TRUE, runif = TRUE, rt = TRUE, 
argv:     rsignrank = TRUE, rpois = TRUE, rowSums = TRUE, rowsum_matrix = TRUE, 
argv:     rowsum_df = TRUE, rowMeans = TRUE, row = TRUE, rnorm = TRUE, 
argv:     RNGkind = TRUE, rnchisq = TRUE, rnbinom_mu = TRUE, rnbinom = TRUE, 
argv:     rlogis = TRUE, rlnorm = TRUE, rhyper = TRUE, rgeom = TRUE, 
argv:     rgamma = TRUE, rf = TRUE, rexp = TRUE, restart = TRUE, rep.int = TRUE, 
argv:     rep_len = TRUE, remove = TRUE, registerNamespace = TRUE, 
argv:     regexpr = TRUE, regexec = TRUE, reg.finalizer = TRUE, recordGraphics = TRUE, 
argv:     Recall = TRUE, readRenviron = TRUE, readLines = TRUE, readline = TRUE, 
argv:     readDCF = TRUE, readChar = TRUE, readBin = TRUE, rchisq = TRUE, 
argv:     rcauchy = TRUE, rbinom = TRUE, rbind = TRUE, rbeta = TRUE, 
argv:     rawToChar = TRUE, rawToBits = TRUE, rawShift = TRUE, rawConnectionValue = TRUE, 
argv:     rawConnection = TRUE, rapply = TRUE, rank = TRUE, radixsort = TRUE, 
argv:     R.home = TRUE, qwilcox = TRUE, qweibull = TRUE, qunif = TRUE, 
argv:     quit = TRUE, qtukey = TRUE, qt = TRUE, qsort = TRUE, qsignrank = TRUE, 
argv:     qr_qy_real = TRUE, qr_qy_cmpl = TRUE, qr_coef_real = TRUE, 
argv:     qr_coef_cmplx = TRUE, qpois = TRUE, qnt = TRUE, qnorm = TRUE, 
argv:     qnf = TRUE, qnchisq = TRUE, qnbinom_mu = TRUE, qnbinom = TRUE, 
argv:     qnbeta = TRUE, qlogis = TRUE, qlnorm = TRUE, qhyper = TRUE, 
argv:     qgeom = TRUE, qgamma = TRUE, qf = TRUE, qexp = TRUE, qchisq = TRUE, 
argv:     qcauchy = TRUE, qbinom = TRUE, qbeta = TRUE, pwilcox = TRUE, 
argv:     pweibull = TRUE, putconst = TRUE, pushBackLength = TRUE, 
argv:     pushBack = TRUE, punif = TRUE, ptukey = TRUE, pt = TRUE, 
argv:     psort = TRUE, psignrank = TRUE, psigamma = TRUE, prmatrix = TRUE, 
argv:     printDeferredWarnings = TRUE, print.function = TRUE, print.default = TRUE, 
argv:     pretty = TRUE, ppois = TRUE, POSIXlt2Date = TRUE, polyroot = TRUE, 
argv:     pnt = TRUE, pnorm = TRUE, pnf = TRUE, pnchisq = TRUE, pnbinom_mu = TRUE, 
argv:     pnbinom = TRUE, pnbeta = TRUE, pmin = TRUE, pmax = TRUE, 
argv:     pmatch = TRUE, plogis = TRUE, plnorm = TRUE, pipe = TRUE, 
argv:     phyper = TRUE, pgeom = TRUE, pgamma = TRUE, pf = TRUE, pexp = TRUE, 
argv:     pchisq = TRUE, pcauchy = TRUE, pbinom = TRUE, pbeta = TRUE, 
argv:     path.expand = TRUE, paste0 = TRUE, paste = TRUE, parse = TRUE, 
argv:     parent.frame = TRUE, "parent.env<-" = TRUE, parent.env = TRUE, 
argv:     packBits = TRUE, order = TRUE, options = TRUE, open = TRUE, 
argv:     normalizePath = TRUE, ngettext = TRUE, NextMethod = TRUE, 
argv:     new.env = TRUE, nchar = TRUE, mkUnbound = TRUE, mkCode = TRUE, 
argv:     mget = TRUE, merge = TRUE, memory.profile = TRUE, memDecompress = TRUE, 
argv:     memCompress = TRUE, mem.limits = TRUE, mean = TRUE, max.col = TRUE, 
argv:     matrix = TRUE, match.call = TRUE, match = TRUE, mapply = TRUE, 
argv:     makeLazy = TRUE, makeActiveBinding = TRUE, make.unique = TRUE, 
argv:     make.names = TRUE, machine = TRUE, ls = TRUE, lockEnvironment = TRUE, 
argv:     lockBinding = TRUE, loadFromConn2 = TRUE, load.from.file = TRUE, 
argv:     load = TRUE, list2env = TRUE, list.files = TRUE, list.dirs = TRUE, 
argv:     lchoose = TRUE, lbeta = TRUE, lazyLoadDBinsertValue = TRUE, 
argv:     lazyLoadDBflush = TRUE, lapply = TRUE, La_ztrcon = TRUE, 
argv:     La_zgecon = TRUE, La_version = TRUE, La_svd_cmplx = TRUE, 
argv:     La_svd = TRUE, La_solve_cmplx = TRUE, La_solve = TRUE, La_rs_cmplx = TRUE, 
argv:     La_rs = TRUE, La_rg_cmplx = TRUE, La_rg = TRUE, La_qr_cmplx = TRUE, 
argv:     La_qr = TRUE, La_dtrcon = TRUE, La_dlange = TRUE, La_dgecon = TRUE, 
argv:     La_chol2inv = TRUE, La_chol = TRUE, l10n_info = TRUE, isSeekable = TRUE, 
argv:     isOpen = TRUE, isNamespaceEnv = TRUE, islistfactor = TRUE, 
argv:     isIncomplete = TRUE, isdebugged = TRUE, isatty = TRUE, is.vector = TRUE, 
argv:     is.unsorted = TRUE, is.loaded = TRUE, is.builtin.internal = TRUE, 
argv:     intToUtf8 = TRUE, intToBits = TRUE, interruptsSuspended = TRUE, 
argv:     inspect = TRUE, inherits = TRUE, importIntoEnv = TRUE, identical = TRUE, 
argv:     icuSetCollate = TRUE, icuGetCollate = TRUE, iconv = TRUE, 
argv:     gzfile = TRUE, gzcon = TRUE, gsub = TRUE, growconst = TRUE, 
argv:     grepRaw = TRUE, grepl = TRUE, grep = TRUE, gregexpr = TRUE, 
argv:     getwd = TRUE, getVarsFromFrame = TRUE, gettext = TRUE, getSymbolInfo = TRUE, 
argv:     getRegisteredRoutines = TRUE, getRegisteredNamespace = TRUE, 
argv:     getNamespaceRegistry = TRUE, getLoadedDLLs = TRUE, geterrmessage = TRUE, 
argv:     getconst = TRUE, getConnection = TRUE, getAllConnections = TRUE, 
argv:     get = TRUE, gctorture2 = TRUE, gctorture = TRUE, gcinfo = TRUE, 
argv:     gc = TRUE, formatC = TRUE, format.POSIXlt = TRUE, format.info = TRUE, 
argv:     format = TRUE, formals = TRUE, flush = TRUE, findInterval = TRUE, 
argv:     file.symlink = TRUE, file.show = TRUE, file.rename = TRUE, 
argv:     file.remove = TRUE, file.path = TRUE, file.link = TRUE, file.info = TRUE, 
argv:     file.exists = TRUE, file.create = TRUE, file.copy = TRUE, 
argv:     file.choose = TRUE, file.append = TRUE, file.access = TRUE, 
argv:     file = TRUE, fifo = TRUE, exists = TRUE, eval = TRUE, environmentName = TRUE, 
argv:     environmentIsLocked = TRUE, environment = TRUE, env2list = TRUE, 
argv:     env.profile = TRUE, Encoding = TRUE, encodeString = TRUE, 
argv:     enableJIT = TRUE, eapply = TRUE, dyn.unload = TRUE, dyn.load = TRUE, 
argv:     dwilcox = TRUE, dweibull = TRUE, duplicated = TRUE, dunif = TRUE, 
argv:     dump = TRUE, dtukey = TRUE, dt = TRUE, dsignrank = TRUE, 
argv:     drop = TRUE, dput = TRUE, dpois = TRUE, do.call = TRUE, dnt = TRUE, 
argv:     dnorm = TRUE, dnf = TRUE, dnchisq = TRUE, dnbinom_mu = TRUE, 
argv:     dnbinom = TRUE, dnbeta = TRUE, dlogis = TRUE, dlnorm = TRUE, 
argv:     disassemble = TRUE, dirname = TRUE, dir.create = TRUE, diag = TRUE, 
argv:     dhyper = TRUE, dgeom = TRUE, dgamma = TRUE, df = TRUE, dexp = TRUE, 
argv:     detach = TRUE, det_ge_real = TRUE, deparse = TRUE, delayedAssign = TRUE, 
argv:     debugonce = TRUE, debug = TRUE, dchisq = TRUE, dcauchy = TRUE, 
argv:     dbinom = TRUE, dbeta = TRUE, Date2POSIXlt = TRUE, date = TRUE, 
argv:     Cstack_info = TRUE, crossprod = TRUE, crc64 = TRUE, copyDFattr = TRUE, 
argv:     complex = TRUE, compilePKGS = TRUE, "comment<-" = TRUE, comment = TRUE, 
argv:     commandArgs = TRUE, colSums = TRUE, colMeans = TRUE, col = TRUE, 
argv:     close = TRUE, clearPushBack = TRUE, choose = TRUE, chartr = TRUE, 
argv:     charToRaw = TRUE, charmatch = TRUE, cbind = TRUE, cat = TRUE, 
argv:     capabilitiesX11 = TRUE, capabilities = TRUE, bzfile = TRUE, 
argv:     builtins = TRUE, browserText = TRUE, browserSetDebug = TRUE, 
argv:     browserCondition = TRUE, bodyCode = TRUE, body = TRUE, bitwiseXor = TRUE, 
argv:     bitwiseShiftR = TRUE, bitwiseShiftL = TRUE, bitwiseOr = TRUE, 
argv:     bitwiseNot = TRUE, bitwiseAnd = TRUE, bindtextdomain = TRUE, 
argv:     bindingIsLocked = TRUE, bindingIsActive = TRUE, bincode = TRUE, 
argv:     beta = TRUE, besselY = TRUE, besselK = TRUE, besselJ = TRUE, 
argv:     besselI = TRUE, bcVersion = TRUE, bcClose = TRUE, basename = TRUE, 
argv:     backsolve = TRUE, attach = TRUE, atan2 = TRUE, assign = TRUE, 
argv:     as.vector = TRUE, as.POSIXlt = TRUE, as.POSIXct = TRUE, as.function.default = TRUE, 
argv:     array = TRUE, args = TRUE, aregexec = TRUE, aperm = TRUE, 
argv:     anyDuplicated = TRUE, all.names = TRUE, agrepl = TRUE, agrep = TRUE, 
argv:     adist = TRUE, abbreviate = TRUE, .signalCondition = TRUE, 
argv:     .resetCondHands = TRUE, .invokeRestart = TRUE, .getRestart = TRUE, 
argv:     .dfltWarn = TRUE, .dfltStop = TRUE, .addTryHandlers = TRUE, 
argv:     .addRestart = TRUE, .addCondHands = TRUE), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(length(testr:::cache$decorated) > 
argv:     0)), .Names = c("pattern", "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpaATgAX"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(all(check.dec))), .Names = c("pattern", 
argv: "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpaATgAX"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: qr.X
argv: structure(list(qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = "qr")

func: qr.X
argv: structure(list(complete = TRUE, qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = c("complete", 
argv: "qr"))

func: svd
argv: structure(list(x = structure(c(1, 0.5, 0.333333333333333, 0.25, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.5, 0.333333333333333, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.333333333333333, 0.25, 0.2, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.0909090909090909, 0.0833333333333333, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.0714285714285714), .Dim = c(9, 6))), .Names = "x")

func: is.vector
argv: structure(list(x = c("xzfile", "writeLines", "writeChar", "writeBin", 
argv: "withVisible", "which.min", "which.max", "which", "warning", 
argv: "Version", "vector", "vapply", "utf8ToInt", "url", "unz", "unserializeFromConn", 
argv: "unserialize", "unregisterNamespace", "unlockBinding", "unlist", 
argv: "unlink", "unique", "undebug", "typeof", "truncate", "traceOnOff", 
argv: "traceback", "toupper", "tolower", "textConnectionValue", "textConnection", 
argv: "tempfile", "tempdir", "tcrossprod", "tabulate", "t.default", 
argv: "system", "Sys.unsetenv", "Sys.umask", "Sys.time", "Sys.sleep", 
argv: "Sys.setlocale", "Sys.setenv", "Sys.readlink", "sys.parents", 
argv: "sys.parent", "sys.on.exit", "sys.nframe", "Sys.localeconv", 
argv: "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", "Sys.getenv", 
argv: "sys.function", "sys.frames", "sys.frame", "Sys.chmod", "sys.calls", 
argv: "sys.call", "summary.connection", "substr<-", "substr", "sub", 
argv: "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: )), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("unique")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("truncate")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, f, drop = FALSE, ...) 
argv: UseMethod("split")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, decreasing = FALSE, ...) 
argv: {
argv:     if (!is.logical(decreasing) || length(decreasing) != 1) 
argv:         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
argv:     UseMethod("sort")
argv: }), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "||"), .Names = "x")

func: grep
argv: structure(list(x = "!"), .Names = "x")

func: grep
argv: structure(list(x = "is.logical"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "!="), .Names = "x")

func: grep
argv: structure(list(x = "length"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("seek")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("pretty")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("open")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, y, ...) 
argv: UseMethod("merge")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("mean")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("format")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con) 
argv: UseMethod("flush")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("duplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("close")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXlt")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXct")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (a, perm, ...) 
argv: UseMethod("aperm")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("anyDuplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: lapply
argv: structure(c(FALSE, FALSE, FALSE, FALSE), .Names = c("Quote", 
argv: "expression", "quote", "local"))

func: unlist
argv: structure(list(x = structure(list(xzfile = 1, writeLines = 1, 
argv:     writeChar = 1, writeBin = 1, withVisible = 1, which.min = 1, 
argv:     which.max = 1, which = 1, warning = 1, Version = 1, vector = 1, 
argv:     vapply = 1, utf8ToInt = 1, url = 1, unz = 1, unserializeFromConn = 1, 
argv:     unserialize = 1, unregisterNamespace = 1, unlockBinding = 1, 
argv:     unlist = 1, unlink = 1, unique = 1, undebug = 1, typeof = 1, 
argv:     truncate = 1, traceOnOff = 1, traceback = 1, toupper = 1, 
argv:     tolower = 1, textConnectionValue = 1, textConnection = 1, 
argv:     tempfile = 1, tempdir = 1, tcrossprod = 1, tabulate = 1, 
argv:     t.default = 1, system = 1, Sys.unsetenv = 1, Sys.umask = 1, 
argv:     Sys.time = 1, Sys.sleep = 1, Sys.setlocale = 1, Sys.setenv = 1, 
argv:     Sys.readlink = 1, sys.parents = 1, sys.parent = 1, sys.on.exit = 1, 
argv:     sys.nframe = 1, Sys.localeconv = 1, Sys.info = 1, Sys.glob = 1, 
argv:     Sys.getpid = 1, Sys.getlocale = 1, Sys.getenv = 1, sys.function = 1, 
argv:     sys.frames = 1, sys.frame = 1, Sys.chmod = 1, sys.calls = 1, 
argv:     sys.call = 1, summary.connection = 1, "substr<-" = 1, substr = 1, 
argv:     sub = 1, strtrim = 1, strtoi = 1, strsplit = 1, strptime = 1, 
argv:     stop = 1, stdout = 1, stdin = 1, stderr = 1, sprintf = 1, 
argv:     split = 1, sort = 1, sockSelect = 1, socketConnection = 1, 
argv:     sink.number = 1, sink = 1, shortRowNames = 1, setwd = 1, 
argv:     setTimeLimit = 1, setSessionTimeLimit = 1, setS4Object = 1, 
argv:     setNumMathThreads = 1, setMaxNumMathThreads = 1, setFileTime = 1, 
argv:     seterrmessage = 1, setEncoding = 1, set.seed = 1, serializeToConn = 1, 
argv:     serializeb = 1, serialize = 1, seek = 1, search = 1, scan = 1, 
argv:     saveToConn = 1, save.to.file = 1, save = 1, sample2 = 1, 
argv:     sample = 1, rwilcox = 1, rweibull = 1, runif = 1, rt = 1, 
argv:     rsignrank = 1, rpois = 1, rowSums = 1, rowsum_matrix = 1, 
argv:     rowsum_df = 1, rowMeans = 1, row = 1, rnorm = 1, RNGkind = 1, 
argv:     rnchisq = 1, rnbinom_mu = 1, rnbinom = 1, rlogis = 1, rlnorm = 1, 
argv:     rhyper = 1, rgeom = 1, rgamma = 1, rf = 1, rexp = 1, restart = 1, 
argv:     rep.int = 1, rep_len = 1, remove = 1, registerNamespace = 1, 
argv:     regexpr = 1, regexec = 1, reg.finalizer = 1, recordGraphics = 1, 
argv:     Recall = 1, readRenviron = 1, readLines = 1, readline = 1, 
argv:     readDCF = 1, readChar = 1, readBin = 1, rchisq = 1, rcauchy = 1, 
argv:     rbinom = 1, rbind = 1, rbeta = 1, rawToChar = 1, rawToBits = 1, 
argv:     rawShift = 1, rawConnectionValue = 1, rawConnection = 1, 
argv:     rapply = 1, rank = 1, radixsort = 1, R.home = 1, qwilcox = 1, 
argv:     qweibull = 1, qunif = 1, quit = 1, qtukey = 1, qt = 1, qsort = 1, 
argv:     qsignrank = 1, qr_qy_real = 1, qr_qy_cmpl = 1, qr_coef_real = 1, 
argv:     qr_coef_cmplx = 1, qpois = 1, qnt = 1, qnorm = 1, qnf = 1, 
argv:     qnchisq = 1, qnbinom_mu = 1, qnbinom = 1, qnbeta = 1, qlogis = 1, 
argv:     qlnorm = 1, qhyper = 1, qgeom = 1, qgamma = 1, qf = 1, qexp = 1, 
argv:     qchisq = 1, qcauchy = 1, qbinom = 1, qbeta = 1, pwilcox = 1, 
argv:     pweibull = 1, putconst = 1, pushBackLength = 1, pushBack = 1, 
argv:     punif = 1, ptukey = 1, pt = 1, psort = 1, psignrank = 1, 
argv:     psigamma = 1, prmatrix = 1, printDeferredWarnings = 1, print.function = 1, 
argv:     print.default = 1, pretty = 1, ppois = 1, POSIXlt2Date = 1, 
argv:     polyroot = 1, pnt = 1, pnorm = 1, pnf = 1, pnchisq = 1, pnbinom_mu = 1, 
argv:     pnbinom = 1, pnbeta = 1, pmin = 1, pmax = 1, pmatch = 1, 
argv:     plogis = 1, plnorm = 1, pipe = 1, phyper = 1, pgeom = 1, 
argv:     pgamma = 1, pf = 1, pexp = 1, pchisq = 1, pcauchy = 1, pbinom = 1, 
argv:     pbeta = 1, path.expand = 1, paste0 = 1, paste = 1, parse = 1, 
argv:     parent.frame = 1, "parent.env<-" = 1, parent.env = 1, packBits = 1, 
argv:     order = 1, options = 1, open = 1, normalizePath = 1, ngettext = 1, 
argv:     NextMethod = 1, new.env = 1, nchar = 1, mkUnbound = 1, mkCode = 1, 
argv:     mget = 1, merge = 1, memory.profile = 1, memDecompress = 1, 
argv:     memCompress = 1, mem.limits = 1, mean = 1, max.col = 1, matrix = 1, 
argv:     match.call = 1, match = 1, mapply = 1, makeLazy = 1, makeActiveBinding = 1, 
argv:     make.unique = 1, make.names = 1, machine = 1, ls = 1, lockEnvironment = 1, 
argv:     lockBinding = 1, loadFromConn2 = 1, load.from.file = 1, load = 1, 
argv:     list2env = 1, list.files = 1, list.dirs = 1, lchoose = 1, 
argv:     lbeta = 1, lazyLoadDBinsertValue = 1, lazyLoadDBflush = 1, 
argv:     lapply = 1, La_ztrcon = 1, La_zgecon = 1, La_version = 1, 
argv:     La_svd_cmplx = 1, La_svd = 1, La_solve_cmplx = 1, La_solve = 1, 
argv:     La_rs_cmplx = 1, La_rs = 1, La_rg_cmplx = 1, La_rg = 1, La_qr_cmplx = 1, 
argv:     La_qr = 1, La_dtrcon = 1, La_dlange = 1, La_dgecon = 1, La_chol2inv = 1, 
argv:     La_chol = 1, l10n_info = 1, isSeekable = 1, isOpen = 1, isNamespaceEnv = 1, 
argv:     islistfactor = 1, isIncomplete = 1, isdebugged = 1, isatty = 1, 
argv:     is.vector = 1, is.unsorted = 1, is.loaded = 1, is.builtin.internal = 1, 
argv:     intToUtf8 = 1, intToBits = 1, interruptsSuspended = 1, inspect = 1, 
argv:     inherits = 1, importIntoEnv = 1, identical = 1, icuSetCollate = 1, 
argv:     icuGetCollate = 1, iconv = 1, gzfile = 1, gzcon = 1, gsub = 1, 
argv:     growconst = 1, grepRaw = 1, grepl = 1, grep = 1, gregexpr = 1, 
argv:     getwd = 1, getVarsFromFrame = 1, gettext = 1, getSymbolInfo = 1, 
argv:     getRegisteredRoutines = 1, getRegisteredNamespace = 1, getNamespaceRegistry = 1, 
argv:     getLoadedDLLs = 1, geterrmessage = 1, getconst = 1, getConnection = 1, 
argv:     getAllConnections = 1, get = 1, gctorture2 = 1, gctorture = 1, 
argv:     gcinfo = 1, gc = 1, formatC = 1, format.POSIXlt = 1, format.info = 1, 
argv:     format = 1, formals = 1, flush = 1, findInterval = 1, file.symlink = 1, 
argv:     file.show = 1, file.rename = 1, file.remove = 1, file.path = 1, 
argv:     file.link = 1, file.info = 1, file.exists = 1, file.create = 1, 
argv:     file.copy = 1, file.choose = 1, file.append = 1, file.access = 1, 
argv:     file = 1, fifo = 1, exists = 1, eval = 1, environmentName = 1, 
argv:     environmentIsLocked = 1, environment = 1, env2list = 1, env.profile = 1, 
argv:     Encoding = 1, encodeString = 1, enableJIT = 1, eapply = 1, 
argv:     dyn.unload = 1, dyn.load = 1, dwilcox = 1, dweibull = 1, 
argv:     duplicated = 1, dunif = 1, dump = 1, dtukey = 1, dt = 1, 
argv:     dsignrank = 1, drop = 1, dput = 1, dpois = 1, do.call = 1, 
argv:     dnt = 1, dnorm = 1, dnf = 1, dnchisq = 1, dnbinom_mu = 1, 
argv:     dnbinom = 1, dnbeta = 1, dlogis = 1, dlnorm = 1, disassemble = 1, 
argv:     dirname = 1, dir.create = 1, diag = 1, dhyper = 1, dgeom = 1, 
argv:     dgamma = 1, df = 1, dexp = 1, detach = 1, det_ge_real = 1, 
argv:     deparse = 1, delayedAssign = 1, debugonce = 1, debug = 1, 
argv:     dchisq = 1, dcauchy = 1, dbinom = 1, dbeta = 1, Date2POSIXlt = 1, 
argv:     date = 1, Cstack_info = 1, crossprod = 1, crc64 = 1, copyDFattr = 1, 
argv:     complex = 1, compilePKGS = 1, "comment<-" = 1, comment = 1, 
argv:     commandArgs = 1, colSums = 1, colMeans = 1, col = 1, close = 1, 
argv:     clearPushBack = 1, choose = 1, chartr = 1, charToRaw = 1, 
argv:     charmatch = 1, cbind = 1, cat = 1, capabilitiesX11 = 1, capabilities = 1, 
argv:     bzfile = 1, builtins = 1, browserText = 1, browserSetDebug = 1, 
argv:     browserCondition = 1, bodyCode = 1, body = 1, bitwiseXor = 1, 
argv:     bitwiseShiftR = 1, bitwiseShiftL = 1, bitwiseOr = 1, bitwiseNot = 1, 
argv:     bitwiseAnd = 1, bindtextdomain = 1, bindingIsLocked = 1, 
argv:     bindingIsActive = 1, bincode = 1, beta = 1, besselY = 1, 
argv:     besselK = 1, besselJ = 1, besselI = 1, bcVersion = 1, bcClose = 1, 
argv:     basename = 1, backsolve = 1, attach = 1, atan2 = 1, assign = 1, 
argv:     as.vector = 1, as.POSIXlt = 1, as.POSIXct = 1, as.function.default = 1, 
argv:     array = 1, args = 1, aregexec = 1, aperm = 1, anyDuplicated = 1, 
argv:     all.names = 1, agrepl = 1, agrep = 1, adist = 1, abbreviate = 1, 
argv:     .signalCondition = 1, .resetCondHands = 1, .invokeRestart = 1, 
argv:     .getRestart = 1, .dfltWarn = 1, .dfltStop = 1, .addTryHandlers = 1, 
argv:     .addRestart = 1, .addCondHands = 1), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(xzfile = TRUE, writeLines = TRUE, 
argv:     writeChar = TRUE, writeBin = TRUE, withVisible = TRUE, which.min = TRUE, 
argv:     which.max = TRUE, which = TRUE, warning = TRUE, Version = TRUE, 
argv:     vector = TRUE, vapply = TRUE, utf8ToInt = TRUE, url = TRUE, 
argv:     unz = TRUE, unserializeFromConn = TRUE, unserialize = TRUE, 
argv:     unregisterNamespace = TRUE, unlockBinding = TRUE, unlist = TRUE, 
argv:     unlink = TRUE, unique = TRUE, undebug = TRUE, typeof = TRUE, 
argv:     truncate = TRUE, traceOnOff = TRUE, traceback = TRUE, toupper = TRUE, 
argv:     tolower = TRUE, textConnectionValue = TRUE, textConnection = TRUE, 
argv:     tempfile = TRUE, tempdir = TRUE, tcrossprod = TRUE, tabulate = TRUE, 
argv:     t.default = TRUE, system = TRUE, Sys.unsetenv = TRUE, Sys.umask = TRUE, 
argv:     Sys.time = TRUE, Sys.sleep = TRUE, Sys.setlocale = TRUE, 
argv:     Sys.setenv = TRUE, Sys.readlink = TRUE, sys.parents = TRUE, 
argv:     sys.parent = TRUE, sys.on.exit = TRUE, sys.nframe = TRUE, 
argv:     Sys.localeconv = TRUE, Sys.info = TRUE, Sys.glob = TRUE, 
argv:     Sys.getpid = TRUE, Sys.getlocale = TRUE, Sys.getenv = TRUE, 
argv:     sys.function = TRUE, sys.frames = TRUE, sys.frame = TRUE, 
argv:     Sys.chmod = TRUE, sys.calls = TRUE, sys.call = TRUE, summary.connection = TRUE, 
argv:     "substr<-" = TRUE, substr = TRUE, sub = TRUE, strtrim = TRUE, 
argv:     strtoi = TRUE, strsplit = TRUE, strptime = TRUE, stop = TRUE, 
argv:     stdout = TRUE, stdin = TRUE, stderr = TRUE, sprintf = TRUE, 
argv:     split = TRUE, sort = TRUE, sockSelect = TRUE, socketConnection = TRUE, 
argv:     sink.number = TRUE, sink = TRUE, shortRowNames = TRUE, setwd = TRUE, 
argv:     setTimeLimit = TRUE, setSessionTimeLimit = TRUE, setS4Object = TRUE, 
argv:     setNumMathThreads = TRUE, setMaxNumMathThreads = TRUE, setFileTime = TRUE, 
argv:     seterrmessage = TRUE, setEncoding = TRUE, set.seed = TRUE, 
argv:     serializeToConn = TRUE, serializeb = TRUE, serialize = TRUE, 
argv:     seek = TRUE, search = TRUE, scan = TRUE, saveToConn = TRUE, 
argv:     save.to.file = TRUE, save = TRUE, sample2 = TRUE, sample = TRUE, 
argv:     rwilcox = TRUE, rweibull = TRUE, runif = TRUE, rt = TRUE, 
argv:     rsignrank = TRUE, rpois = TRUE, rowSums = TRUE, rowsum_matrix = TRUE, 
argv:     rowsum_df = TRUE, rowMeans = TRUE, row = TRUE, rnorm = TRUE, 
argv:     RNGkind = TRUE, rnchisq = TRUE, rnbinom_mu = TRUE, rnbinom = TRUE, 
argv:     rlogis = TRUE, rlnorm = TRUE, rhyper = TRUE, rgeom = TRUE, 
argv:     rgamma = TRUE, rf = TRUE, rexp = TRUE, restart = TRUE, rep.int = TRUE, 
argv:     rep_len = TRUE, remove = TRUE, registerNamespace = TRUE, 
argv:     regexpr = TRUE, regexec = TRUE, reg.finalizer = TRUE, recordGraphics = TRUE, 
argv:     Recall = TRUE, readRenviron = TRUE, readLines = TRUE, readline = TRUE, 
argv:     readDCF = TRUE, readChar = TRUE, readBin = TRUE, rchisq = TRUE, 
argv:     rcauchy = TRUE, rbinom = TRUE, rbind = TRUE, rbeta = TRUE, 
argv:     rawToChar = TRUE, rawToBits = TRUE, rawShift = TRUE, rawConnectionValue = TRUE, 
argv:     rawConnection = TRUE, rapply = TRUE, rank = TRUE, radixsort = TRUE, 
argv:     R.home = TRUE, qwilcox = TRUE, qweibull = TRUE, qunif = TRUE, 
argv:     quit = TRUE, qtukey = TRUE, qt = TRUE, qsort = TRUE, qsignrank = TRUE, 
argv:     qr_qy_real = TRUE, qr_qy_cmpl = TRUE, qr_coef_real = TRUE, 
argv:     qr_coef_cmplx = TRUE, qpois = TRUE, qnt = TRUE, qnorm = TRUE, 
argv:     qnf = TRUE, qnchisq = TRUE, qnbinom_mu = TRUE, qnbinom = TRUE, 
argv:     qnbeta = TRUE, qlogis = TRUE, qlnorm = TRUE, qhyper = TRUE, 
argv:     qgeom = TRUE, qgamma = TRUE, qf = TRUE, qexp = TRUE, qchisq = TRUE, 
argv:     qcauchy = TRUE, qbinom = TRUE, qbeta = TRUE, pwilcox = TRUE, 
argv:     pweibull = TRUE, putconst = TRUE, pushBackLength = TRUE, 
argv:     pushBack = TRUE, punif = TRUE, ptukey = TRUE, pt = TRUE, 
argv:     psort = TRUE, psignrank = TRUE, psigamma = TRUE, prmatrix = TRUE, 
argv:     printDeferredWarnings = TRUE, print.function = TRUE, print.default = TRUE, 
argv:     pretty = TRUE, ppois = TRUE, POSIXlt2Date = TRUE, polyroot = TRUE, 
argv:     pnt = TRUE, pnorm = TRUE, pnf = TRUE, pnchisq = TRUE, pnbinom_mu = TRUE, 
argv:     pnbinom = TRUE, pnbeta = TRUE, pmin = TRUE, pmax = TRUE, 
argv:     pmatch = TRUE, plogis = TRUE, plnorm = TRUE, pipe = TRUE, 
argv:     phyper = TRUE, pgeom = TRUE, pgamma = TRUE, pf = TRUE, pexp = TRUE, 
argv:     pchisq = TRUE, pcauchy = TRUE, pbinom = TRUE, pbeta = TRUE, 
argv:     path.expand = TRUE, paste0 = TRUE, paste = TRUE, parse = TRUE, 
argv:     parent.frame = TRUE, "parent.env<-" = TRUE, parent.env = TRUE, 
argv:     packBits = TRUE, order = TRUE, options = TRUE, open = TRUE, 
argv:     normalizePath = TRUE, ngettext = TRUE, NextMethod = TRUE, 
argv:     new.env = TRUE, nchar = TRUE, mkUnbound = TRUE, mkCode = TRUE, 
argv:     mget = TRUE, merge = TRUE, memory.profile = TRUE, memDecompress = TRUE, 
argv:     memCompress = TRUE, mem.limits = TRUE, mean = TRUE, max.col = TRUE, 
argv:     matrix = TRUE, match.call = TRUE, match = TRUE, mapply = TRUE, 
argv:     makeLazy = TRUE, makeActiveBinding = TRUE, make.unique = TRUE, 
argv:     make.names = TRUE, machine = TRUE, ls = TRUE, lockEnvironment = TRUE, 
argv:     lockBinding = TRUE, loadFromConn2 = TRUE, load.from.file = TRUE, 
argv:     load = TRUE, list2env = TRUE, list.files = TRUE, list.dirs = TRUE, 
argv:     lchoose = TRUE, lbeta = TRUE, lazyLoadDBinsertValue = TRUE, 
argv:     lazyLoadDBflush = TRUE, lapply = TRUE, La_ztrcon = TRUE, 
argv:     La_zgecon = TRUE, La_version = TRUE, La_svd_cmplx = TRUE, 
argv:     La_svd = TRUE, La_solve_cmplx = TRUE, La_solve = TRUE, La_rs_cmplx = TRUE, 
argv:     La_rs = TRUE, La_rg_cmplx = TRUE, La_rg = TRUE, La_qr_cmplx = TRUE, 
argv:     La_qr = TRUE, La_dtrcon = TRUE, La_dlange = TRUE, La_dgecon = TRUE, 
argv:     La_chol2inv = TRUE, La_chol = TRUE, l10n_info = TRUE, isSeekable = TRUE, 
argv:     isOpen = TRUE, isNamespaceEnv = TRUE, islistfactor = TRUE, 
argv:     isIncomplete = TRUE, isdebugged = TRUE, isatty = TRUE, is.vector = TRUE, 
argv:     is.unsorted = TRUE, is.loaded = TRUE, is.builtin.internal = TRUE, 
argv:     intToUtf8 = TRUE, intToBits = TRUE, interruptsSuspended = TRUE, 
argv:     inspect = TRUE, inherits = TRUE, importIntoEnv = TRUE, identical = TRUE, 
argv:     icuSetCollate = TRUE, icuGetCollate = TRUE, iconv = TRUE, 
argv:     gzfile = TRUE, gzcon = TRUE, gsub = TRUE, growconst = TRUE, 
argv:     grepRaw = TRUE, grepl = TRUE, grep = TRUE, gregexpr = TRUE, 
argv:     getwd = TRUE, getVarsFromFrame = TRUE, gettext = TRUE, getSymbolInfo = TRUE, 
argv:     getRegisteredRoutines = TRUE, getRegisteredNamespace = TRUE, 
argv:     getNamespaceRegistry = TRUE, getLoadedDLLs = TRUE, geterrmessage = TRUE, 
argv:     getconst = TRUE, getConnection = TRUE, getAllConnections = TRUE, 
argv:     get = TRUE, gctorture2 = TRUE, gctorture = TRUE, gcinfo = TRUE, 
argv:     gc = TRUE, formatC = TRUE, format.POSIXlt = TRUE, format.info = TRUE, 
argv:     format = TRUE, formals = TRUE, flush = TRUE, findInterval = TRUE, 
argv:     file.symlink = TRUE, file.show = TRUE, file.rename = TRUE, 
argv:     file.remove = TRUE, file.path = TRUE, file.link = TRUE, file.info = TRUE, 
argv:     file.exists = TRUE, file.create = TRUE, file.copy = TRUE, 
argv:     file.choose = TRUE, file.append = TRUE, file.access = TRUE, 
argv:     file = TRUE, fifo = TRUE, exists = TRUE, eval = TRUE, environmentName = TRUE, 
argv:     environmentIsLocked = TRUE, environment = TRUE, env2list = TRUE, 
argv:     env.profile = TRUE, Encoding = TRUE, encodeString = TRUE, 
argv:     enableJIT = TRUE, eapply = TRUE, dyn.unload = TRUE, dyn.load = TRUE, 
argv:     dwilcox = TRUE, dweibull = TRUE, duplicated = TRUE, dunif = TRUE, 
argv:     dump = TRUE, dtukey = TRUE, dt = TRUE, dsignrank = TRUE, 
argv:     drop = TRUE, dput = TRUE, dpois = TRUE, do.call = TRUE, dnt = TRUE, 
argv:     dnorm = TRUE, dnf = TRUE, dnchisq = TRUE, dnbinom_mu = TRUE, 
argv:     dnbinom = TRUE, dnbeta = TRUE, dlogis = TRUE, dlnorm = TRUE, 
argv:     disassemble = TRUE, dirname = TRUE, dir.create = TRUE, diag = TRUE, 
argv:     dhyper = TRUE, dgeom = TRUE, dgamma = TRUE, df = TRUE, dexp = TRUE, 
argv:     detach = TRUE, det_ge_real = TRUE, deparse = TRUE, delayedAssign = TRUE, 
argv:     debugonce = TRUE, debug = TRUE, dchisq = TRUE, dcauchy = TRUE, 
argv:     dbinom = TRUE, dbeta = TRUE, Date2POSIXlt = TRUE, date = TRUE, 
argv:     Cstack_info = TRUE, crossprod = TRUE, crc64 = TRUE, copyDFattr = TRUE, 
argv:     complex = TRUE, compilePKGS = TRUE, "comment<-" = TRUE, comment = TRUE, 
argv:     commandArgs = TRUE, colSums = TRUE, colMeans = TRUE, col = TRUE, 
argv:     close = TRUE, clearPushBack = TRUE, choose = TRUE, chartr = TRUE, 
argv:     charToRaw = TRUE, charmatch = TRUE, cbind = TRUE, cat = TRUE, 
argv:     capabilitiesX11 = TRUE, capabilities = TRUE, bzfile = TRUE, 
argv:     builtins = TRUE, browserText = TRUE, browserSetDebug = TRUE, 
argv:     browserCondition = TRUE, bodyCode = TRUE, body = TRUE, bitwiseXor = TRUE, 
argv:     bitwiseShiftR = TRUE, bitwiseShiftL = TRUE, bitwiseOr = TRUE, 
argv:     bitwiseNot = TRUE, bitwiseAnd = TRUE, bindtextdomain = TRUE, 
argv:     bindingIsLocked = TRUE, bindingIsActive = TRUE, bincode = TRUE, 
argv:     beta = TRUE, besselY = TRUE, besselK = TRUE, besselJ = TRUE, 
argv:     besselI = TRUE, bcVersion = TRUE, bcClose = TRUE, basename = TRUE, 
argv:     backsolve = TRUE, attach = TRUE, atan2 = TRUE, assign = TRUE, 
argv:     as.vector = TRUE, as.POSIXlt = TRUE, as.POSIXct = TRUE, as.function.default = TRUE, 
argv:     array = TRUE, args = TRUE, aregexec = TRUE, aperm = TRUE, 
argv:     anyDuplicated = TRUE, all.names = TRUE, agrepl = TRUE, agrep = TRUE, 
argv:     adist = TRUE, abbreviate = TRUE, .signalCondition = TRUE, 
argv:     .resetCondHands = TRUE, .invokeRestart = TRUE, .getRestart = TRUE, 
argv:     .dfltWarn = TRUE, .dfltStop = TRUE, .addTryHandlers = TRUE, 
argv:     .addRestart = TRUE, .addCondHands = TRUE), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(length(testr:::cache$decorated) > 
argv:     0)), .Names = c("pattern", "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//Rtmpuh4Hop"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(all(check.dec))), .Names = c("pattern", 
argv: "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//Rtmpuh4Hop"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: qr.X
argv: structure(list(qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = "qr")

func: qr.X
argv: structure(list(complete = TRUE, qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = c("complete", 
argv: "qr"))

func: svd
argv: structure(list(x = structure(c(1, 0.5, 0.333333333333333, 0.25, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.5, 0.333333333333333, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.333333333333333, 0.25, 0.2, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.0909090909090909, 0.0833333333333333, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.0714285714285714), .Dim = c(9, 6))), .Names = "x")

func: is.vector
argv: structure(list(x = c("xzfile", "writeLines", "writeChar", "writeBin", 
argv: "withVisible", "which.min", "which.max", "which", "warning", 
argv: "Version", "vector", "vapply", "utf8ToInt", "url", "unz", "unserializeFromConn", 
argv: "unserialize", "unregisterNamespace", "unlockBinding", "unlist", 
argv: "unlink", "unique", "undebug", "typeof", "truncate", "traceOnOff", 
argv: "traceback", "toupper", "tolower", "textConnectionValue", "textConnection", 
argv: "tempfile", "tempdir", "tcrossprod", "tabulate", "t.default", 
argv: "system", "Sys.unsetenv", "Sys.umask", "Sys.time", "Sys.sleep", 
argv: "Sys.setlocale", "Sys.setenv", "Sys.readlink", "sys.parents", 
argv: "sys.parent", "sys.on.exit", "sys.nframe", "Sys.localeconv", 
argv: "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", "Sys.getenv", 
argv: "sys.function", "sys.frames", "sys.frame", "Sys.chmod", "sys.calls", 
argv: "sys.call", "summary.connection", "substr<-", "substr", "sub", 
argv: "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: )), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("unique")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("truncate")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, f, drop = FALSE, ...) 
argv: UseMethod("split")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, decreasing = FALSE, ...) 
argv: {
argv:     if (!is.logical(decreasing) || length(decreasing) != 1) 
argv:         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
argv:     UseMethod("sort")
argv: }), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "||"), .Names = "x")

func: grep
argv: structure(list(x = "!"), .Names = "x")

func: grep
argv: structure(list(x = "is.logical"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "!="), .Names = "x")

func: grep
argv: structure(list(x = "length"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("seek")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("pretty")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("open")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, y, ...) 
argv: UseMethod("merge")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("mean")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("format")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con) 
argv: UseMethod("flush")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("duplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("close")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXlt")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXct")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (a, perm, ...) 
argv: UseMethod("aperm")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("anyDuplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: lapply
argv: structure(c(FALSE, FALSE, FALSE, FALSE), .Names = c("Quote", 
argv: "expression", "quote", "local"))

func: unlist
argv: structure(list(x = structure(list(xzfile = 1, writeLines = 1, 
argv:     writeChar = 1, writeBin = 1, withVisible = 1, which.min = 1, 
argv:     which.max = 1, which = 1, warning = 1, Version = 1, vector = 1, 
argv:     vapply = 1, utf8ToInt = 1, url = 1, unz = 1, unserializeFromConn = 1, 
argv:     unserialize = 1, unregisterNamespace = 1, unlockBinding = 1, 
argv:     unlist = 1, unlink = 1, unique = 1, undebug = 1, typeof = 1, 
argv:     truncate = 1, traceOnOff = 1, traceback = 1, toupper = 1, 
argv:     tolower = 1, textConnectionValue = 1, textConnection = 1, 
argv:     tempfile = 1, tempdir = 1, tcrossprod = 1, tabulate = 1, 
argv:     t.default = 1, system = 1, Sys.unsetenv = 1, Sys.umask = 1, 
argv:     Sys.time = 1, Sys.sleep = 1, Sys.setlocale = 1, Sys.setenv = 1, 
argv:     Sys.readlink = 1, sys.parents = 1, sys.parent = 1, sys.on.exit = 1, 
argv:     sys.nframe = 1, Sys.localeconv = 1, Sys.info = 1, Sys.glob = 1, 
argv:     Sys.getpid = 1, Sys.getlocale = 1, Sys.getenv = 1, sys.function = 1, 
argv:     sys.frames = 1, sys.frame = 1, Sys.chmod = 1, sys.calls = 1, 
argv:     sys.call = 1, summary.connection = 1, "substr<-" = 1, substr = 1, 
argv:     sub = 1, strtrim = 1, strtoi = 1, strsplit = 1, strptime = 1, 
argv:     stop = 1, stdout = 1, stdin = 1, stderr = 1, sprintf = 1, 
argv:     split = 1, sort = 1, sockSelect = 1, socketConnection = 1, 
argv:     sink.number = 1, sink = 1, shortRowNames = 1, setwd = 1, 
argv:     setTimeLimit = 1, setSessionTimeLimit = 1, setS4Object = 1, 
argv:     setNumMathThreads = 1, setMaxNumMathThreads = 1, setFileTime = 1, 
argv:     seterrmessage = 1, setEncoding = 1, set.seed = 1, serializeToConn = 1, 
argv:     serializeb = 1, serialize = 1, seek = 1, search = 1, scan = 1, 
argv:     saveToConn = 1, save.to.file = 1, save = 1, sample2 = 1, 
argv:     sample = 1, rwilcox = 1, rweibull = 1, runif = 1, rt = 1, 
argv:     rsignrank = 1, rpois = 1, rowSums = 1, rowsum_matrix = 1, 
argv:     rowsum_df = 1, rowMeans = 1, row = 1, rnorm = 1, RNGkind = 1, 
argv:     rnchisq = 1, rnbinom_mu = 1, rnbinom = 1, rlogis = 1, rlnorm = 1, 
argv:     rhyper = 1, rgeom = 1, rgamma = 1, rf = 1, rexp = 1, restart = 1, 
argv:     rep.int = 1, rep_len = 1, remove = 1, registerNamespace = 1, 
argv:     regexpr = 1, regexec = 1, reg.finalizer = 1, recordGraphics = 1, 
argv:     Recall = 1, readRenviron = 1, readLines = 1, readline = 1, 
argv:     readDCF = 1, readChar = 1, readBin = 1, rchisq = 1, rcauchy = 1, 
argv:     rbinom = 1, rbind = 1, rbeta = 1, rawToChar = 1, rawToBits = 1, 
argv:     rawShift = 1, rawConnectionValue = 1, rawConnection = 1, 
argv:     rapply = 1, rank = 1, radixsort = 1, R.home = 1, qwilcox = 1, 
argv:     qweibull = 1, qunif = 1, quit = 1, qtukey = 1, qt = 1, qsort = 1, 
argv:     qsignrank = 1, qr_qy_real = 1, qr_qy_cmpl = 1, qr_coef_real = 1, 
argv:     qr_coef_cmplx = 1, qpois = 1, qnt = 1, qnorm = 1, qnf = 1, 
argv:     qnchisq = 1, qnbinom_mu = 1, qnbinom = 1, qnbeta = 1, qlogis = 1, 
argv:     qlnorm = 1, qhyper = 1, qgeom = 1, qgamma = 1, qf = 1, qexp = 1, 
argv:     qchisq = 1, qcauchy = 1, qbinom = 1, qbeta = 1, pwilcox = 1, 
argv:     pweibull = 1, putconst = 1, pushBackLength = 1, pushBack = 1, 
argv:     punif = 1, ptukey = 1, pt = 1, psort = 1, psignrank = 1, 
argv:     psigamma = 1, prmatrix = 1, printDeferredWarnings = 1, print.function = 1, 
argv:     print.default = 1, pretty = 1, ppois = 1, POSIXlt2Date = 1, 
argv:     polyroot = 1, pnt = 1, pnorm = 1, pnf = 1, pnchisq = 1, pnbinom_mu = 1, 
argv:     pnbinom = 1, pnbeta = 1, pmin = 1, pmax = 1, pmatch = 1, 
argv:     plogis = 1, plnorm = 1, pipe = 1, phyper = 1, pgeom = 1, 
argv:     pgamma = 1, pf = 1, pexp = 1, pchisq = 1, pcauchy = 1, pbinom = 1, 
argv:     pbeta = 1, path.expand = 1, paste0 = 1, paste = 1, parse = 1, 
argv:     parent.frame = 1, "parent.env<-" = 1, parent.env = 1, packBits = 1, 
argv:     order = 1, options = 1, open = 1, normalizePath = 1, ngettext = 1, 
argv:     NextMethod = 1, new.env = 1, nchar = 1, mkUnbound = 1, mkCode = 1, 
argv:     mget = 1, merge = 1, memory.profile = 1, memDecompress = 1, 
argv:     memCompress = 1, mem.limits = 1, mean = 1, max.col = 1, matrix = 1, 
argv:     match.call = 1, match = 1, mapply = 1, makeLazy = 1, makeActiveBinding = 1, 
argv:     make.unique = 1, make.names = 1, machine = 1, ls = 1, lockEnvironment = 1, 
argv:     lockBinding = 1, loadFromConn2 = 1, load.from.file = 1, load = 1, 
argv:     list2env = 1, list.files = 1, list.dirs = 1, lchoose = 1, 
argv:     lbeta = 1, lazyLoadDBinsertValue = 1, lazyLoadDBflush = 1, 
argv:     lapply = 1, La_ztrcon = 1, La_zgecon = 1, La_version = 1, 
argv:     La_svd_cmplx = 1, La_svd = 1, La_solve_cmplx = 1, La_solve = 1, 
argv:     La_rs_cmplx = 1, La_rs = 1, La_rg_cmplx = 1, La_rg = 1, La_qr_cmplx = 1, 
argv:     La_qr = 1, La_dtrcon = 1, La_dlange = 1, La_dgecon = 1, La_chol2inv = 1, 
argv:     La_chol = 1, l10n_info = 1, isSeekable = 1, isOpen = 1, isNamespaceEnv = 1, 
argv:     islistfactor = 1, isIncomplete = 1, isdebugged = 1, isatty = 1, 
argv:     is.vector = 1, is.unsorted = 1, is.loaded = 1, is.builtin.internal = 1, 
argv:     intToUtf8 = 1, intToBits = 1, interruptsSuspended = 1, inspect = 1, 
argv:     inherits = 1, importIntoEnv = 1, identical = 1, icuSetCollate = 1, 
argv:     icuGetCollate = 1, iconv = 1, gzfile = 1, gzcon = 1, gsub = 1, 
argv:     growconst = 1, grepRaw = 1, grepl = 1, grep = 1, gregexpr = 1, 
argv:     getwd = 1, getVarsFromFrame = 1, gettext = 1, getSymbolInfo = 1, 
argv:     getRegisteredRoutines = 1, getRegisteredNamespace = 1, getNamespaceRegistry = 1, 
argv:     getLoadedDLLs = 1, geterrmessage = 1, getconst = 1, getConnection = 1, 
argv:     getAllConnections = 1, get = 1, gctorture2 = 1, gctorture = 1, 
argv:     gcinfo = 1, gc = 1, formatC = 1, format.POSIXlt = 1, format.info = 1, 
argv:     format = 1, formals = 1, flush = 1, findInterval = 1, file.symlink = 1, 
argv:     file.show = 1, file.rename = 1, file.remove = 1, file.path = 1, 
argv:     file.link = 1, file.info = 1, file.exists = 1, file.create = 1, 
argv:     file.copy = 1, file.choose = 1, file.append = 1, file.access = 1, 
argv:     file = 1, fifo = 1, exists = 1, eval = 1, environmentName = 1, 
argv:     environmentIsLocked = 1, environment = 1, env2list = 1, env.profile = 1, 
argv:     Encoding = 1, encodeString = 1, enableJIT = 1, eapply = 1, 
argv:     dyn.unload = 1, dyn.load = 1, dwilcox = 1, dweibull = 1, 
argv:     duplicated = 1, dunif = 1, dump = 1, dtukey = 1, dt = 1, 
argv:     dsignrank = 1, drop = 1, dput = 1, dpois = 1, do.call = 1, 
argv:     dnt = 1, dnorm = 1, dnf = 1, dnchisq = 1, dnbinom_mu = 1, 
argv:     dnbinom = 1, dnbeta = 1, dlogis = 1, dlnorm = 1, disassemble = 1, 
argv:     dirname = 1, dir.create = 1, diag = 1, dhyper = 1, dgeom = 1, 
argv:     dgamma = 1, df = 1, dexp = 1, detach = 1, det_ge_real = 1, 
argv:     deparse = 1, delayedAssign = 1, debugonce = 1, debug = 1, 
argv:     dchisq = 1, dcauchy = 1, dbinom = 1, dbeta = 1, Date2POSIXlt = 1, 
argv:     date = 1, Cstack_info = 1, crossprod = 1, crc64 = 1, copyDFattr = 1, 
argv:     complex = 1, compilePKGS = 1, "comment<-" = 1, comment = 1, 
argv:     commandArgs = 1, colSums = 1, colMeans = 1, col = 1, close = 1, 
argv:     clearPushBack = 1, choose = 1, chartr = 1, charToRaw = 1, 
argv:     charmatch = 1, cbind = 1, cat = 1, capabilitiesX11 = 1, capabilities = 1, 
argv:     bzfile = 1, builtins = 1, browserText = 1, browserSetDebug = 1, 
argv:     browserCondition = 1, bodyCode = 1, body = 1, bitwiseXor = 1, 
argv:     bitwiseShiftR = 1, bitwiseShiftL = 1, bitwiseOr = 1, bitwiseNot = 1, 
argv:     bitwiseAnd = 1, bindtextdomain = 1, bindingIsLocked = 1, 
argv:     bindingIsActive = 1, bincode = 1, beta = 1, besselY = 1, 
argv:     besselK = 1, besselJ = 1, besselI = 1, bcVersion = 1, bcClose = 1, 
argv:     basename = 1, backsolve = 1, attach = 1, atan2 = 1, assign = 1, 
argv:     as.vector = 1, as.POSIXlt = 1, as.POSIXct = 1, as.function.default = 1, 
argv:     array = 1, args = 1, aregexec = 1, aperm = 1, anyDuplicated = 1, 
argv:     all.names = 1, agrepl = 1, agrep = 1, adist = 1, abbreviate = 1, 
argv:     .signalCondition = 1, .resetCondHands = 1, .invokeRestart = 1, 
argv:     .getRestart = 1, .dfltWarn = 1, .dfltStop = 1, .addTryHandlers = 1, 
argv:     .addRestart = 1, .addCondHands = 1), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(xzfile = TRUE, writeLines = TRUE, 
argv:     writeChar = TRUE, writeBin = TRUE, withVisible = TRUE, which.min = TRUE, 
argv:     which.max = TRUE, which = TRUE, warning = TRUE, Version = TRUE, 
argv:     vector = TRUE, vapply = TRUE, utf8ToInt = TRUE, url = TRUE, 
argv:     unz = TRUE, unserializeFromConn = TRUE, unserialize = TRUE, 
argv:     unregisterNamespace = TRUE, unlockBinding = TRUE, unlist = TRUE, 
argv:     unlink = TRUE, unique = TRUE, undebug = TRUE, typeof = TRUE, 
argv:     truncate = TRUE, traceOnOff = TRUE, traceback = TRUE, toupper = TRUE, 
argv:     tolower = TRUE, textConnectionValue = TRUE, textConnection = TRUE, 
argv:     tempfile = TRUE, tempdir = TRUE, tcrossprod = TRUE, tabulate = TRUE, 
argv:     t.default = TRUE, system = TRUE, Sys.unsetenv = TRUE, Sys.umask = TRUE, 
argv:     Sys.time = TRUE, Sys.sleep = TRUE, Sys.setlocale = TRUE, 
argv:     Sys.setenv = TRUE, Sys.readlink = TRUE, sys.parents = TRUE, 
argv:     sys.parent = TRUE, sys.on.exit = TRUE, sys.nframe = TRUE, 
argv:     Sys.localeconv = TRUE, Sys.info = TRUE, Sys.glob = TRUE, 
argv:     Sys.getpid = TRUE, Sys.getlocale = TRUE, Sys.getenv = TRUE, 
argv:     sys.function = TRUE, sys.frames = TRUE, sys.frame = TRUE, 
argv:     Sys.chmod = TRUE, sys.calls = TRUE, sys.call = TRUE, summary.connection = TRUE, 
argv:     "substr<-" = TRUE, substr = TRUE, sub = TRUE, strtrim = TRUE, 
argv:     strtoi = TRUE, strsplit = TRUE, strptime = TRUE, stop = TRUE, 
argv:     stdout = TRUE, stdin = TRUE, stderr = TRUE, sprintf = TRUE, 
argv:     split = TRUE, sort = TRUE, sockSelect = TRUE, socketConnection = TRUE, 
argv:     sink.number = TRUE, sink = TRUE, shortRowNames = TRUE, setwd = TRUE, 
argv:     setTimeLimit = TRUE, setSessionTimeLimit = TRUE, setS4Object = TRUE, 
argv:     setNumMathThreads = TRUE, setMaxNumMathThreads = TRUE, setFileTime = TRUE, 
argv:     seterrmessage = TRUE, setEncoding = TRUE, set.seed = TRUE, 
argv:     serializeToConn = TRUE, serializeb = TRUE, serialize = TRUE, 
argv:     seek = TRUE, search = TRUE, scan = TRUE, saveToConn = TRUE, 
argv:     save.to.file = TRUE, save = TRUE, sample2 = TRUE, sample = TRUE, 
argv:     rwilcox = TRUE, rweibull = TRUE, runif = TRUE, rt = TRUE, 
argv:     rsignrank = TRUE, rpois = TRUE, rowSums = TRUE, rowsum_matrix = TRUE, 
argv:     rowsum_df = TRUE, rowMeans = TRUE, row = TRUE, rnorm = TRUE, 
argv:     RNGkind = TRUE, rnchisq = TRUE, rnbinom_mu = TRUE, rnbinom = TRUE, 
argv:     rlogis = TRUE, rlnorm = TRUE, rhyper = TRUE, rgeom = TRUE, 
argv:     rgamma = TRUE, rf = TRUE, rexp = TRUE, restart = TRUE, rep.int = TRUE, 
argv:     rep_len = TRUE, remove = TRUE, registerNamespace = TRUE, 
argv:     regexpr = TRUE, regexec = TRUE, reg.finalizer = TRUE, recordGraphics = TRUE, 
argv:     Recall = TRUE, readRenviron = TRUE, readLines = TRUE, readline = TRUE, 
argv:     readDCF = TRUE, readChar = TRUE, readBin = TRUE, rchisq = TRUE, 
argv:     rcauchy = TRUE, rbinom = TRUE, rbind = TRUE, rbeta = TRUE, 
argv:     rawToChar = TRUE, rawToBits = TRUE, rawShift = TRUE, rawConnectionValue = TRUE, 
argv:     rawConnection = TRUE, rapply = TRUE, rank = TRUE, radixsort = TRUE, 
argv:     R.home = TRUE, qwilcox = TRUE, qweibull = TRUE, qunif = TRUE, 
argv:     quit = TRUE, qtukey = TRUE, qt = TRUE, qsort = TRUE, qsignrank = TRUE, 
argv:     qr_qy_real = TRUE, qr_qy_cmpl = TRUE, qr_coef_real = TRUE, 
argv:     qr_coef_cmplx = TRUE, qpois = TRUE, qnt = TRUE, qnorm = TRUE, 
argv:     qnf = TRUE, qnchisq = TRUE, qnbinom_mu = TRUE, qnbinom = TRUE, 
argv:     qnbeta = TRUE, qlogis = TRUE, qlnorm = TRUE, qhyper = TRUE, 
argv:     qgeom = TRUE, qgamma = TRUE, qf = TRUE, qexp = TRUE, qchisq = TRUE, 
argv:     qcauchy = TRUE, qbinom = TRUE, qbeta = TRUE, pwilcox = TRUE, 
argv:     pweibull = TRUE, putconst = TRUE, pushBackLength = TRUE, 
argv:     pushBack = TRUE, punif = TRUE, ptukey = TRUE, pt = TRUE, 
argv:     psort = TRUE, psignrank = TRUE, psigamma = TRUE, prmatrix = TRUE, 
argv:     printDeferredWarnings = TRUE, print.function = TRUE, print.default = TRUE, 
argv:     pretty = TRUE, ppois = TRUE, POSIXlt2Date = TRUE, polyroot = TRUE, 
argv:     pnt = TRUE, pnorm = TRUE, pnf = TRUE, pnchisq = TRUE, pnbinom_mu = TRUE, 
argv:     pnbinom = TRUE, pnbeta = TRUE, pmin = TRUE, pmax = TRUE, 
argv:     pmatch = TRUE, plogis = TRUE, plnorm = TRUE, pipe = TRUE, 
argv:     phyper = TRUE, pgeom = TRUE, pgamma = TRUE, pf = TRUE, pexp = TRUE, 
argv:     pchisq = TRUE, pcauchy = TRUE, pbinom = TRUE, pbeta = TRUE, 
argv:     path.expand = TRUE, paste0 = TRUE, paste = TRUE, parse = TRUE, 
argv:     parent.frame = TRUE, "parent.env<-" = TRUE, parent.env = TRUE, 
argv:     packBits = TRUE, order = TRUE, options = TRUE, open = TRUE, 
argv:     normalizePath = TRUE, ngettext = TRUE, NextMethod = TRUE, 
argv:     new.env = TRUE, nchar = TRUE, mkUnbound = TRUE, mkCode = TRUE, 
argv:     mget = TRUE, merge = TRUE, memory.profile = TRUE, memDecompress = TRUE, 
argv:     memCompress = TRUE, mem.limits = TRUE, mean = TRUE, max.col = TRUE, 
argv:     matrix = TRUE, match.call = TRUE, match = TRUE, mapply = TRUE, 
argv:     makeLazy = TRUE, makeActiveBinding = TRUE, make.unique = TRUE, 
argv:     make.names = TRUE, machine = TRUE, ls = TRUE, lockEnvironment = TRUE, 
argv:     lockBinding = TRUE, loadFromConn2 = TRUE, load.from.file = TRUE, 
argv:     load = TRUE, list2env = TRUE, list.files = TRUE, list.dirs = TRUE, 
argv:     lchoose = TRUE, lbeta = TRUE, lazyLoadDBinsertValue = TRUE, 
argv:     lazyLoadDBflush = TRUE, lapply = TRUE, La_ztrcon = TRUE, 
argv:     La_zgecon = TRUE, La_version = TRUE, La_svd_cmplx = TRUE, 
argv:     La_svd = TRUE, La_solve_cmplx = TRUE, La_solve = TRUE, La_rs_cmplx = TRUE, 
argv:     La_rs = TRUE, La_rg_cmplx = TRUE, La_rg = TRUE, La_qr_cmplx = TRUE, 
argv:     La_qr = TRUE, La_dtrcon = TRUE, La_dlange = TRUE, La_dgecon = TRUE, 
argv:     La_chol2inv = TRUE, La_chol = TRUE, l10n_info = TRUE, isSeekable = TRUE, 
argv:     isOpen = TRUE, isNamespaceEnv = TRUE, islistfactor = TRUE, 
argv:     isIncomplete = TRUE, isdebugged = TRUE, isatty = TRUE, is.vector = TRUE, 
argv:     is.unsorted = TRUE, is.loaded = TRUE, is.builtin.internal = TRUE, 
argv:     intToUtf8 = TRUE, intToBits = TRUE, interruptsSuspended = TRUE, 
argv:     inspect = TRUE, inherits = TRUE, importIntoEnv = TRUE, identical = TRUE, 
argv:     icuSetCollate = TRUE, icuGetCollate = TRUE, iconv = TRUE, 
argv:     gzfile = TRUE, gzcon = TRUE, gsub = TRUE, growconst = TRUE, 
argv:     grepRaw = TRUE, grepl = TRUE, grep = TRUE, gregexpr = TRUE, 
argv:     getwd = TRUE, getVarsFromFrame = TRUE, gettext = TRUE, getSymbolInfo = TRUE, 
argv:     getRegisteredRoutines = TRUE, getRegisteredNamespace = TRUE, 
argv:     getNamespaceRegistry = TRUE, getLoadedDLLs = TRUE, geterrmessage = TRUE, 
argv:     getconst = TRUE, getConnection = TRUE, getAllConnections = TRUE, 
argv:     get = TRUE, gctorture2 = TRUE, gctorture = TRUE, gcinfo = TRUE, 
argv:     gc = TRUE, formatC = TRUE, format.POSIXlt = TRUE, format.info = TRUE, 
argv:     format = TRUE, formals = TRUE, flush = TRUE, findInterval = TRUE, 
argv:     file.symlink = TRUE, file.show = TRUE, file.rename = TRUE, 
argv:     file.remove = TRUE, file.path = TRUE, file.link = TRUE, file.info = TRUE, 
argv:     file.exists = TRUE, file.create = TRUE, file.copy = TRUE, 
argv:     file.choose = TRUE, file.append = TRUE, file.access = TRUE, 
argv:     file = TRUE, fifo = TRUE, exists = TRUE, eval = TRUE, environmentName = TRUE, 
argv:     environmentIsLocked = TRUE, environment = TRUE, env2list = TRUE, 
argv:     env.profile = TRUE, Encoding = TRUE, encodeString = TRUE, 
argv:     enableJIT = TRUE, eapply = TRUE, dyn.unload = TRUE, dyn.load = TRUE, 
argv:     dwilcox = TRUE, dweibull = TRUE, duplicated = TRUE, dunif = TRUE, 
argv:     dump = TRUE, dtukey = TRUE, dt = TRUE, dsignrank = TRUE, 
argv:     drop = TRUE, dput = TRUE, dpois = TRUE, do.call = TRUE, dnt = TRUE, 
argv:     dnorm = TRUE, dnf = TRUE, dnchisq = TRUE, dnbinom_mu = TRUE, 
argv:     dnbinom = TRUE, dnbeta = TRUE, dlogis = TRUE, dlnorm = TRUE, 
argv:     disassemble = TRUE, dirname = TRUE, dir.create = TRUE, diag = TRUE, 
argv:     dhyper = TRUE, dgeom = TRUE, dgamma = TRUE, df = TRUE, dexp = TRUE, 
argv:     detach = TRUE, det_ge_real = TRUE, deparse = TRUE, delayedAssign = TRUE, 
argv:     debugonce = TRUE, debug = TRUE, dchisq = TRUE, dcauchy = TRUE, 
argv:     dbinom = TRUE, dbeta = TRUE, Date2POSIXlt = TRUE, date = TRUE, 
argv:     Cstack_info = TRUE, crossprod = TRUE, crc64 = TRUE, copyDFattr = TRUE, 
argv:     complex = TRUE, compilePKGS = TRUE, "comment<-" = TRUE, comment = TRUE, 
argv:     commandArgs = TRUE, colSums = TRUE, colMeans = TRUE, col = TRUE, 
argv:     close = TRUE, clearPushBack = TRUE, choose = TRUE, chartr = TRUE, 
argv:     charToRaw = TRUE, charmatch = TRUE, cbind = TRUE, cat = TRUE, 
argv:     capabilitiesX11 = TRUE, capabilities = TRUE, bzfile = TRUE, 
argv:     builtins = TRUE, browserText = TRUE, browserSetDebug = TRUE, 
argv:     browserCondition = TRUE, bodyCode = TRUE, body = TRUE, bitwiseXor = TRUE, 
argv:     bitwiseShiftR = TRUE, bitwiseShiftL = TRUE, bitwiseOr = TRUE, 
argv:     bitwiseNot = TRUE, bitwiseAnd = TRUE, bindtextdomain = TRUE, 
argv:     bindingIsLocked = TRUE, bindingIsActive = TRUE, bincode = TRUE, 
argv:     beta = TRUE, besselY = TRUE, besselK = TRUE, besselJ = TRUE, 
argv:     besselI = TRUE, bcVersion = TRUE, bcClose = TRUE, basename = TRUE, 
argv:     backsolve = TRUE, attach = TRUE, atan2 = TRUE, assign = TRUE, 
argv:     as.vector = TRUE, as.POSIXlt = TRUE, as.POSIXct = TRUE, as.function.default = TRUE, 
argv:     array = TRUE, args = TRUE, aregexec = TRUE, aperm = TRUE, 
argv:     anyDuplicated = TRUE, all.names = TRUE, agrepl = TRUE, agrep = TRUE, 
argv:     adist = TRUE, abbreviate = TRUE, .signalCondition = TRUE, 
argv:     .resetCondHands = TRUE, .invokeRestart = TRUE, .getRestart = TRUE, 
argv:     .dfltWarn = TRUE, .dfltStop = TRUE, .addTryHandlers = TRUE, 
argv:     .addRestart = TRUE, .addCondHands = TRUE), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(length(testr:::cache$decorated) > 
argv:     0)), .Names = c("pattern", "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpVifKYj"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(all(check.dec))), .Names = c("pattern", 
argv: "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpVifKYj"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: qr.X
argv: structure(list(qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = "qr")

func: qr.X
argv: structure(list(complete = TRUE, qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = c("complete", 
argv: "qr"))

func: svd
argv: structure(list(x = structure(c(1, 0.5, 0.333333333333333, 0.25, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.5, 0.333333333333333, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.333333333333333, 0.25, 0.2, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.0909090909090909, 0.0833333333333333, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.0714285714285714), .Dim = c(9, 6))), .Names = "x")

func: is.vector
argv: structure(list(x = c("xzfile", "writeLines", "writeChar", "writeBin", 
argv: "withVisible", "which.min", "which.max", "which", "warning", 
argv: "Version", "vector", "vapply", "utf8ToInt", "url", "unz", "unserializeFromConn", 
argv: "unserialize", "unregisterNamespace", "unlockBinding", "unlist", 
argv: "unlink", "unique", "undebug", "typeof", "truncate", "traceOnOff", 
argv: "traceback", "toupper", "tolower", "textConnectionValue", "textConnection", 
argv: "tempfile", "tempdir", "tcrossprod", "tabulate", "t.default", 
argv: "system", "Sys.unsetenv", "Sys.umask", "Sys.time", "Sys.sleep", 
argv: "Sys.setlocale", "Sys.setenv", "Sys.readlink", "sys.parents", 
argv: "sys.parent", "sys.on.exit", "sys.nframe", "Sys.localeconv", 
argv: "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", "Sys.getenv", 
argv: "sys.function", "sys.frames", "sys.frame", "Sys.chmod", "sys.calls", 
argv: "sys.call", "summary.connection", "substr<-", "substr", "sub", 
argv: "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: )), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("unique")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("truncate")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, f, drop = FALSE, ...) 
argv: UseMethod("split")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, decreasing = FALSE, ...) 
argv: {
argv:     if (!is.logical(decreasing) || length(decreasing) != 1) 
argv:         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
argv:     UseMethod("sort")
argv: }), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "||"), .Names = "x")

func: grep
argv: structure(list(x = "!"), .Names = "x")

func: grep
argv: structure(list(x = "is.logical"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "!="), .Names = "x")

func: grep
argv: structure(list(x = "length"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("seek")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("pretty")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("open")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, y, ...) 
argv: UseMethod("merge")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("mean")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("format")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con) 
argv: UseMethod("flush")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("duplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("close")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXlt")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXct")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (a, perm, ...) 
argv: UseMethod("aperm")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("anyDuplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: lapply
argv: c(FALSE, FALSE, TRUE, FALSE)

func: unlist
argv: structure(list(x = structure(list(xzfile = 1, writeLines = 1, 
argv:     writeChar = 1, writeBin = 1, withVisible = 1, which.min = 1, 
argv:     which.max = 1, which = 1, warning = 1, Version = 1, vector = 1, 
argv:     vapply = 1, utf8ToInt = 1, url = 1, unz = 1, unserializeFromConn = 1, 
argv:     unserialize = 1, unregisterNamespace = 1, unlockBinding = 1, 
argv:     unlist = 1, unlink = 1, unique = 1, undebug = 1, typeof = 1, 
argv:     truncate = 1, traceOnOff = 1, traceback = 1, toupper = 1, 
argv:     tolower = 1, textConnectionValue = 1, textConnection = 1, 
argv:     tempfile = 1, tempdir = 1, tcrossprod = 1, tabulate = 1, 
argv:     t.default = 1, system = 1, Sys.unsetenv = 1, Sys.umask = 1, 
argv:     Sys.time = 1, Sys.sleep = 1, Sys.setlocale = 1, Sys.setenv = 1, 
argv:     Sys.readlink = 1, sys.parents = 1, sys.parent = 1, sys.on.exit = 1, 
argv:     sys.nframe = 1, Sys.localeconv = 1, Sys.info = 1, Sys.glob = 1, 
argv:     Sys.getpid = 1, Sys.getlocale = 1, Sys.getenv = 1, sys.function = 1, 
argv:     sys.frames = 1, sys.frame = 1, Sys.chmod = 1, sys.calls = 1, 
argv:     sys.call = 1, summary.connection = 1, "substr<-" = 1, substr = 1, 
argv:     sub = 1, strtrim = 1, strtoi = 1, strsplit = 1, strptime = 1, 
argv:     stop = 1, stdout = 1, stdin = 1, stderr = 1, sprintf = 1, 
argv:     split = 1, sort = 1, sockSelect = 1, socketConnection = 1, 
argv:     sink.number = 1, sink = 1, shortRowNames = 1, setwd = 1, 
argv:     setTimeLimit = 1, setSessionTimeLimit = 1, setS4Object = 1, 
argv:     setNumMathThreads = 1, setMaxNumMathThreads = 1, setFileTime = 1, 
argv:     seterrmessage = 1, setEncoding = 1, set.seed = 1, serializeToConn = 1, 
argv:     serializeb = 1, serialize = 1, seek = 1, search = 1, scan = 1, 
argv:     saveToConn = 1, save.to.file = 1, save = 1, sample2 = 1, 
argv:     sample = 1, rwilcox = 1, rweibull = 1, runif = 1, rt = 1, 
argv:     rsignrank = 1, rpois = 1, rowSums = 1, rowsum_matrix = 1, 
argv:     rowsum_df = 1, rowMeans = 1, row = 1, rnorm = 1, RNGkind = 1, 
argv:     rnchisq = 1, rnbinom_mu = 1, rnbinom = 1, rlogis = 1, rlnorm = 1, 
argv:     rhyper = 1, rgeom = 1, rgamma = 1, rf = 1, rexp = 1, restart = 1, 
argv:     rep.int = 1, rep_len = 1, remove = 1, registerNamespace = 1, 
argv:     regexpr = 1, regexec = 1, reg.finalizer = 1, recordGraphics = 1, 
argv:     Recall = 1, readRenviron = 1, readLines = 1, readline = 1, 
argv:     readDCF = 1, readChar = 1, readBin = 1, rchisq = 1, rcauchy = 1, 
argv:     rbinom = 1, rbind = 1, rbeta = 1, rawToChar = 1, rawToBits = 1, 
argv:     rawShift = 1, rawConnectionValue = 1, rawConnection = 1, 
argv:     rapply = 1, rank = 1, radixsort = 1, R.home = 1, qwilcox = 1, 
argv:     qweibull = 1, qunif = 1, quit = 1, qtukey = 1, qt = 1, qsort = 1, 
argv:     qsignrank = 1, qr_qy_real = 1, qr_qy_cmpl = 1, qr_coef_real = 1, 
argv:     qr_coef_cmplx = 1, qpois = 1, qnt = 1, qnorm = 1, qnf = 1, 
argv:     qnchisq = 1, qnbinom_mu = 1, qnbinom = 1, qnbeta = 1, qlogis = 1, 
argv:     qlnorm = 1, qhyper = 1, qgeom = 1, qgamma = 1, qf = 1, qexp = 1, 
argv:     qchisq = 1, qcauchy = 1, qbinom = 1, qbeta = 1, pwilcox = 1, 
argv:     pweibull = 1, putconst = 1, pushBackLength = 1, pushBack = 1, 
argv:     punif = 1, ptukey = 1, pt = 1, psort = 1, psignrank = 1, 
argv:     psigamma = 1, prmatrix = 1, printDeferredWarnings = 1, print.function = 1, 
argv:     print.default = 1, pretty = 1, ppois = 1, POSIXlt2Date = 1, 
argv:     polyroot = 1, pnt = 1, pnorm = 1, pnf = 1, pnchisq = 1, pnbinom_mu = 1, 
argv:     pnbinom = 1, pnbeta = 1, pmin = 1, pmax = 1, pmatch = 1, 
argv:     plogis = 1, plnorm = 1, pipe = 1, phyper = 1, pgeom = 1, 
argv:     pgamma = 1, pf = 1, pexp = 1, pchisq = 1, pcauchy = 1, pbinom = 1, 
argv:     pbeta = 1, path.expand = 1, paste0 = 1, paste = 1, parse = 1, 
argv:     parent.frame = 1, "parent.env<-" = 1, parent.env = 1, packBits = 1, 
argv:     order = 1, options = 1, open = 1, normalizePath = 1, ngettext = 1, 
argv:     NextMethod = 1, new.env = 1, nchar = 1, mkUnbound = 1, mkCode = 1, 
argv:     mget = 1, merge = 1, memory.profile = 1, memDecompress = 1, 
argv:     memCompress = 1, mem.limits = 1, mean = 1, max.col = 1, matrix = 1, 
argv:     match.call = 1, match = 1, mapply = 1, makeLazy = 1, makeActiveBinding = 1, 
argv:     make.unique = 1, make.names = 1, machine = 1, ls = 1, lockEnvironment = 1, 
argv:     lockBinding = 1, loadFromConn2 = 1, load.from.file = 1, load = 1, 
argv:     list2env = 1, list.files = 1, list.dirs = 1, lchoose = 1, 
argv:     lbeta = 1, lazyLoadDBinsertValue = 1, lazyLoadDBflush = 1, 
argv:     lapply = 1, La_ztrcon = 1, La_zgecon = 1, La_version = 1, 
argv:     La_svd_cmplx = 1, La_svd = 1, La_solve_cmplx = 1, La_solve = 1, 
argv:     La_rs_cmplx = 1, La_rs = 1, La_rg_cmplx = 1, La_rg = 1, La_qr_cmplx = 1, 
argv:     La_qr = 1, La_dtrcon = 1, La_dlange = 1, La_dgecon = 1, La_chol2inv = 1, 
argv:     La_chol = 1, l10n_info = 1, isSeekable = 1, isOpen = 1, isNamespaceEnv = 1, 
argv:     islistfactor = 1, isIncomplete = 1, isdebugged = 1, isatty = 1, 
argv:     is.vector = 1, is.unsorted = 1, is.loaded = 1, is.builtin.internal = 1, 
argv:     intToUtf8 = 1, intToBits = 1, interruptsSuspended = 1, inspect = 1, 
argv:     inherits = 1, importIntoEnv = 1, identical = 1, icuSetCollate = 1, 
argv:     icuGetCollate = 1, iconv = 1, gzfile = 1, gzcon = 1, gsub = 1, 
argv:     growconst = 1, grepRaw = 1, grepl = 1, grep = 1, gregexpr = 1, 
argv:     getwd = 1, getVarsFromFrame = 1, gettext = 1, getSymbolInfo = 1, 
argv:     getRegisteredRoutines = 1, getRegisteredNamespace = 1, getNamespaceRegistry = 1, 
argv:     getLoadedDLLs = 1, geterrmessage = 1, getconst = 1, getConnection = 1, 
argv:     getAllConnections = 1, get = 1, gctorture2 = 1, gctorture = 1, 
argv:     gcinfo = 1, gc = 1, formatC = 1, format.POSIXlt = 1, format.info = 1, 
argv:     format = 1, formals = 1, flush = 1, findInterval = 1, file.symlink = 1, 
argv:     file.show = 1, file.rename = 1, file.remove = 1, file.path = 1, 
argv:     file.link = 1, file.info = 1, file.exists = 1, file.create = 1, 
argv:     file.copy = 1, file.choose = 1, file.append = 1, file.access = 1, 
argv:     file = 1, fifo = 1, exists = 1, eval = 1, environmentName = 1, 
argv:     environmentIsLocked = 1, environment = 1, env2list = 1, env.profile = 1, 
argv:     Encoding = 1, encodeString = 1, enableJIT = 1, eapply = 1, 
argv:     dyn.unload = 1, dyn.load = 1, dwilcox = 1, dweibull = 1, 
argv:     duplicated = 1, dunif = 1, dump = 1, dtukey = 1, dt = 1, 
argv:     dsignrank = 1, drop = 1, dput = 1, dpois = 1, do.call = 1, 
argv:     dnt = 1, dnorm = 1, dnf = 1, dnchisq = 1, dnbinom_mu = 1, 
argv:     dnbinom = 1, dnbeta = 1, dlogis = 1, dlnorm = 1, disassemble = 1, 
argv:     dirname = 1, dir.create = 1, diag = 1, dhyper = 1, dgeom = 1, 
argv:     dgamma = 1, df = 1, dexp = 1, detach = 1, det_ge_real = 1, 
argv:     deparse = 1, delayedAssign = 1, debugonce = 1, debug = 1, 
argv:     dchisq = 1, dcauchy = 1, dbinom = 1, dbeta = 1, Date2POSIXlt = 1, 
argv:     date = 1, Cstack_info = 1, crossprod = 1, crc64 = 1, copyDFattr = 1, 
argv:     complex = 1, compilePKGS = 1, "comment<-" = 1, comment = 1, 
argv:     commandArgs = 1, colSums = 1, colMeans = 1, col = 1, close = 1, 
argv:     clearPushBack = 1, choose = 1, chartr = 1, charToRaw = 1, 
argv:     charmatch = 1, cbind = 1, cat = 1, capabilitiesX11 = 1, capabilities = 1, 
argv:     bzfile = 1, builtins = 1, browserText = 1, browserSetDebug = 1, 
argv:     browserCondition = 1, bodyCode = 1, body = 1, bitwiseXor = 1, 
argv:     bitwiseShiftR = 1, bitwiseShiftL = 1, bitwiseOr = 1, bitwiseNot = 1, 
argv:     bitwiseAnd = 1, bindtextdomain = 1, bindingIsLocked = 1, 
argv:     bindingIsActive = 1, bincode = 1, beta = 1, besselY = 1, 
argv:     besselK = 1, besselJ = 1, besselI = 1, bcVersion = 1, bcClose = 1, 
argv:     basename = 1, backsolve = 1, attach = 1, atan2 = 1, assign = 1, 
argv:     as.vector = 1, as.POSIXlt = 1, as.POSIXct = 1, as.function.default = 1, 
argv:     array = 1, args = 1, aregexec = 1, aperm = 1, anyDuplicated = 1, 
argv:     all.names = 1, agrepl = 1, agrep = 1, adist = 1, abbreviate = 1, 
argv:     .signalCondition = 1, .resetCondHands = 1, .invokeRestart = 1, 
argv:     .getRestart = 1, .dfltWarn = 1, .dfltStop = 1, .addTryHandlers = 1, 
argv:     .addRestart = 1, .addCondHands = 1), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(xzfile = TRUE, writeLines = TRUE, 
argv:     writeChar = TRUE, writeBin = TRUE, withVisible = TRUE, which.min = TRUE, 
argv:     which.max = TRUE, which = TRUE, warning = TRUE, Version = TRUE, 
argv:     vector = TRUE, vapply = TRUE, utf8ToInt = TRUE, url = TRUE, 
argv:     unz = TRUE, unserializeFromConn = TRUE, unserialize = TRUE, 
argv:     unregisterNamespace = TRUE, unlockBinding = TRUE, unlist = TRUE, 
argv:     unlink = TRUE, unique = TRUE, undebug = TRUE, typeof = TRUE, 
argv:     truncate = TRUE, traceOnOff = TRUE, traceback = TRUE, toupper = TRUE, 
argv:     tolower = TRUE, textConnectionValue = TRUE, textConnection = TRUE, 
argv:     tempfile = TRUE, tempdir = TRUE, tcrossprod = TRUE, tabulate = TRUE, 
argv:     t.default = TRUE, system = TRUE, Sys.unsetenv = TRUE, Sys.umask = TRUE, 
argv:     Sys.time = TRUE, Sys.sleep = TRUE, Sys.setlocale = TRUE, 
argv:     Sys.setenv = TRUE, Sys.readlink = TRUE, sys.parents = TRUE, 
argv:     sys.parent = TRUE, sys.on.exit = TRUE, sys.nframe = TRUE, 
argv:     Sys.localeconv = TRUE, Sys.info = TRUE, Sys.glob = TRUE, 
argv:     Sys.getpid = TRUE, Sys.getlocale = TRUE, Sys.getenv = TRUE, 
argv:     sys.function = TRUE, sys.frames = TRUE, sys.frame = TRUE, 
argv:     Sys.chmod = TRUE, sys.calls = TRUE, sys.call = TRUE, summary.connection = TRUE, 
argv:     "substr<-" = TRUE, substr = TRUE, sub = TRUE, strtrim = TRUE, 
argv:     strtoi = TRUE, strsplit = TRUE, strptime = TRUE, stop = TRUE, 
argv:     stdout = TRUE, stdin = TRUE, stderr = TRUE, sprintf = TRUE, 
argv:     split = TRUE, sort = TRUE, sockSelect = TRUE, socketConnection = TRUE, 
argv:     sink.number = TRUE, sink = TRUE, shortRowNames = TRUE, setwd = TRUE, 
argv:     setTimeLimit = TRUE, setSessionTimeLimit = TRUE, setS4Object = TRUE, 
argv:     setNumMathThreads = TRUE, setMaxNumMathThreads = TRUE, setFileTime = TRUE, 
argv:     seterrmessage = TRUE, setEncoding = TRUE, set.seed = TRUE, 
argv:     serializeToConn = TRUE, serializeb = TRUE, serialize = TRUE, 
argv:     seek = TRUE, search = TRUE, scan = TRUE, saveToConn = TRUE, 
argv:     save.to.file = TRUE, save = TRUE, sample2 = TRUE, sample = TRUE, 
argv:     rwilcox = TRUE, rweibull = TRUE, runif = TRUE, rt = TRUE, 
argv:     rsignrank = TRUE, rpois = TRUE, rowSums = TRUE, rowsum_matrix = TRUE, 
argv:     rowsum_df = TRUE, rowMeans = TRUE, row = TRUE, rnorm = TRUE, 
argv:     RNGkind = TRUE, rnchisq = TRUE, rnbinom_mu = TRUE, rnbinom = TRUE, 
argv:     rlogis = TRUE, rlnorm = TRUE, rhyper = TRUE, rgeom = TRUE, 
argv:     rgamma = TRUE, rf = TRUE, rexp = TRUE, restart = TRUE, rep.int = TRUE, 
argv:     rep_len = TRUE, remove = TRUE, registerNamespace = TRUE, 
argv:     regexpr = TRUE, regexec = TRUE, reg.finalizer = TRUE, recordGraphics = TRUE, 
argv:     Recall = TRUE, readRenviron = TRUE, readLines = TRUE, readline = TRUE, 
argv:     readDCF = TRUE, readChar = TRUE, readBin = TRUE, rchisq = TRUE, 
argv:     rcauchy = TRUE, rbinom = TRUE, rbind = TRUE, rbeta = TRUE, 
argv:     rawToChar = TRUE, rawToBits = TRUE, rawShift = TRUE, rawConnectionValue = TRUE, 
argv:     rawConnection = TRUE, rapply = TRUE, rank = TRUE, radixsort = TRUE, 
argv:     R.home = TRUE, qwilcox = TRUE, qweibull = TRUE, qunif = TRUE, 
argv:     quit = TRUE, qtukey = TRUE, qt = TRUE, qsort = TRUE, qsignrank = TRUE, 
argv:     qr_qy_real = TRUE, qr_qy_cmpl = TRUE, qr_coef_real = TRUE, 
argv:     qr_coef_cmplx = TRUE, qpois = TRUE, qnt = TRUE, qnorm = TRUE, 
argv:     qnf = TRUE, qnchisq = TRUE, qnbinom_mu = TRUE, qnbinom = TRUE, 
argv:     qnbeta = TRUE, qlogis = TRUE, qlnorm = TRUE, qhyper = TRUE, 
argv:     qgeom = TRUE, qgamma = TRUE, qf = TRUE, qexp = TRUE, qchisq = TRUE, 
argv:     qcauchy = TRUE, qbinom = TRUE, qbeta = TRUE, pwilcox = TRUE, 
argv:     pweibull = TRUE, putconst = TRUE, pushBackLength = TRUE, 
argv:     pushBack = TRUE, punif = TRUE, ptukey = TRUE, pt = TRUE, 
argv:     psort = TRUE, psignrank = TRUE, psigamma = TRUE, prmatrix = TRUE, 
argv:     printDeferredWarnings = TRUE, print.function = TRUE, print.default = TRUE, 
argv:     pretty = TRUE, ppois = TRUE, POSIXlt2Date = TRUE, polyroot = TRUE, 
argv:     pnt = TRUE, pnorm = TRUE, pnf = TRUE, pnchisq = TRUE, pnbinom_mu = TRUE, 
argv:     pnbinom = TRUE, pnbeta = TRUE, pmin = TRUE, pmax = TRUE, 
argv:     pmatch = TRUE, plogis = TRUE, plnorm = TRUE, pipe = TRUE, 
argv:     phyper = TRUE, pgeom = TRUE, pgamma = TRUE, pf = TRUE, pexp = TRUE, 
argv:     pchisq = TRUE, pcauchy = TRUE, pbinom = TRUE, pbeta = TRUE, 
argv:     path.expand = TRUE, paste0 = TRUE, paste = TRUE, parse = TRUE, 
argv:     parent.frame = TRUE, "parent.env<-" = TRUE, parent.env = TRUE, 
argv:     packBits = TRUE, order = TRUE, options = TRUE, open = TRUE, 
argv:     normalizePath = TRUE, ngettext = TRUE, NextMethod = TRUE, 
argv:     new.env = TRUE, nchar = TRUE, mkUnbound = TRUE, mkCode = TRUE, 
argv:     mget = TRUE, merge = TRUE, memory.profile = TRUE, memDecompress = TRUE, 
argv:     memCompress = TRUE, mem.limits = TRUE, mean = TRUE, max.col = TRUE, 
argv:     matrix = TRUE, match.call = TRUE, match = TRUE, mapply = TRUE, 
argv:     makeLazy = TRUE, makeActiveBinding = TRUE, make.unique = TRUE, 
argv:     make.names = TRUE, machine = TRUE, ls = TRUE, lockEnvironment = TRUE, 
argv:     lockBinding = TRUE, loadFromConn2 = TRUE, load.from.file = TRUE, 
argv:     load = TRUE, list2env = TRUE, list.files = TRUE, list.dirs = TRUE, 
argv:     lchoose = TRUE, lbeta = TRUE, lazyLoadDBinsertValue = TRUE, 
argv:     lazyLoadDBflush = TRUE, lapply = TRUE, La_ztrcon = TRUE, 
argv:     La_zgecon = TRUE, La_version = TRUE, La_svd_cmplx = TRUE, 
argv:     La_svd = TRUE, La_solve_cmplx = TRUE, La_solve = TRUE, La_rs_cmplx = TRUE, 
argv:     La_rs = TRUE, La_rg_cmplx = TRUE, La_rg = TRUE, La_qr_cmplx = TRUE, 
argv:     La_qr = TRUE, La_dtrcon = TRUE, La_dlange = TRUE, La_dgecon = TRUE, 
argv:     La_chol2inv = TRUE, La_chol = TRUE, l10n_info = TRUE, isSeekable = TRUE, 
argv:     isOpen = TRUE, isNamespaceEnv = TRUE, islistfactor = TRUE, 
argv:     isIncomplete = TRUE, isdebugged = TRUE, isatty = TRUE, is.vector = TRUE, 
argv:     is.unsorted = TRUE, is.loaded = TRUE, is.builtin.internal = TRUE, 
argv:     intToUtf8 = TRUE, intToBits = TRUE, interruptsSuspended = TRUE, 
argv:     inspect = TRUE, inherits = TRUE, importIntoEnv = TRUE, identical = TRUE, 
argv:     icuSetCollate = TRUE, icuGetCollate = TRUE, iconv = TRUE, 
argv:     gzfile = TRUE, gzcon = TRUE, gsub = TRUE, growconst = TRUE, 
argv:     grepRaw = TRUE, grepl = TRUE, grep = TRUE, gregexpr = TRUE, 
argv:     getwd = TRUE, getVarsFromFrame = TRUE, gettext = TRUE, getSymbolInfo = TRUE, 
argv:     getRegisteredRoutines = TRUE, getRegisteredNamespace = TRUE, 
argv:     getNamespaceRegistry = TRUE, getLoadedDLLs = TRUE, geterrmessage = TRUE, 
argv:     getconst = TRUE, getConnection = TRUE, getAllConnections = TRUE, 
argv:     get = TRUE, gctorture2 = TRUE, gctorture = TRUE, gcinfo = TRUE, 
argv:     gc = TRUE, formatC = TRUE, format.POSIXlt = TRUE, format.info = TRUE, 
argv:     format = TRUE, formals = TRUE, flush = TRUE, findInterval = TRUE, 
argv:     file.symlink = TRUE, file.show = TRUE, file.rename = TRUE, 
argv:     file.remove = TRUE, file.path = TRUE, file.link = TRUE, file.info = TRUE, 
argv:     file.exists = TRUE, file.create = TRUE, file.copy = TRUE, 
argv:     file.choose = TRUE, file.append = TRUE, file.access = TRUE, 
argv:     file = TRUE, fifo = TRUE, exists = TRUE, eval = TRUE, environmentName = TRUE, 
argv:     environmentIsLocked = TRUE, environment = TRUE, env2list = TRUE, 
argv:     env.profile = TRUE, Encoding = TRUE, encodeString = TRUE, 
argv:     enableJIT = TRUE, eapply = TRUE, dyn.unload = TRUE, dyn.load = TRUE, 
argv:     dwilcox = TRUE, dweibull = TRUE, duplicated = TRUE, dunif = TRUE, 
argv:     dump = TRUE, dtukey = TRUE, dt = TRUE, dsignrank = TRUE, 
argv:     drop = TRUE, dput = TRUE, dpois = TRUE, do.call = TRUE, dnt = TRUE, 
argv:     dnorm = TRUE, dnf = TRUE, dnchisq = TRUE, dnbinom_mu = TRUE, 
argv:     dnbinom = TRUE, dnbeta = TRUE, dlogis = TRUE, dlnorm = TRUE, 
argv:     disassemble = TRUE, dirname = TRUE, dir.create = TRUE, diag = TRUE, 
argv:     dhyper = TRUE, dgeom = TRUE, dgamma = TRUE, df = TRUE, dexp = TRUE, 
argv:     detach = TRUE, det_ge_real = TRUE, deparse = TRUE, delayedAssign = TRUE, 
argv:     debugonce = TRUE, debug = TRUE, dchisq = TRUE, dcauchy = TRUE, 
argv:     dbinom = TRUE, dbeta = TRUE, Date2POSIXlt = TRUE, date = TRUE, 
argv:     Cstack_info = TRUE, crossprod = TRUE, crc64 = TRUE, copyDFattr = TRUE, 
argv:     complex = TRUE, compilePKGS = TRUE, "comment<-" = TRUE, comment = TRUE, 
argv:     commandArgs = TRUE, colSums = TRUE, colMeans = TRUE, col = TRUE, 
argv:     close = TRUE, clearPushBack = TRUE, choose = TRUE, chartr = TRUE, 
argv:     charToRaw = TRUE, charmatch = TRUE, cbind = TRUE, cat = TRUE, 
argv:     capabilitiesX11 = TRUE, capabilities = TRUE, bzfile = TRUE, 
argv:     builtins = TRUE, browserText = TRUE, browserSetDebug = TRUE, 
argv:     browserCondition = TRUE, bodyCode = TRUE, body = TRUE, bitwiseXor = TRUE, 
argv:     bitwiseShiftR = TRUE, bitwiseShiftL = TRUE, bitwiseOr = TRUE, 
argv:     bitwiseNot = TRUE, bitwiseAnd = TRUE, bindtextdomain = TRUE, 
argv:     bindingIsLocked = TRUE, bindingIsActive = TRUE, bincode = TRUE, 
argv:     beta = TRUE, besselY = TRUE, besselK = TRUE, besselJ = TRUE, 
argv:     besselI = TRUE, bcVersion = TRUE, bcClose = TRUE, basename = TRUE, 
argv:     backsolve = TRUE, attach = TRUE, atan2 = TRUE, assign = TRUE, 
argv:     as.vector = TRUE, as.POSIXlt = TRUE, as.POSIXct = TRUE, as.function.default = TRUE, 
argv:     array = TRUE, args = TRUE, aregexec = TRUE, aperm = TRUE, 
argv:     anyDuplicated = TRUE, all.names = TRUE, agrepl = TRUE, agrep = TRUE, 
argv:     adist = TRUE, abbreviate = TRUE, .signalCondition = TRUE, 
argv:     .resetCondHands = TRUE, .invokeRestart = TRUE, .getRestart = TRUE, 
argv:     .dfltWarn = TRUE, .dfltStop = TRUE, .addTryHandlers = TRUE, 
argv:     .addRestart = TRUE, .addCondHands = TRUE), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(length(testr:::cache$decorated) > 
argv:     0)), .Names = c("pattern", "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpOXTHN2"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(all(check.dec))), .Names = c("pattern", 
argv: "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//RtmpOXTHN2"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: qr.X
argv: structure(list(qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = "qr")

func: qr.X
argv: structure(list(complete = TRUE, qr = structure(list(qr = structure(c(-256.257590716841, 
argv: 0.0910021823539584, 0.092875297599666, 0.163468328422269, 0.164639025450836, 
argv: 0.12378169915384, 0.155078333050871, 0.174628973427943, 0.182004364707917, 
argv: 0.185906688136474, 0.0952947381253715, 0.180716597976493, 0.108640684251038, 
argv: 0.0977922251196483, 0.0909631591196728, 0.0999775262396404, 0.179701993885068, 
argv: 0.184657944639336, 0.132796066273808, 0.161204980833706, 0.121596398033848, 
argv: 0.0956849704682273, 0.105401755805335, 0.162882979907986, 0.0850706507425512, 
argv: 0.126981604365258, 0.101265292971064, 0.0964264119196532, 0.127254767005257, 
argv: 0.175760647222225, 0.16998520854796, 0.160697678787993, 0.172443672307951, 
argv: 0.180521481805065, 0.113011286491022, 0.124640210308123, 0.124562163839552, 
argv: 0.108250451908182, 0.0836658143082705, 0.0916655773368131, 0.169438883267962, 
argv: 0.179975156525067, 0.0908070661825305, 0.116328261405296, 0.181067807085063, 
argv: 0.176580135142222, 0.16046353938228, 0.109772358045319, 0.170492510593672, 
argv: 0.184189665827909, -13.6470923269715, -12.5812467990703, 0.24271141565016, 
argv: -0.059815864473822, -0.127960893299261, 0.0807223160633477, -0.0761626106940114, 
argv: -0.152445623490524, -0.130134749055543, -0.128372715365346, 0.200119811772688, 
argv: -0.118285019792471, 0.0604052443697468, 0.258380165724089, 0.15912171890939, 
argv: 0.128632643807991, -0.142524575367435, -0.171412483560014, 0.0883852625911146, 
argv: -0.113583013916457, 0.18980415959698, 0.163892627837212, 0.0276580986709679, 
argv: -0.119533736566135, 0.196266323936956, 0.0467493902769001, 0.172421279420786, 
argv: 0.144738089856117, 0.102065990592073, -0.110857623766299, -0.10484943540987, 
argv: -0.105831947105416, -0.101386646184581, -0.123619024450991, 0.0934090330278216, 
argv: 0.0344055303308206, -0.025909904517065, 0.100606597224927, 0.262302649605452, 
argv: 0.188498008114506, -0.113743911695775, -0.115821991274136, 0.247532134390089, 
argv: 0.135602251402265, -0.141748896819079, -0.16348711340454, -0.0515074516025513, 
argv: 0.0868914021990941, -0.03629645896258, -0.164502216898726, -6266.27648261297, 
argv: -7208.73495639183, 4257.0956967569, 0.161153581159953, -0.0666058948066698, 
argv: -0.354194640123288, 0.00992026535965614, 0.0175272220759386, 
argv: 0.0676966345112974, 0.0317250863799039, -0.110762753474102, 0.0806948908086104, 
argv: -0.106635382710921, 0.0483916694388106, -0.171434069673772, 0.171347201608844, 
argv: 0.0416963342783801, 0.0203844572429076, -0.0719125454332961, 
argv: 0.0991711223989991, 0.239930941756069, 0.0950133503548808, -0.0624992757446346, 
argv: 0.0653080426980872, -0.124047653343603, 0.159655702758638, -0.0795218276160605, 
argv: -0.015028190646577, 0.0356800924244033, 0.0740908323613494, 0.0156394497347541, 
argv: 0.0790712801138994, 0.0649179586620098, 0.104154681496243, 0.21005961703244, 
argv: 0.124962936883512, 0.12748506146351, 0.167871037965378, -0.22628760645431, 
argv: -0.166513878539229, 0.0432051873470508, 0.0919840342128103, 0.113244943965022, 
argv: -0.523963701574521, -0.0776680874844886, 0.0398574303908612, 
argv: 0.123344642474946, 0.150388616828598, 0.224891354529006, 0.0275921815949457, 
argv: -25.4864052289351, -6.96192326221491, -4.69714951714602, 19.7347703156413, 
argv: -0.0780677495873489, -0.0126103815142669, 0.0401778246174945, 
argv: -0.154201986750251, 0.0478554313612997, 0.0598425153462238, -0.0335407094693889, 
argv: 0.098271081609676, -0.080992101911679, -0.00208995336388275, 
argv: -0.0388226344614589, -0.106982138356778, 0.115959115111397, 0.0209522016457856, 
argv: 0.129655427536607, 0.111727664097946, 0.123944974181632, 0.0219961001939136, 
argv: -0.284099089526537, -0.11194634177749, 0.0716591076182475, -0.196576736630819, 
argv: -0.00996066089695637, -0.21651966916782, 0.118336888591328, 0.0783422778590582, 
argv: 0.00298490030639905, 0.135240482689515, 0.167091516221032, 0.110900985365543, 
argv: -0.154851366992406, 0.0890059667786476, 0.0780005773817038, -0.00907424714860397, 
argv: -0.00234300978540227, 0.0109218523837168, 0.0381223978281005, 
argv: 0.154351389949161, 0.126448561961601, -0.0410886863899222, 0.140087712301976, 
argv: -0.081253561042103, -0.30259589497096, 0.109439464217469, -0.590549520702357, 
argv: -0.0714336348722801), .Dim = c(50, 4), .Dimnames = list(c("Australia", 
argv: "Austria", "Belgium", "Bolivia", "Brazil", "Canada", "Chile", 
argv: "China", "Colombia", "Costa Rica", "Denmark", "Ecuador", "Finland", 
argv: "France", "Germany", "Greece", "Guatamala", "Honduras", "Iceland", 
argv: "India", "Ireland", "Italy", "Japan", "Korea", "Luxembourg", 
argv: "Malta", "Norway", "Netherlands", "New Zealand", "Nicaragua", 
argv: "Panama", "Paraguay", "Peru", "Philippines", "Portugal", "South Africa", 
argv: "South Rhodesia", "Spain", "Sweden", "Switzerland", "Turkey", 
argv: "Tunisia", "United Kingdom", "United States", "Venezuela", "Zambia", 
argv: "Jamaica", "Uruguay", "Libya", "Malaysia"), c("pop15", "pop75", 
argv: "dpi", "ddpi"))), rank = 4, qraux = c(1.11453319262816, 1.24332813364132, 
argv: 1.04050419655983, 1.21384916017111), pivot = 1:4), .Names = c("qr", 
argv: "rank", "qraux", "pivot"), class = "qr")), .Names = c("complete", 
argv: "qr"))

func: svd
argv: structure(list(x = structure(c(1, 0.5, 0.333333333333333, 0.25, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.5, 0.333333333333333, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.333333333333333, 0.25, 0.2, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.25, 0.2, 0.166666666666667, 0.142857142857143, 
argv: 0.125, 0.111111111111111, 0.1, 0.0909090909090909, 0.0833333333333333, 
argv: 0.2, 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.166666666666667, 0.142857142857143, 0.125, 0.111111111111111, 
argv: 0.1, 0.0909090909090909, 0.0833333333333333, 0.0769230769230769, 
argv: 0.0714285714285714), .Dim = c(9, 6))), .Names = "x")

func: is.vector
argv: structure(list(x = c("xzfile", "writeLines", "writeChar", "writeBin", 
argv: "withVisible", "which.min", "which.max", "which", "warning", 
argv: "Version", "vector", "vapply", "utf8ToInt", "url", "unz", "unserializeFromConn", 
argv: "unserialize", "unregisterNamespace", "unlockBinding", "unlist", 
argv: "unlink", "unique", "undebug", "typeof", "truncate", "traceOnOff", 
argv: "traceback", "toupper", "tolower", "textConnectionValue", "textConnection", 
argv: "tempfile", "tempdir", "tcrossprod", "tabulate", "t.default", 
argv: "system", "Sys.unsetenv", "Sys.umask", "Sys.time", "Sys.sleep", 
argv: "Sys.setlocale", "Sys.setenv", "Sys.readlink", "sys.parents", 
argv: "sys.parent", "sys.on.exit", "sys.nframe", "Sys.localeconv", 
argv: "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", "Sys.getenv", 
argv: "sys.function", "sys.frames", "sys.frame", "Sys.chmod", "sys.calls", 
argv: "sys.call", "summary.connection", "substr<-", "substr", "sub", 
argv: "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: )), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "withVisible"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "withVisible"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "unique"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "unique"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("unique")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "undebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "undebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "typeof"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "typeof"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "truncate"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "truncate"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("truncate")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "traceback"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "traceback"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "textConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "textConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parents"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parents"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parents"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.parent"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.parent"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.parent"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.on.exit"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.on.exit"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.nframe"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.nframe"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.function"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.function"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.function"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frames"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frames"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frames"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.calls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.calls"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.calls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sys.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sys.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "sys.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stop"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdout"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdout"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stdin"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stdin"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "stderr"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "stderr"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sprintf"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sprintf"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "split"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "split"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, f, drop = FALSE, ...) 
argv: UseMethod("split")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sort"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sort"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, decreasing = FALSE, ...) 
argv: {
argv:     if (!is.logical(decreasing) || length(decreasing) != 1) 
argv:         stop("'decreasing' must be a length-1 logical vector.\nDid you intend to set 'partial'?")
argv:     UseMethod("sort")
argv: }), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "||"), .Names = "x")

func: grep
argv: structure(list(x = "!"), .Names = "x")

func: grep
argv: structure(list(x = "is.logical"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "!="), .Names = "x")

func: grep
argv: structure(list(x = "length"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "decreasing"), .Names = "x")

func: grep
argv: structure(list(x = "stop"), .Names = "x")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "sink"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "sink"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "setwd"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "setwd"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "seek"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "seek"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("seek")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "save"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "save"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "rawConnection"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "rawConnection"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "pretty"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "pretty"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("pretty")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste0"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste0"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "paste"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "paste"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.frame"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.frame"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.frame"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env<-"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env<-"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "parent.env"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "parent.env"), .Names = "x")

func: strsplit
argv: structure(list(x = "parent.env"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "options"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "options"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "open"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "open"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("open")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "NextMethod"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "NextMethod"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "merge"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "merge"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, y, ...) 
argv: UseMethod("merge")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "mean"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "mean"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("mean")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "match.call"), .Names = "x")

func: body
argv: structure(list(fun = function (x, table, nomatch = NA, incomparables = NULL) 
argv: .Internal(match(x, table, nomatch, incomparables))), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "match"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "match"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "ls"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "ls"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "load"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "load"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "get"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "get"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "format"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "format"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, ...) 
argv: UseMethod("format")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "formals"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "formals"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "flush"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "flush"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con) 
argv: UseMethod("flush")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "exists"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "exists"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "eval"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "eval"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "environment"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "environment"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "duplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "duplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("duplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "do.call"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "do.call"), .Names = "x")

func: strsplit
argv: structure(list(x = "do.call"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "detach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "detach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "deparse"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "deparse"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "delayedAssign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "delayedAssign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debugonce"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debugonce"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "debug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "debug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "close"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "close"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (con, ...) 
argv: UseMethod("close")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "clearPushBack"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "clearPushBack"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "cat"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "cat"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "builtins"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "builtins"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserText"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserText"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserSetDebug"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserSetDebug"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "browserCondition"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "browserCondition"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "bindingIsLocked"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "bindingIsLocked"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "attach"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "attach"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "assign"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "assign"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXlt"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXlt"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXlt")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "as.POSIXct"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: strsplit
argv: structure(list(x = "as.POSIXct"), .Names = "x")

func: body
argv: structure(list(fun = function (object, Class, strict = TRUE, 
argv:     ext = possibleExtends(thisClass, Class)) 
argv: {
argv:     if (.identC(Class, "double")) 
argv:         Class <- "numeric"
argv:     thisClass <- .class1(object)
argv:     if (.identC(thisClass, Class) || .identC(Class, "ANY")) 
argv:         return(object)
argv:     where <- .classEnv(thisClass, mustFind = FALSE)
argv:     coerceFun <- getGeneric("coerce", where = where)
argv:     coerceMethods <- .getMethodsTable(coerceFun, environment(coerceFun), 
argv:         inherited = TRUE)
argv:     asMethod <- .quickCoerceSelect(thisClass, Class, coerceFun, 
argv:         coerceMethods, where)
argv:     if (is.null(asMethod)) {
argv:         sig <- c(from = thisClass, to = Class)
argv:         asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:             useInherited = FALSE, fdef = coerceFun, mlist = getMethodsForDispatch(coerceFun))
argv:         if (is.null(asMethod)) {
argv:             canCache <- TRUE
argv:             inherited <- FALSE
argv:             if (is(object, Class)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 if (identical(ext, FALSE)) 
argv:                   stop(sprintf("internal problem in as(): %s is(object, \"%s\") is TRUE, but the metadata asserts that the 'is' relation is FALSE", 
argv:                     dQuote(thisClass), Class), domain = NA)
argv:                 else if (identical(ext, TRUE)) 
argv:                   asMethod <- .makeAsMethod(quote(from), TRUE, 
argv:                     Class, ClassDef, where)
argv:                 else {
argv:                   test <- ext@test
argv:                   asMethod <- .makeAsMethod(ext@coerce, ext@simple, 
argv:                     Class, ClassDef, where)
argv:                   canCache <- (!is(test, "function")) || identical(body(test), 
argv:                     TRUE)
argv:                 }
argv:             }
argv:             if (is.null(asMethod) && extends(Class, thisClass)) {
argv:                 ClassDef <- getClassDef(Class, where)
argv:                 asMethod <- .asFromReplace(thisClass, Class, 
argv:                   ClassDef, where)
argv:             }
argv:             if (is.null(asMethod)) {
argv:                 asMethod <- selectMethod("coerce", sig, optional = TRUE, 
argv:                   c(from = TRUE, to = FALSE), fdef = coerceFun, 
argv:                   mlist = coerceMethods)
argv:                 inherited <- TRUE
argv:             }
argv:             else if (canCache) 
argv:                 asMethod <- .asCoerceMethod(asMethod, thisClass, 
argv:                   ClassDef, FALSE, where)
argv:             if (is.null(asMethod)) 
argv:                 stop(gettextf("no method or default for coercing %s to %s", 
argv:                   dQuote(thisClass), dQuote(Class)), domain = NA)
argv:             else if (canCache) {
argv:                 cacheMethod("coerce", sig, asMethod, fdef = coerceFun, 
argv:                   inherited = inherited)
argv:             }
argv:         }
argv:     }
argv:     if (strict) 
argv:         asMethod(object)
argv:     else asMethod(object, strict = FALSE)
argv: }), .Names = "fun")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, tz = "", ...) 
argv: UseMethod("as.POSIXct")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "aperm"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "aperm"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (a, perm, ...) 
argv: UseMethod("aperm")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: search
argv: list()

func: which
argv: structure(list(x = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
argv: FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), .Names = "x")

func: is.vector
argv: structure(list(x = structure(12, .Names = "package:base")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (pos, x) 
argv: get(x, pos = pos), X = structure(12, .Names = "package:base"), 
argv:     "anyDuplicated"), .Names = c("FUN", "X", ""))

func: rep.int
argv: structure(list(times = 1), .Names = "times")

func: grep
argv: structure(list(x = "anyDuplicated"), .Names = "x")

func: rep.int
argv: structure(list(times = 2), .Names = "times")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = c("expression", "quote", "Quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (v, env) 
argv: {
argv:     e <- findOwnerEnv(v, env)
argv:     is.baseenv(e) || identical(e, .BaseNamespaceEnv) || v == 
argv:         "@<-"
argv: }, X = c("expression", "quote", "Quote", "local"), <environment>), .Names = c("FUN", 
argv: "X", ""))

func: unlist
argv: structure(list(x = structure(list(expression = 1, quote = 1, 
argv:     Quote = 1, local = 1), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(expression = TRUE, quote = TRUE, 
argv:     Quote = FALSE, local = TRUE), .Names = c("expression", "quote", 
argv: "Quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: body
argv: structure(list(fun = function (x, incomparables = FALSE, ...) 
argv: UseMethod("anyDuplicated")), .Names = "fun")

func: is.vector
argv: structure(list(x = c("Quote", "expression", "quote", "local")), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = c("Quote", "expression", 
argv: "quote", "local"), <environment>, FALSE), .Names = c("FUN", "X", 
argv: "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1, expression = 1, 
argv:     quote = 1, local = 1), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE, expression = FALSE, 
argv:     quote = FALSE, local = FALSE), .Names = c("Quote", "expression", 
argv: "quote", "local"))), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: is.vector
argv: structure(list(x = "Quote"), .Names = "x")

func: lapply
argv: structure(list(FUN = function (x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), 
argv:     frame, mode = "any", inherits = TRUE) 
argv: .Internal(exists(x, envir, mode, inherits)), X = "Quote", <environment>, 
argv:     FALSE), .Names = c("FUN", "X", "", ""))

func: unlist
argv: structure(list(x = structure(list(Quote = 1), .Names = "Quote")), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(Quote = FALSE), .Names = "Quote")), .Names = "x")

func: new.env
argv: structure(list(parent = <environment>), .Names = "parent")

func: grep
argv: structure(list(x = "UseMethod"), .Names = "x")

func: lapply
argv: structure(c(TRUE, TRUE, FALSE, TRUE), .Names = c("expression", 
argv: "quote", "Quote", "local"))

func: unlist
argv: structure(list(x = structure(list(xzfile = 1, writeLines = 1, 
argv:     writeChar = 1, writeBin = 1, withVisible = 1, which.min = 1, 
argv:     which.max = 1, which = 1, warning = 1, Version = 1, vector = 1, 
argv:     vapply = 1, utf8ToInt = 1, url = 1, unz = 1, unserializeFromConn = 1, 
argv:     unserialize = 1, unregisterNamespace = 1, unlockBinding = 1, 
argv:     unlist = 1, unlink = 1, unique = 1, undebug = 1, typeof = 1, 
argv:     truncate = 1, traceOnOff = 1, traceback = 1, toupper = 1, 
argv:     tolower = 1, textConnectionValue = 1, textConnection = 1, 
argv:     tempfile = 1, tempdir = 1, tcrossprod = 1, tabulate = 1, 
argv:     t.default = 1, system = 1, Sys.unsetenv = 1, Sys.umask = 1, 
argv:     Sys.time = 1, Sys.sleep = 1, Sys.setlocale = 1, Sys.setenv = 1, 
argv:     Sys.readlink = 1, sys.parents = 1, sys.parent = 1, sys.on.exit = 1, 
argv:     sys.nframe = 1, Sys.localeconv = 1, Sys.info = 1, Sys.glob = 1, 
argv:     Sys.getpid = 1, Sys.getlocale = 1, Sys.getenv = 1, sys.function = 1, 
argv:     sys.frames = 1, sys.frame = 1, Sys.chmod = 1, sys.calls = 1, 
argv:     sys.call = 1, summary.connection = 1, "substr<-" = 1, substr = 1, 
argv:     sub = 1, strtrim = 1, strtoi = 1, strsplit = 1, strptime = 1, 
argv:     stop = 1, stdout = 1, stdin = 1, stderr = 1, sprintf = 1, 
argv:     split = 1, sort = 1, sockSelect = 1, socketConnection = 1, 
argv:     sink.number = 1, sink = 1, shortRowNames = 1, setwd = 1, 
argv:     setTimeLimit = 1, setSessionTimeLimit = 1, setS4Object = 1, 
argv:     setNumMathThreads = 1, setMaxNumMathThreads = 1, setFileTime = 1, 
argv:     seterrmessage = 1, setEncoding = 1, set.seed = 1, serializeToConn = 1, 
argv:     serializeb = 1, serialize = 1, seek = 1, search = 1, scan = 1, 
argv:     saveToConn = 1, save.to.file = 1, save = 1, sample2 = 1, 
argv:     sample = 1, rwilcox = 1, rweibull = 1, runif = 1, rt = 1, 
argv:     rsignrank = 1, rpois = 1, rowSums = 1, rowsum_matrix = 1, 
argv:     rowsum_df = 1, rowMeans = 1, row = 1, rnorm = 1, RNGkind = 1, 
argv:     rnchisq = 1, rnbinom_mu = 1, rnbinom = 1, rlogis = 1, rlnorm = 1, 
argv:     rhyper = 1, rgeom = 1, rgamma = 1, rf = 1, rexp = 1, restart = 1, 
argv:     rep.int = 1, rep_len = 1, remove = 1, registerNamespace = 1, 
argv:     regexpr = 1, regexec = 1, reg.finalizer = 1, recordGraphics = 1, 
argv:     Recall = 1, readRenviron = 1, readLines = 1, readline = 1, 
argv:     readDCF = 1, readChar = 1, readBin = 1, rchisq = 1, rcauchy = 1, 
argv:     rbinom = 1, rbind = 1, rbeta = 1, rawToChar = 1, rawToBits = 1, 
argv:     rawShift = 1, rawConnectionValue = 1, rawConnection = 1, 
argv:     rapply = 1, rank = 1, radixsort = 1, R.home = 1, qwilcox = 1, 
argv:     qweibull = 1, qunif = 1, quit = 1, qtukey = 1, qt = 1, qsort = 1, 
argv:     qsignrank = 1, qr_qy_real = 1, qr_qy_cmpl = 1, qr_coef_real = 1, 
argv:     qr_coef_cmplx = 1, qpois = 1, qnt = 1, qnorm = 1, qnf = 1, 
argv:     qnchisq = 1, qnbinom_mu = 1, qnbinom = 1, qnbeta = 1, qlogis = 1, 
argv:     qlnorm = 1, qhyper = 1, qgeom = 1, qgamma = 1, qf = 1, qexp = 1, 
argv:     qchisq = 1, qcauchy = 1, qbinom = 1, qbeta = 1, pwilcox = 1, 
argv:     pweibull = 1, putconst = 1, pushBackLength = 1, pushBack = 1, 
argv:     punif = 1, ptukey = 1, pt = 1, psort = 1, psignrank = 1, 
argv:     psigamma = 1, prmatrix = 1, printDeferredWarnings = 1, print.function = 1, 
argv:     print.default = 1, pretty = 1, ppois = 1, POSIXlt2Date = 1, 
argv:     polyroot = 1, pnt = 1, pnorm = 1, pnf = 1, pnchisq = 1, pnbinom_mu = 1, 
argv:     pnbinom = 1, pnbeta = 1, pmin = 1, pmax = 1, pmatch = 1, 
argv:     plogis = 1, plnorm = 1, pipe = 1, phyper = 1, pgeom = 1, 
argv:     pgamma = 1, pf = 1, pexp = 1, pchisq = 1, pcauchy = 1, pbinom = 1, 
argv:     pbeta = 1, path.expand = 1, paste0 = 1, paste = 1, parse = 1, 
argv:     parent.frame = 1, "parent.env<-" = 1, parent.env = 1, packBits = 1, 
argv:     order = 1, options = 1, open = 1, normalizePath = 1, ngettext = 1, 
argv:     NextMethod = 1, new.env = 1, nchar = 1, mkUnbound = 1, mkCode = 1, 
argv:     mget = 1, merge = 1, memory.profile = 1, memDecompress = 1, 
argv:     memCompress = 1, mem.limits = 1, mean = 1, max.col = 1, matrix = 1, 
argv:     match.call = 1, match = 1, mapply = 1, makeLazy = 1, makeActiveBinding = 1, 
argv:     make.unique = 1, make.names = 1, machine = 1, ls = 1, lockEnvironment = 1, 
argv:     lockBinding = 1, loadFromConn2 = 1, load.from.file = 1, load = 1, 
argv:     list2env = 1, list.files = 1, list.dirs = 1, lchoose = 1, 
argv:     lbeta = 1, lazyLoadDBinsertValue = 1, lazyLoadDBflush = 1, 
argv:     lapply = 1, La_ztrcon = 1, La_zgecon = 1, La_version = 1, 
argv:     La_svd_cmplx = 1, La_svd = 1, La_solve_cmplx = 1, La_solve = 1, 
argv:     La_rs_cmplx = 1, La_rs = 1, La_rg_cmplx = 1, La_rg = 1, La_qr_cmplx = 1, 
argv:     La_qr = 1, La_dtrcon = 1, La_dlange = 1, La_dgecon = 1, La_chol2inv = 1, 
argv:     La_chol = 1, l10n_info = 1, isSeekable = 1, isOpen = 1, isNamespaceEnv = 1, 
argv:     islistfactor = 1, isIncomplete = 1, isdebugged = 1, isatty = 1, 
argv:     is.vector = 1, is.unsorted = 1, is.loaded = 1, is.builtin.internal = 1, 
argv:     intToUtf8 = 1, intToBits = 1, interruptsSuspended = 1, inspect = 1, 
argv:     inherits = 1, importIntoEnv = 1, identical = 1, icuSetCollate = 1, 
argv:     icuGetCollate = 1, iconv = 1, gzfile = 1, gzcon = 1, gsub = 1, 
argv:     growconst = 1, grepRaw = 1, grepl = 1, grep = 1, gregexpr = 1, 
argv:     getwd = 1, getVarsFromFrame = 1, gettext = 1, getSymbolInfo = 1, 
argv:     getRegisteredRoutines = 1, getRegisteredNamespace = 1, getNamespaceRegistry = 1, 
argv:     getLoadedDLLs = 1, geterrmessage = 1, getconst = 1, getConnection = 1, 
argv:     getAllConnections = 1, get = 1, gctorture2 = 1, gctorture = 1, 
argv:     gcinfo = 1, gc = 1, formatC = 1, format.POSIXlt = 1, format.info = 1, 
argv:     format = 1, formals = 1, flush = 1, findInterval = 1, file.symlink = 1, 
argv:     file.show = 1, file.rename = 1, file.remove = 1, file.path = 1, 
argv:     file.link = 1, file.info = 1, file.exists = 1, file.create = 1, 
argv:     file.copy = 1, file.choose = 1, file.append = 1, file.access = 1, 
argv:     file = 1, fifo = 1, exists = 1, eval = 1, environmentName = 1, 
argv:     environmentIsLocked = 1, environment = 1, env2list = 1, env.profile = 1, 
argv:     Encoding = 1, encodeString = 1, enableJIT = 1, eapply = 1, 
argv:     dyn.unload = 1, dyn.load = 1, dwilcox = 1, dweibull = 1, 
argv:     duplicated = 1, dunif = 1, dump = 1, dtukey = 1, dt = 1, 
argv:     dsignrank = 1, drop = 1, dput = 1, dpois = 1, do.call = 1, 
argv:     dnt = 1, dnorm = 1, dnf = 1, dnchisq = 1, dnbinom_mu = 1, 
argv:     dnbinom = 1, dnbeta = 1, dlogis = 1, dlnorm = 1, disassemble = 1, 
argv:     dirname = 1, dir.create = 1, diag = 1, dhyper = 1, dgeom = 1, 
argv:     dgamma = 1, df = 1, dexp = 1, detach = 1, det_ge_real = 1, 
argv:     deparse = 1, delayedAssign = 1, debugonce = 1, debug = 1, 
argv:     dchisq = 1, dcauchy = 1, dbinom = 1, dbeta = 1, Date2POSIXlt = 1, 
argv:     date = 1, Cstack_info = 1, crossprod = 1, crc64 = 1, copyDFattr = 1, 
argv:     complex = 1, compilePKGS = 1, "comment<-" = 1, comment = 1, 
argv:     commandArgs = 1, colSums = 1, colMeans = 1, col = 1, close = 1, 
argv:     clearPushBack = 1, choose = 1, chartr = 1, charToRaw = 1, 
argv:     charmatch = 1, cbind = 1, cat = 1, capabilitiesX11 = 1, capabilities = 1, 
argv:     bzfile = 1, builtins = 1, browserText = 1, browserSetDebug = 1, 
argv:     browserCondition = 1, bodyCode = 1, body = 1, bitwiseXor = 1, 
argv:     bitwiseShiftR = 1, bitwiseShiftL = 1, bitwiseOr = 1, bitwiseNot = 1, 
argv:     bitwiseAnd = 1, bindtextdomain = 1, bindingIsLocked = 1, 
argv:     bindingIsActive = 1, bincode = 1, beta = 1, besselY = 1, 
argv:     besselK = 1, besselJ = 1, besselI = 1, bcVersion = 1, bcClose = 1, 
argv:     basename = 1, backsolve = 1, attach = 1, atan2 = 1, assign = 1, 
argv:     as.vector = 1, as.POSIXlt = 1, as.POSIXct = 1, as.function.default = 1, 
argv:     array = 1, args = 1, aregexec = 1, aperm = 1, anyDuplicated = 1, 
argv:     all.names = 1, agrepl = 1, agrep = 1, adist = 1, abbreviate = 1, 
argv:     .signalCondition = 1, .resetCondHands = 1, .invokeRestart = 1, 
argv:     .getRestart = 1, .dfltWarn = 1, .dfltStop = 1, .addTryHandlers = 1, 
argv:     .addRestart = 1, .addCondHands = 1), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: unlist
argv: structure(list(x = structure(list(xzfile = TRUE, writeLines = TRUE, 
argv:     writeChar = TRUE, writeBin = TRUE, withVisible = TRUE, which.min = TRUE, 
argv:     which.max = TRUE, which = TRUE, warning = TRUE, Version = TRUE, 
argv:     vector = TRUE, vapply = TRUE, utf8ToInt = TRUE, url = TRUE, 
argv:     unz = TRUE, unserializeFromConn = TRUE, unserialize = TRUE, 
argv:     unregisterNamespace = TRUE, unlockBinding = TRUE, unlist = TRUE, 
argv:     unlink = TRUE, unique = TRUE, undebug = TRUE, typeof = TRUE, 
argv:     truncate = TRUE, traceOnOff = TRUE, traceback = TRUE, toupper = TRUE, 
argv:     tolower = TRUE, textConnectionValue = TRUE, textConnection = TRUE, 
argv:     tempfile = TRUE, tempdir = TRUE, tcrossprod = TRUE, tabulate = TRUE, 
argv:     t.default = TRUE, system = TRUE, Sys.unsetenv = TRUE, Sys.umask = TRUE, 
argv:     Sys.time = TRUE, Sys.sleep = TRUE, Sys.setlocale = TRUE, 
argv:     Sys.setenv = TRUE, Sys.readlink = TRUE, sys.parents = TRUE, 
argv:     sys.parent = TRUE, sys.on.exit = TRUE, sys.nframe = TRUE, 
argv:     Sys.localeconv = TRUE, Sys.info = TRUE, Sys.glob = TRUE, 
argv:     Sys.getpid = TRUE, Sys.getlocale = TRUE, Sys.getenv = TRUE, 
argv:     sys.function = TRUE, sys.frames = TRUE, sys.frame = TRUE, 
argv:     Sys.chmod = TRUE, sys.calls = TRUE, sys.call = TRUE, summary.connection = TRUE, 
argv:     "substr<-" = TRUE, substr = TRUE, sub = TRUE, strtrim = TRUE, 
argv:     strtoi = TRUE, strsplit = TRUE, strptime = TRUE, stop = TRUE, 
argv:     stdout = TRUE, stdin = TRUE, stderr = TRUE, sprintf = TRUE, 
argv:     split = TRUE, sort = TRUE, sockSelect = TRUE, socketConnection = TRUE, 
argv:     sink.number = TRUE, sink = TRUE, shortRowNames = TRUE, setwd = TRUE, 
argv:     setTimeLimit = TRUE, setSessionTimeLimit = TRUE, setS4Object = TRUE, 
argv:     setNumMathThreads = TRUE, setMaxNumMathThreads = TRUE, setFileTime = TRUE, 
argv:     seterrmessage = TRUE, setEncoding = TRUE, set.seed = TRUE, 
argv:     serializeToConn = TRUE, serializeb = TRUE, serialize = TRUE, 
argv:     seek = TRUE, search = TRUE, scan = TRUE, saveToConn = TRUE, 
argv:     save.to.file = TRUE, save = TRUE, sample2 = TRUE, sample = TRUE, 
argv:     rwilcox = TRUE, rweibull = TRUE, runif = TRUE, rt = TRUE, 
argv:     rsignrank = TRUE, rpois = TRUE, rowSums = TRUE, rowsum_matrix = TRUE, 
argv:     rowsum_df = TRUE, rowMeans = TRUE, row = TRUE, rnorm = TRUE, 
argv:     RNGkind = TRUE, rnchisq = TRUE, rnbinom_mu = TRUE, rnbinom = TRUE, 
argv:     rlogis = TRUE, rlnorm = TRUE, rhyper = TRUE, rgeom = TRUE, 
argv:     rgamma = TRUE, rf = TRUE, rexp = TRUE, restart = TRUE, rep.int = TRUE, 
argv:     rep_len = TRUE, remove = TRUE, registerNamespace = TRUE, 
argv:     regexpr = TRUE, regexec = TRUE, reg.finalizer = TRUE, recordGraphics = TRUE, 
argv:     Recall = TRUE, readRenviron = TRUE, readLines = TRUE, readline = TRUE, 
argv:     readDCF = TRUE, readChar = TRUE, readBin = TRUE, rchisq = TRUE, 
argv:     rcauchy = TRUE, rbinom = TRUE, rbind = TRUE, rbeta = TRUE, 
argv:     rawToChar = TRUE, rawToBits = TRUE, rawShift = TRUE, rawConnectionValue = TRUE, 
argv:     rawConnection = TRUE, rapply = TRUE, rank = TRUE, radixsort = TRUE, 
argv:     R.home = TRUE, qwilcox = TRUE, qweibull = TRUE, qunif = TRUE, 
argv:     quit = TRUE, qtukey = TRUE, qt = TRUE, qsort = TRUE, qsignrank = TRUE, 
argv:     qr_qy_real = TRUE, qr_qy_cmpl = TRUE, qr_coef_real = TRUE, 
argv:     qr_coef_cmplx = TRUE, qpois = TRUE, qnt = TRUE, qnorm = TRUE, 
argv:     qnf = TRUE, qnchisq = TRUE, qnbinom_mu = TRUE, qnbinom = TRUE, 
argv:     qnbeta = TRUE, qlogis = TRUE, qlnorm = TRUE, qhyper = TRUE, 
argv:     qgeom = TRUE, qgamma = TRUE, qf = TRUE, qexp = TRUE, qchisq = TRUE, 
argv:     qcauchy = TRUE, qbinom = TRUE, qbeta = TRUE, pwilcox = TRUE, 
argv:     pweibull = TRUE, putconst = TRUE, pushBackLength = TRUE, 
argv:     pushBack = TRUE, punif = TRUE, ptukey = TRUE, pt = TRUE, 
argv:     psort = TRUE, psignrank = TRUE, psigamma = TRUE, prmatrix = TRUE, 
argv:     printDeferredWarnings = TRUE, print.function = TRUE, print.default = TRUE, 
argv:     pretty = TRUE, ppois = TRUE, POSIXlt2Date = TRUE, polyroot = TRUE, 
argv:     pnt = TRUE, pnorm = TRUE, pnf = TRUE, pnchisq = TRUE, pnbinom_mu = TRUE, 
argv:     pnbinom = TRUE, pnbeta = TRUE, pmin = TRUE, pmax = TRUE, 
argv:     pmatch = TRUE, plogis = TRUE, plnorm = TRUE, pipe = TRUE, 
argv:     phyper = TRUE, pgeom = TRUE, pgamma = TRUE, pf = TRUE, pexp = TRUE, 
argv:     pchisq = TRUE, pcauchy = TRUE, pbinom = TRUE, pbeta = TRUE, 
argv:     path.expand = TRUE, paste0 = TRUE, paste = TRUE, parse = TRUE, 
argv:     parent.frame = TRUE, "parent.env<-" = TRUE, parent.env = TRUE, 
argv:     packBits = TRUE, order = TRUE, options = TRUE, open = TRUE, 
argv:     normalizePath = TRUE, ngettext = TRUE, NextMethod = TRUE, 
argv:     new.env = TRUE, nchar = TRUE, mkUnbound = TRUE, mkCode = TRUE, 
argv:     mget = TRUE, merge = TRUE, memory.profile = TRUE, memDecompress = TRUE, 
argv:     memCompress = TRUE, mem.limits = TRUE, mean = TRUE, max.col = TRUE, 
argv:     matrix = TRUE, match.call = TRUE, match = TRUE, mapply = TRUE, 
argv:     makeLazy = TRUE, makeActiveBinding = TRUE, make.unique = TRUE, 
argv:     make.names = TRUE, machine = TRUE, ls = TRUE, lockEnvironment = TRUE, 
argv:     lockBinding = TRUE, loadFromConn2 = TRUE, load.from.file = TRUE, 
argv:     load = TRUE, list2env = TRUE, list.files = TRUE, list.dirs = TRUE, 
argv:     lchoose = TRUE, lbeta = TRUE, lazyLoadDBinsertValue = TRUE, 
argv:     lazyLoadDBflush = TRUE, lapply = TRUE, La_ztrcon = TRUE, 
argv:     La_zgecon = TRUE, La_version = TRUE, La_svd_cmplx = TRUE, 
argv:     La_svd = TRUE, La_solve_cmplx = TRUE, La_solve = TRUE, La_rs_cmplx = TRUE, 
argv:     La_rs = TRUE, La_rg_cmplx = TRUE, La_rg = TRUE, La_qr_cmplx = TRUE, 
argv:     La_qr = TRUE, La_dtrcon = TRUE, La_dlange = TRUE, La_dgecon = TRUE, 
argv:     La_chol2inv = TRUE, La_chol = TRUE, l10n_info = TRUE, isSeekable = TRUE, 
argv:     isOpen = TRUE, isNamespaceEnv = TRUE, islistfactor = TRUE, 
argv:     isIncomplete = TRUE, isdebugged = TRUE, isatty = TRUE, is.vector = TRUE, 
argv:     is.unsorted = TRUE, is.loaded = TRUE, is.builtin.internal = TRUE, 
argv:     intToUtf8 = TRUE, intToBits = TRUE, interruptsSuspended = TRUE, 
argv:     inspect = TRUE, inherits = TRUE, importIntoEnv = TRUE, identical = TRUE, 
argv:     icuSetCollate = TRUE, icuGetCollate = TRUE, iconv = TRUE, 
argv:     gzfile = TRUE, gzcon = TRUE, gsub = TRUE, growconst = TRUE, 
argv:     grepRaw = TRUE, grepl = TRUE, grep = TRUE, gregexpr = TRUE, 
argv:     getwd = TRUE, getVarsFromFrame = TRUE, gettext = TRUE, getSymbolInfo = TRUE, 
argv:     getRegisteredRoutines = TRUE, getRegisteredNamespace = TRUE, 
argv:     getNamespaceRegistry = TRUE, getLoadedDLLs = TRUE, geterrmessage = TRUE, 
argv:     getconst = TRUE, getConnection = TRUE, getAllConnections = TRUE, 
argv:     get = TRUE, gctorture2 = TRUE, gctorture = TRUE, gcinfo = TRUE, 
argv:     gc = TRUE, formatC = TRUE, format.POSIXlt = TRUE, format.info = TRUE, 
argv:     format = TRUE, formals = TRUE, flush = TRUE, findInterval = TRUE, 
argv:     file.symlink = TRUE, file.show = TRUE, file.rename = TRUE, 
argv:     file.remove = TRUE, file.path = TRUE, file.link = TRUE, file.info = TRUE, 
argv:     file.exists = TRUE, file.create = TRUE, file.copy = TRUE, 
argv:     file.choose = TRUE, file.append = TRUE, file.access = TRUE, 
argv:     file = TRUE, fifo = TRUE, exists = TRUE, eval = TRUE, environmentName = TRUE, 
argv:     environmentIsLocked = TRUE, environment = TRUE, env2list = TRUE, 
argv:     env.profile = TRUE, Encoding = TRUE, encodeString = TRUE, 
argv:     enableJIT = TRUE, eapply = TRUE, dyn.unload = TRUE, dyn.load = TRUE, 
argv:     dwilcox = TRUE, dweibull = TRUE, duplicated = TRUE, dunif = TRUE, 
argv:     dump = TRUE, dtukey = TRUE, dt = TRUE, dsignrank = TRUE, 
argv:     drop = TRUE, dput = TRUE, dpois = TRUE, do.call = TRUE, dnt = TRUE, 
argv:     dnorm = TRUE, dnf = TRUE, dnchisq = TRUE, dnbinom_mu = TRUE, 
argv:     dnbinom = TRUE, dnbeta = TRUE, dlogis = TRUE, dlnorm = TRUE, 
argv:     disassemble = TRUE, dirname = TRUE, dir.create = TRUE, diag = TRUE, 
argv:     dhyper = TRUE, dgeom = TRUE, dgamma = TRUE, df = TRUE, dexp = TRUE, 
argv:     detach = TRUE, det_ge_real = TRUE, deparse = TRUE, delayedAssign = TRUE, 
argv:     debugonce = TRUE, debug = TRUE, dchisq = TRUE, dcauchy = TRUE, 
argv:     dbinom = TRUE, dbeta = TRUE, Date2POSIXlt = TRUE, date = TRUE, 
argv:     Cstack_info = TRUE, crossprod = TRUE, crc64 = TRUE, copyDFattr = TRUE, 
argv:     complex = TRUE, compilePKGS = TRUE, "comment<-" = TRUE, comment = TRUE, 
argv:     commandArgs = TRUE, colSums = TRUE, colMeans = TRUE, col = TRUE, 
argv:     close = TRUE, clearPushBack = TRUE, choose = TRUE, chartr = TRUE, 
argv:     charToRaw = TRUE, charmatch = TRUE, cbind = TRUE, cat = TRUE, 
argv:     capabilitiesX11 = TRUE, capabilities = TRUE, bzfile = TRUE, 
argv:     builtins = TRUE, browserText = TRUE, browserSetDebug = TRUE, 
argv:     browserCondition = TRUE, bodyCode = TRUE, body = TRUE, bitwiseXor = TRUE, 
argv:     bitwiseShiftR = TRUE, bitwiseShiftL = TRUE, bitwiseOr = TRUE, 
argv:     bitwiseNot = TRUE, bitwiseAnd = TRUE, bindtextdomain = TRUE, 
argv:     bindingIsLocked = TRUE, bindingIsActive = TRUE, bincode = TRUE, 
argv:     beta = TRUE, besselY = TRUE, besselK = TRUE, besselJ = TRUE, 
argv:     besselI = TRUE, bcVersion = TRUE, bcClose = TRUE, basename = TRUE, 
argv:     backsolve = TRUE, attach = TRUE, atan2 = TRUE, assign = TRUE, 
argv:     as.vector = TRUE, as.POSIXlt = TRUE, as.POSIXct = TRUE, as.function.default = TRUE, 
argv:     array = TRUE, args = TRUE, aregexec = TRUE, aperm = TRUE, 
argv:     anyDuplicated = TRUE, all.names = TRUE, agrepl = TRUE, agrep = TRUE, 
argv:     adist = TRUE, abbreviate = TRUE, .signalCondition = TRUE, 
argv:     .resetCondHands = TRUE, .invokeRestart = TRUE, .getRestart = TRUE, 
argv:     .dfltWarn = TRUE, .dfltStop = TRUE, .addTryHandlers = TRUE, 
argv:     .addRestart = TRUE, .addCondHands = TRUE), .Names = c("xzfile", 
argv: "writeLines", "writeChar", "writeBin", "withVisible", "which.min", 
argv: "which.max", "which", "warning", "Version", "vector", "vapply", 
argv: "utf8ToInt", "url", "unz", "unserializeFromConn", "unserialize", 
argv: "unregisterNamespace", "unlockBinding", "unlist", "unlink", "unique", 
argv: "undebug", "typeof", "truncate", "traceOnOff", "traceback", "toupper", 
argv: "tolower", "textConnectionValue", "textConnection", "tempfile", 
argv: "tempdir", "tcrossprod", "tabulate", "t.default", "system", "Sys.unsetenv", 
argv: "Sys.umask", "Sys.time", "Sys.sleep", "Sys.setlocale", "Sys.setenv", 
argv: "Sys.readlink", "sys.parents", "sys.parent", "sys.on.exit", "sys.nframe", 
argv: "Sys.localeconv", "Sys.info", "Sys.glob", "Sys.getpid", "Sys.getlocale", 
argv: "Sys.getenv", "sys.function", "sys.frames", "sys.frame", "Sys.chmod", 
argv: "sys.calls", "sys.call", "summary.connection", "substr<-", "substr", 
argv: "sub", "strtrim", "strtoi", "strsplit", "strptime", "stop", "stdout", 
argv: "stdin", "stderr", "sprintf", "split", "sort", "sockSelect", 
argv: "socketConnection", "sink.number", "sink", "shortRowNames", "setwd", 
argv: "setTimeLimit", "setSessionTimeLimit", "setS4Object", "setNumMathThreads", 
argv: "setMaxNumMathThreads", "setFileTime", "seterrmessage", "setEncoding", 
argv: "set.seed", "serializeToConn", "serializeb", "serialize", "seek", 
argv: "search", "scan", "saveToConn", "save.to.file", "save", "sample2", 
argv: "sample", "rwilcox", "rweibull", "runif", "rt", "rsignrank", 
argv: "rpois", "rowSums", "rowsum_matrix", "rowsum_df", "rowMeans", 
argv: "row", "rnorm", "RNGkind", "rnchisq", "rnbinom_mu", "rnbinom", 
argv: "rlogis", "rlnorm", "rhyper", "rgeom", "rgamma", "rf", "rexp", 
argv: "restart", "rep.int", "rep_len", "remove", "registerNamespace", 
argv: "regexpr", "regexec", "reg.finalizer", "recordGraphics", "Recall", 
argv: "readRenviron", "readLines", "readline", "readDCF", "readChar", 
argv: "readBin", "rchisq", "rcauchy", "rbinom", "rbind", "rbeta", "rawToChar", 
argv: "rawToBits", "rawShift", "rawConnectionValue", "rawConnection", 
argv: "rapply", "rank", "radixsort", "R.home", "qwilcox", "qweibull", 
argv: "qunif", "quit", "qtukey", "qt", "qsort", "qsignrank", "qr_qy_real", 
argv: "qr_qy_cmpl", "qr_coef_real", "qr_coef_cmplx", "qpois", "qnt", 
argv: "qnorm", "qnf", "qnchisq", "qnbinom_mu", "qnbinom", "qnbeta", 
argv: "qlogis", "qlnorm", "qhyper", "qgeom", "qgamma", "qf", "qexp", 
argv: "qchisq", "qcauchy", "qbinom", "qbeta", "pwilcox", "pweibull", 
argv: "putconst", "pushBackLength", "pushBack", "punif", "ptukey", 
argv: "pt", "psort", "psignrank", "psigamma", "prmatrix", "printDeferredWarnings", 
argv: "print.function", "print.default", "pretty", "ppois", "POSIXlt2Date", 
argv: "polyroot", "pnt", "pnorm", "pnf", "pnchisq", "pnbinom_mu", "pnbinom", 
argv: "pnbeta", "pmin", "pmax", "pmatch", "plogis", "plnorm", "pipe", 
argv: "phyper", "pgeom", "pgamma", "pf", "pexp", "pchisq", "pcauchy", 
argv: "pbinom", "pbeta", "path.expand", "paste0", "paste", "parse", 
argv: "parent.frame", "parent.env<-", "parent.env", "packBits", "order", 
argv: "options", "open", "normalizePath", "ngettext", "NextMethod", 
argv: "new.env", "nchar", "mkUnbound", "mkCode", "mget", "merge", "memory.profile", 
argv: "memDecompress", "memCompress", "mem.limits", "mean", "max.col", 
argv: "matrix", "match.call", "match", "mapply", "makeLazy", "makeActiveBinding", 
argv: "make.unique", "make.names", "machine", "ls", "lockEnvironment", 
argv: "lockBinding", "loadFromConn2", "load.from.file", "load", "list2env", 
argv: "list.files", "list.dirs", "lchoose", "lbeta", "lazyLoadDBinsertValue", 
argv: "lazyLoadDBflush", "lapply", "La_ztrcon", "La_zgecon", "La_version", 
argv: "La_svd_cmplx", "La_svd", "La_solve_cmplx", "La_solve", "La_rs_cmplx", 
argv: "La_rs", "La_rg_cmplx", "La_rg", "La_qr_cmplx", "La_qr", "La_dtrcon", 
argv: "La_dlange", "La_dgecon", "La_chol2inv", "La_chol", "l10n_info", 
argv: "isSeekable", "isOpen", "isNamespaceEnv", "islistfactor", "isIncomplete", 
argv: "isdebugged", "isatty", "is.vector", "is.unsorted", "is.loaded", 
argv: "is.builtin.internal", "intToUtf8", "intToBits", "interruptsSuspended", 
argv: "inspect", "inherits", "importIntoEnv", "identical", "icuSetCollate", 
argv: "icuGetCollate", "iconv", "gzfile", "gzcon", "gsub", "growconst", 
argv: "grepRaw", "grepl", "grep", "gregexpr", "getwd", "getVarsFromFrame", 
argv: "gettext", "getSymbolInfo", "getRegisteredRoutines", "getRegisteredNamespace", 
argv: "getNamespaceRegistry", "getLoadedDLLs", "geterrmessage", "getconst", 
argv: "getConnection", "getAllConnections", "get", "gctorture2", "gctorture", 
argv: "gcinfo", "gc", "formatC", "format.POSIXlt", "format.info", "format", 
argv: "formals", "flush", "findInterval", "file.symlink", "file.show", 
argv: "file.rename", "file.remove", "file.path", "file.link", "file.info", 
argv: "file.exists", "file.create", "file.copy", "file.choose", "file.append", 
argv: "file.access", "file", "fifo", "exists", "eval", "environmentName", 
argv: "environmentIsLocked", "environment", "env2list", "env.profile", 
argv: "Encoding", "encodeString", "enableJIT", "eapply", "dyn.unload", 
argv: "dyn.load", "dwilcox", "dweibull", "duplicated", "dunif", "dump", 
argv: "dtukey", "dt", "dsignrank", "drop", "dput", "dpois", "do.call", 
argv: "dnt", "dnorm", "dnf", "dnchisq", "dnbinom_mu", "dnbinom", "dnbeta", 
argv: "dlogis", "dlnorm", "disassemble", "dirname", "dir.create", "diag", 
argv: "dhyper", "dgeom", "dgamma", "df", "dexp", "detach", "det_ge_real", 
argv: "deparse", "delayedAssign", "debugonce", "debug", "dchisq", "dcauchy", 
argv: "dbinom", "dbeta", "Date2POSIXlt", "date", "Cstack_info", "crossprod", 
argv: "crc64", "copyDFattr", "complex", "compilePKGS", "comment<-", 
argv: "comment", "commandArgs", "colSums", "colMeans", "col", "close", 
argv: "clearPushBack", "choose", "chartr", "charToRaw", "charmatch", 
argv: "cbind", "cat", "capabilitiesX11", "capabilities", "bzfile", 
argv: "builtins", "browserText", "browserSetDebug", "browserCondition", 
argv: "bodyCode", "body", "bitwiseXor", "bitwiseShiftR", "bitwiseShiftL", 
argv: "bitwiseOr", "bitwiseNot", "bitwiseAnd", "bindtextdomain", "bindingIsLocked", 
argv: "bindingIsActive", "bincode", "beta", "besselY", "besselK", "besselJ", 
argv: "besselI", "bcVersion", "bcClose", "basename", "backsolve", "attach", 
argv: "atan2", "assign", "as.vector", "as.POSIXlt", "as.POSIXct", "as.function.default", 
argv: "array", "args", "aregexec", "aperm", "anyDuplicated", "all.names", 
argv: "agrepl", "agrep", "adist", "abbreviate", ".signalCondition", 
argv: ".resetCondHands", ".invokeRestart", ".getRestart", ".dfltWarn", 
argv: ".dfltStop", ".addTryHandlers", ".addRestart", ".addCondHands"
argv: ))), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(length(testr:::cache$decorated) > 
argv:     0)), .Names = c("pattern", "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//Rtmp385xCH"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: identical
argv: structure(list(x = TRUE, y = TRUE), .Names = c("x", "y"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = find_test_srcref()), .Names = c("pattern", 
argv: "x"))

func: identical
argv: structure(list(x = "testthat", y = "testthat"), .Names = c("x", 
argv: "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_that(object, is_true(), 
argv:     info, label)), .Names = c("pattern", "x"))

func: identical
argv: structure(list(x = "", y = "testthat"), .Names = c("x", "y"))

func: grepl
argv: structure(list(pattern = "expect_", x = expect_true(all(check.dec))), .Names = c("pattern", 
argv: "x"))

func: strsplit
argv: structure(list(fixed = TRUE, split = "=", x = c("R_ENVIRON=", 
argv: "R_TEXI2DVICMD=/usr/bin/texi2dvi", "LN_S=ln -s", "SED=/usr/bin/sed", 
argv: "NOT_CRAN=true", "RSTUDIO_PANDOC=/Applications/RStudio.app/Contents/MacOS/pandoc", 
argv: "R_INCLUDE_DIR=/Library/Frameworks/R.framework/Resources/include", 
argv: "R_PDFVIEWER=/usr/bin/open", "DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib:/Library/Frameworks/R.framework/Resources/lib:/Users/romantsegelskyi/lib:/usr/local/lib:/usr/lib::/Library/Frameworks/R.framework/Resources/lib", 
argv: "SHELL=/bin/bash", "R_PRINTCMD=lpr", "TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T/", 
argv: "Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.Gu21ir4Vkv/Render", 
argv: "R_RD4PDF=times,inconsolata,hyper", "R_SYSTEM_ABI=osx,gcc,gxx,gfortran,?", 
argv: "RS_SHARED_SECRET=4eb1593d-b3b3-497a-ba9a-7c68033bfd5f", "R_PAPERSIZE=a4", 
argv: "RSTUDIO=1", "USER=romantsegelskyi", "COMMAND_MODE=unix2003", 
argv: "TAR=/usr/bin/tar", "SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.wNqyVAA0yZ/Listeners", 
argv: "R_ZIPCMD=/usr/bin/zip", "__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0", 
argv: "PAGER=/usr/bin/less", "R_GZIPCMD=/usr/bin/gzip", "R_QPDF=/Library/Frameworks/R.framework/Resources/bin/qpdf", 
argv: "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/go/bin:/usr/texbin:/opt/local/bin", 
argv: "R_ENVIRON_USER=", "RSTUDIO_USER_IDENTITY=romantsegelskyi", "R_LIBS=/Library/Frameworks/R.framework/Versions/3.1/Resources/library", 
argv: "PWD=/Users/romantsegelskyi/RProject/testr/tests", "R_SHARE_DIR=/Library/Frameworks/R.framework/Resources/share", 
argv: "EDITOR=vi", "LANG=en_US.UTF-8", "RSTUDIO_SESSION_PORT=24886", 
argv: "R_LIBS_SITE=", "XPC_FLAGS=0x0", "R_PROFILE_USER=", "XPC_SERVICE_NAME=0", 
argv: "R_BROWSER=/usr/bin/open", "RMARKDOWN_MATHJAX_PATH=/Applications/RStudio.app/Contents/Resources/resources/mathjax-23", 
argv: "R_ARCH=", "HOME=/Users/romantsegelskyi", "SHLVL=2", "MAKE=make", 
argv: "R_PAPERSIZE_USER=a4", "RS_RPOSTBACK_PATH=/Applications/RStudio.app/Contents/MacOS/rpostback", 
argv: "LOGNAME=romantsegelskyi", "R_UNZIPCMD=/usr/bin/unzip", "LC_CTYPE=en_US.UTF-8", 
argv: "R_BZIPCMD=/usr/bin/bzip2", "R_HOME=/Library/Frameworks/R.framework/Resources", 
argv: "GIT_ASKPASS=rpostback-askpass", "DISPLAY=/private/tmp/com.apple.launchd.GpopIriPxn/org.macosforge.xquartz:0", 
argv: "R_PROFILE=", "R_PLATFORM=x86_64-apple-darwin13.4.0", "SECURITYSESSIONID=186a6", 
argv: "R_DOC_DIR=/Library/Frameworks/R.framework/Resources/doc", "R_LIBS_USER=~/Library/R/3.1/library", 
argv: "R_SESSION_TMPDIR=/var/folders/83/l9__ksh126ggwyp9lq9qbkt00000gn/T//Rtmp385xCH"
argv: )), .Names = c("fixed", "split", "x"))

func: identical
argv: structure(list(x = NA, y = FALSE), .Names = c("x", "y"))

func: pmatch
argv: structure(list(table = c("all", "keepInteger", "quoteExpressions", 
argv: "showAttributes", "useSource", "warnIncomplete", "delayPromises", 
argv: "keepNA", "S_compatible"), x = c("keepInteger", "showAttributes", 
argv: "keepNA")), .Names = c("table", "x"))

func: Sys.getenv
argv: list()

func: nchar
argv: structure(list(x = ""), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

func: which
argv: structure(list(x = TRUE), .Names = "x")

