sys.call(sys.parent(1))
sys.call(sys.parent(2))
sys.call(sys.parent(3))
sys.call(sys.parent(4))
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
debug(matrix)
matrix(rnorm(10), , 2)
debug(listWithMissingValues)
?match.call
sys.call(sys.parent(4)))
sys.call(sys.parent(4))
sys.call(sys.parent(1))
sys.call(sys.parent(2))
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
args
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
debug(matrix)
matrix(rnorm(10), , 2)
args
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
debug(matrix)
matrix(rnorm(10), , 2)
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
setwd("rWD/")
matrix(rnorm(10), , 2)
?args
args(c)
DecorateSubst(assign)
assign("x", 1)
debug(assign)
assign("x", 1)
library(testr)
rm(assign)
DecorateSubst(assign)
assign("x", 1)
debug(assign)
assign("x", 1)
?eval
?do.call
library(testr)
DecorateSubst(assign)
assign("x", 1)
debug(assign)
assign("x", 1)
parent.frame()
do.call(fbody, args)
do.call(fbody, args)
do.call(fbody, args, envir=parent.env)
do.call(fbody, args, envir=.GlobalEnv)
rm(x)
rm(x, envir=.GlobalEnv)
do.call(fbody, args, envir=parent.frame)
do.call(fbody, args, envir=parent.frame())
library(testr)
DecorateSubst(assign)
assign("x", 1)
library(testr)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
library(testr)
rm(matrix)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
library(testr)
rm(matrix)
DecorateSubst(matrix)
matrix(rnorm(10), , 2)
library(testr)
"formals" %in% builtins(TRUE)
"body" %in% builtins(TRUE)
DecorateSubst(body)
source('~/.active-rstudio-document')
setwd("rWD")
source('~/.active-rstudio-document')
rm(body)
DecorateSubst(formals)
source('~/.active-rstudio-document')
DecorateSubst(formals)
DecorateSubst(body)
source('~/.active-rstudio-document')
BeginBuiltinCapture(TRUE)
source('~/.active-rstudio-document')
fbody
print.default
DecorateSubst(body)
DecorateSubst(formals)
DecorateSubst(print.default)
source('~/.active-rstudio-document')
debug(print.default)
source('~/.active-rstudio-document')
fbody
fbody(body("foo"))
foo
debug(bar)
source('~/.active-rstudio-document')
bar <- function(x=NULL)
{
foo <- function(y=3) testit()
print(formals("foo"))
print(body("foo"))
}
debug(bar)
bar()
formals("foo")
body("foo")
fbody
fbody(formals("foo"))
parent.frame()
ls(parent.frame())
ls()
ls()
ls(parent.frame())
body("foo")
rm(print.default)
debug(print.default)
bar
bar()
noOpt
body("foo")
cbind(as.name("foo"), 1:3)
DecorateSubst(cbind)
cbind(as.name("foo"), 1:3)
debug(cbind)
cbind(as.name("foo"), 1:3)
rm(matrix)
library(testr)
DecorateSubst(cbind)
cbind(as.name("foo"), 1:3)
debug(cbind)
cbind(as.name("foo"), 1:3)
args
fbody(...)
do.call(fbody,args)
do.call(fbody,args, envir = parent.frame())
do.call(fbody, args, envir = parent.frame()
)
fbody
fbody
fbody(...)
do.call(fbody, args, envir = parent.frame()
)
args
?do.call
cbind(as.name("foo"), 1:3)
rm(cbind)
cbind(as.name("foo"), 1:3)
DecorateSubst(cbind)
cbind(as.name("foo"), 1:3)
source("~/Dropbox/RProject/R-3.1.1/tests/reg-tests-2a.R")
source("~/Dropbox/RProject/R-3.1.1/tests/reg-tests-1b.R")
cache$trace.file <- file.path(kCaptureFolder, paste(kCaptureFile, cache$capture.file.number, sep="."))
file.path
?file.path
getwd
getwd()
e <- tryCatch(sprintf("%q %d",1), error=function(e)e)
e2 <- tryCatch(sprintf("%s", quote(list())), error=function(e)e)
e3 <- tryCatch(sprintf("%s", quote(blabla)), error=function(e)e)
stopifnot(inherits(e, "error"), inherits(e2, "error"),inherits(e3, "error"),
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3))) == 1:3,
1 == c(grep("%q", msg), grep("language", msg2), grep("symbol", msg3))
)
"UseMethod" %in% builtins("TRUE")
"UseMethod" %in% builtins(TRUE)
BeginBuiltinCapture(TRUE)
e <- tryCatch(sprintf("%q %d",1), error=function(e)e)
e2 <- tryCatch(sprintf("%s", quote(list())), error=function(e)e)
e3 <- tryCatch(sprintf("%s", quote(blabla)), error=function(e)e)
stopifnot(inherits(e, "error"), inherits(e2, "error"),inherits(e3, "error"),
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3))) == 1:3,
1 == c(grep("%q", msg), grep("language", msg2), grep("symbol", msg3))
)
list(...)
debug(grep)
e <- tryCatch(sprintf("%q %d",1), error=function(e)e)
e2 <- tryCatch(sprintf("%s", quote(list())), error=function(e)e)
e3 <- tryCatch(sprintf("%s", quote(blabla)), error=function(e)e)
stopifnot(inherits(e, "error"), inherits(e2, "error"),inherits(e3, "error"),
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3))) == 1:3,
1 == c(grep("%q", msg), grep("language", msg2), grep("symbol", msg3))
)
args.list
list(...)
sys.call()
sys.call(-1)
sys.call(2)
fbody(...)
c(msg <- conditionMessage(e), msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3))
conditionMessage
"conditionMessage" %in% builtins
"conditionMessage" %in% builtins
"conditionMessage" %in% builtins()
"conditionMessage" %in% builtins(TRUE)
e <- tryCatch(sprintf("%q %d",1), error=function(e)e)
e2 <- tryCatch(sprintf("%s", quote(list())), error=function(e)e)
e3 <- tryCatch(sprintf("%s", quote(blabla)), error=function(e)e)
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
conditionMessage(e)
DecorateSubst(grep)
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
getwd()
setwd("rWD")
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
BeginBuiltinCapture(TRUE)
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
e <- tryCatch(sprintf("%q %d",1), error=function(e)e)
e2 <- tryCatch(sprintf("%s", quote(list())), error=function(e)e)
e3 <- tryCatch(sprintf("%s", quote(blabla)), error=function(e)e)
stopifnot(inherits(e, "error"), inherits(e2, "error"),inherits(e3, "error"),
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3))) == 1:3,
1 == c(grep("%q", msg), grep("language", msg2), grep("symbol", msg3))
)
conditionMessage
c
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
UseMethod
tryCatch
tryCatchOne
debug(grep)
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
cn
attach
rm(attach)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
stopifnot(identical(cn, c("qsec", "hp", "disp")))
cn
cbind(qsec, hp, disp)
colnames(cbind(qsec, hp, disp))
rm(cbind)
colnames(cbind(qsec, hp, disp))
cbind
DecorateSubst(cbind)
debug(cbind)
colnames(cbind(qsec, hp, disp))
fbody(..)
fbody(...)
retv
do.call(cbind, args)
colnames(args)
names(args)
args.list
as.character(args.list)
library(testr)
BeginBuiltinCapture(TRUE)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
library(testr)
BeginBuiltinCapture(TRUE)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
library(testr)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
BeginBuiltinCapture(TRUE)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
setMethod
signature
matchSignature
as.vector
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
rm(as.vector)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
rm(as.vector)
as.vector
"as.vector" %in% builtins
"as.vector" %in% builtins()
"as.vector" %in% builtins(TRUE)
as.vector
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
rm(as.vector)
DecorateSubst(as.vector)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
BeginBuiltinCapture(TRUE)
as.vector
debug(setMethod)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
getwd()
setGeneric
BeginBuiltinCapture()
fun1 <- function(x, A=c("power","constant")) {
arg <- match.arg(A)
formals()
}
topfun <- function(x, Fun=fun1) {
a1 <- fun1(x)
print(a1)
a2 <- Fun(x,A="power")
stopifnot(all.equal(a1, a2))
print(a2)
}
topfun(2, fun1)
getwd()
debug(topfun)
topfun(2, fun1)
topfun(2, fun1)
debug(fun1)
match.arg
rm(match.arg)
topfun(2, fun1)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
range
debug(range)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
rm(range)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
rm(as.Date)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
Summary.Date
rm(Summary.Date)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
z <- rep(Sys.time(),5)
?rep
Sys.time()
debug(rep)
z <- rep(Sys.time(),5)
args
fbody(...)
library(testr)
BeginBuiltinCapture()
warnings()
z <- rep(Sys.time(),5)
z <- rep(Sys.time(),5)
debug(rep)
~/RProject/genTests//2014_08_23_12_14_32/tc_detach.r
z <- rep(Sys.time(),5)
debug(WriteCapInfo)
cache$writing.down
errs
BeginBuiltinCapture()
cache$writing.down
rep
z <- rep(Sys.time(),5)
debug(rep)
z <- rep(Sys.time(),5)
z <- rep(Sys.time(),5)
z <- rep(Sys.time(),5)
fbody
.Primitive
NextMethod
library(testr)
z <- rep(Sys.time(),5)
z
BeginBuiltinCapture()
z <- rep(Sys.time(),5)
library(testr)
library(testr)
BeginBuiltinCapture()
z <- rep(Sys.time(),5)
.handleSimpleError
rm(.handleSimpleError)
z <- rep(Sys.time(),5)
NextMethod
rep.POSIXct
.POSIXct
z <- rep(Sys.time(),5)
y <- 1:100 + rnorm(100)
od <- data.frame(x=1:100, z=1:100 + rnorm(100, 10))
nd <- data.frame(x=1:100, z=11:110)
fit <- loess(y ~ log(x) + log(z), od)
p1 <- predict(fit, nd) # failed in 2.6.x
fit.log <- loess(y ~ x + z, log(od))
p2 <- predict(fit.log, log(nd))
stopifnot(all.equal(p1, p2))
fit <- loess(y ~ log(x) + log(z), od)
fit.log <- loess(y ~ x + z, log(od))
fbody
fit.log <- loess(y ~ x + z, log(od))
.GenericArgsEnv
.Generic
debug(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
fbody
lapply
rm(lapply)
fit.log <- loess(y ~ x + z, log(od))
rm(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
debug(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
.Generic
?.Generic
attr("Math.data.frame")
attr(Math.data.frame)
attr(Math.data.frame)
Math.data.frame$.Generic
e <- tryCatch(stop(), error=identity)
stop()
rm(stop)
e <- tryCatch(stop(), error=identity)
tryCatch
rm(tryCatch)
e <- tryCatch(stop(), error=identity)
DecorateSubst(stop)
e <- tryCatch(stop(), error=identity)
getwd()
setwd("rWd")
setwd("rWD")
setwd("../rWD")
getwd()
e <- tryCatch(stop(), error=identity)
e <- tryCatch(stop(), error=identity)
any(TRUE, FALSE)
stop()
debug(stop)
stop()
median(rep(Sys.time(), 2))
DecorateSubst(tryCatch)
e <- tryCatch(stop(), error=identity)
undebug(stop)
debug(tryCatch)
e <- tryCatch(stop(), error=identity)
list(...)
?builtins
install.packages("pryr")
?shQuote
z <- rep(Sys.time(),5)
bar <- function(x=NULL)
{
foo <- function(y=3) testit()
print(formals("foo"))
print(body("foo"))
}
bar()
debug(print.default)
bar()
args
body("foo")
rm(print.default)
debug(bar)
bar()
foo
foo
body("foo")
debug(print.default)
Q
undebug(bar)
debug(print.default)
bar()
W
BeginBuiltinCapture()
eval(quote(x), data.frame(x = 40))
library(testr)
DecorateSubst(Ops.factor)
debug(Ops.factor)
stripchart(decrease ~ treatment, data = OrchardSprays,
subset = treatment != "A")
tryCatch(evalq(f.call.e, envir = as.list(environment(), all.names=T), enclos = parent.frame()), error=function(x) x$message)
tryCatch(evalq(f.call.e, envir = as.list(environment(), all.names=T), enclos = parent.frame()), error=function(x) x$message)
tryCatch(eval(quote(f.call.e), envir = as.list(environment(), all.names=T), enclos = parent.frame()), error=function(x) x$message)
f.call.e
tryCatch(eval(quote(f.call.e)), error=function(x) x$message)
eval(quote(f.call.e))
eval(quote(f.call))
sys.call()
sc <- sys.call()
sc[[1]] <- "fbody"
sc
stripchart(decrease ~ treatment, data = OrchardSprays,
subset = treatment != "A")
sc
sc <- sys.call()
sc
