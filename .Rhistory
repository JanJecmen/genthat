msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
e <- tryCatch(sprintf("%q %d",1), error=function(e)e)
e2 <- tryCatch(sprintf("%s", quote(list())), error=function(e)e)
e3 <- tryCatch(sprintf("%s", quote(blabla)), error=function(e)e)
stopifnot(inherits(e, "error"), inherits(e2, "error"),inherits(e3, "error"),
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3))) == 1:3,
1 == c(grep("%q", msg), grep("language", msg2), grep("symbol", msg3))
)
conditionMessage
c
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
UseMethod
tryCatch
tryCatchOne
debug(grep)
grep("invalid", c(msg  <- conditionMessage(e),
msg2 <- conditionMessage(e2),
msg3 <- conditionMessage(e3)))
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
cn
attach
rm(attach)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
stopifnot(identical(cn, c("qsec", "hp", "disp")))
cn
cbind(qsec, hp, disp)
colnames(cbind(qsec, hp, disp))
rm(cbind)
colnames(cbind(qsec, hp, disp))
cbind
DecorateSubst(cbind)
debug(cbind)
colnames(cbind(qsec, hp, disp))
fbody(..)
fbody(...)
retv
do.call(cbind, args)
colnames(args)
names(args)
args.list
as.character(args.list)
library(testr)
BeginBuiltinCapture(TRUE)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
library(testr)
BeginBuiltinCapture(TRUE)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
library(testr)
attach(mtcars)
(cn <- colnames(cbind(qsec, hp, disp)))
BeginBuiltinCapture(TRUE)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
setMethod
signature
matchSignature
as.vector
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
rm(as.vector)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
rm(as.vector)
as.vector
"as.vector" %in% builtins
"as.vector" %in% builtins()
"as.vector" %in% builtins(TRUE)
as.vector
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
rm(as.vector)
DecorateSubst(as.vector)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
BeginBuiltinCapture(TRUE)
as.vector
debug(setMethod)
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
getwd()
setGeneric
BeginBuiltinCapture()
fun1 <- function(x, A=c("power","constant")) {
arg <- match.arg(A)
formals()
}
topfun <- function(x, Fun=fun1) {
a1 <- fun1(x)
print(a1)
a2 <- Fun(x,A="power")
stopifnot(all.equal(a1, a2))
print(a2)
}
topfun(2, fun1)
getwd()
debug(topfun)
topfun(2, fun1)
topfun(2, fun1)
debug(fun1)
match.arg
rm(match.arg)
topfun(2, fun1)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
range
debug(range)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
rm(range)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
rm(as.Date)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
Summary.Date
rm(Summary.Date)
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
z <- rep(Sys.time(),5)
?rep
Sys.time()
debug(rep)
z <- rep(Sys.time(),5)
args
fbody(...)
library(testr)
BeginBuiltinCapture()
warnings()
z <- rep(Sys.time(),5)
z <- rep(Sys.time(),5)
debug(rep)
~/RProject/genTests//2014_08_23_12_14_32/tc_detach.r
z <- rep(Sys.time(),5)
debug(WriteCapInfo)
cache$writing.down
errs
BeginBuiltinCapture()
cache$writing.down
rep
z <- rep(Sys.time(),5)
debug(rep)
z <- rep(Sys.time(),5)
z <- rep(Sys.time(),5)
z <- rep(Sys.time(),5)
fbody
.Primitive
NextMethod
library(testr)
z <- rep(Sys.time(),5)
z
BeginBuiltinCapture()
z <- rep(Sys.time(),5)
library(testr)
library(testr)
BeginBuiltinCapture()
z <- rep(Sys.time(),5)
.handleSimpleError
rm(.handleSimpleError)
z <- rep(Sys.time(),5)
NextMethod
rep.POSIXct
.POSIXct
z <- rep(Sys.time(),5)
y <- 1:100 + rnorm(100)
od <- data.frame(x=1:100, z=1:100 + rnorm(100, 10))
nd <- data.frame(x=1:100, z=11:110)
fit <- loess(y ~ log(x) + log(z), od)
p1 <- predict(fit, nd) # failed in 2.6.x
fit.log <- loess(y ~ x + z, log(od))
p2 <- predict(fit.log, log(nd))
stopifnot(all.equal(p1, p2))
fit <- loess(y ~ log(x) + log(z), od)
fit.log <- loess(y ~ x + z, log(od))
fbody
fit.log <- loess(y ~ x + z, log(od))
.GenericArgsEnv
.Generic
debug(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
fbody
lapply
rm(lapply)
fit.log <- loess(y ~ x + z, log(od))
rm(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
debug(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
.Generic
?.Generic
attr("Math.data.frame")
attr(Math.data.frame)
attr(Math.data.frame)
Math.data.frame$.Generic
e <- tryCatch(stop(), error=identity)
stop()
rm(stop)
e <- tryCatch(stop(), error=identity)
tryCatch
rm(tryCatch)
e <- tryCatch(stop(), error=identity)
DecorateSubst(stop)
e <- tryCatch(stop(), error=identity)
getwd()
setwd("rWd")
setwd("rWD")
setwd("../rWD")
getwd()
e <- tryCatch(stop(), error=identity)
e <- tryCatch(stop(), error=identity)
any(TRUE, FALSE)
stop()
debug(stop)
stop()
median(rep(Sys.time(), 2))
DecorateSubst(tryCatch)
e <- tryCatch(stop(), error=identity)
undebug(stop)
debug(tryCatch)
e <- tryCatch(stop(), error=identity)
list(...)
?builtins
install.packages("pryr")
?shQuote
z <- rep(Sys.time(),5)
bar <- function(x=NULL)
{
foo <- function(y=3) testit()
print(formals("foo"))
print(body("foo"))
}
bar()
debug(print.default)
bar()
args
body("foo")
rm(print.default)
debug(bar)
bar()
foo
foo
body("foo")
debug(print.default)
Q
undebug(bar)
debug(print.default)
bar()
W
BeginBuiltinCapture()
library(testr)
DecorateSubst("as.vector")
setMethod("as.vector", signature(x = "foo", mode = "missing"),
function(x) unclass(x))
## whereas this fails in R versions earlier than 2.6.0:
setMethod("as.vector", "foo", function(x) unclass(x))
stopifnot(removeClass("foo"))
setMethod("sample", "C2",
function(x, size, replace=FALSE, prob=NULL) {"sample.C2"})
"sample" %in% builtins()
DecorateSubst(sample)
DecorateSubst("sample")
setMethod("sample", "C2",
function(x, size, replace=FALSE, prob=NULL) {"sample.C2"})
stopifnot(is(sample,"standardGeneric"),
# the signature must come from the implicit generic:
identical(sample@signature, c("x", "size")),
identical(packageSlot(sample), "base"),
# default method must still work:
identical({set.seed(3); sample(3)}, 1:3))
## failed in R 2.11.0
sample@signature
rm(sampel)
rm(sample)
setMethod("sample", "C2",
function(x, size, replace=FALSE, prob=NULL) {"sample.C2"})
stopifnot(is(sample,"standardGeneric"),
# the signature must come from the implicit generic:
identical(sample@signature, c("x", "size")),
identical(packageSlot(sample), "base"),
# default method must still work:
identical({set.seed(3); sample(3)}, 1:3))
sample@signature
library(testr)
BeginBuiltinCapture()
cbind("foo", 1:3)
cbind(foo, 1:3)
fun1 <- function(x, A=c("power","constant")) {
arg <- match.arg(A)
formals()
}
topfun <- function(x, Fun=fun1) {
a1 <- fun1(x)
print(a1)
a2 <- Fun(x,A="power")
stopifnot(all.equal(a1, a2))
print(a2)
}
topfun(2, fun1)
library(testr)
library(testr)
BeginBuiltinCapture()
fun1 <- function(x, A=c("power","constant")) {
arg <- match.arg(A)
formals()
}
topfun <- function(x, Fun=fun1) {
a1 <- fun1(x)
print(a1)
a2 <- Fun(x,A="power")
stopifnot(all.equal(a1, a2))
print(a2)
}
topfun(2, fun1)
library(testr)
BeginBuiltinCapture()
-.Dete
-.Dagte
-.Date
as.data.frame.ts
rep(Sys.time(),5)
rep.POSIXct
rep(Sys.time(),5)
.POSIXct
NextMethod
rep(Sys.time(),5)
baz <- function(x) UseMethod("baz", x)
baz.A <- function(x) "A"
baz.B <- function(x) "B"
ab <- structure(1, class = c("A", "B"))
ba <- structure(1, class = c("B", "A"))
baz(ab)
baz(ab)
baz <- function(x) UseMethod("baz", x)
baz.A <- function(x) "A"
baz.B <- function(x) "B"
ab <- structure(1, class = c("A", "B"))
ba <- structure(1, class = c("B", "A"))
baz(ab)
baz(ba)
baz.C <- function(x) c("C", NextMethod())
ca <- structure(1, class = c("C", "A"))
cb <- structure(1, class = c("C", "B"))
baz(ca)
baz(cb)
.Class
baz.D <- function(x) {
class(x) <- "A"
NextMethod()
}
da <- structure(1, class = c("D", "A"))
db <- structure(1, class = c("D", "B"))
baz(da)
baz(db)
BeginBuiltinCapture()
UseMethod
rm(UseMethod)
NextMethod
UseMethod
baz <- function(x) UseMethod("baz", x)
baz.A <- function(x) "A"
baz.B <- function(x) "B"
ab <- structure(1, class = c("A", "B"))
ba <- structure(1, class = c("B", "A"))
baz(ab)
baz(ba)
rep(Sys.time(),5)
Sys.time
rm(Sys.time)
rep(Sys.time(),5)
Sys.time
rep(Sys.time(),5)
debug(rep.POSIXct)
rep(Sys.time(),5)
fbody(...)
rep(Sys.time(),5)
fbody
library(testr)
BeginBuiltinCapture()
rep(Sys.time(),5)
library(testr)
library(testr)
DecorateSubst(rep)
DecorateSubst(rep.POSIXct)
rep(Sys.time(),5)
rep(Sys.time(),5)
debug(rep.POSIXct)
rep(Sys.time(),5)
fbody
fbody(...)
rep(Sys.time(),5)
debug(fbody)
rm(rep.POSIXct)
rep(Sys.time(),5)
rm(rep.POSIXct)
rep(Sys.time(),5)
rep(Sys.time(),5)
y
DecorateSubst(rep.POSIXct)
form <- formals(rep.POSIXct)
DecorateSubst(rep)
DecorateSubst(rep.POSIXct)
formals(rep.POSIXct) <- form
rep(Sys.time(),5)
rm(rep)
rep(Sys.time(),5)
rep
DecorateSubst(rep)
formals(rep) <- form
rep(Sys.time(),5)
NextMethod
rm(rep)
attr(rep)
rep
class(rep)
class(rep)
attr(rep)
attributes(rep)
rm(rep.POSIXct)
summary(rep.POSIXct)
attr(rep.POSIXct)
attributes(rep.POSIXct)
DecorateSubst(rep)
rep(Sys.time(),5)
rm(rep)
debug(rep)
debug(rep.POSIXct)
rep(Sys.time(),5)
x
attr(x)
attributes(x)
DecorateSubst(rep.POSIXct)
debug(rep.POSIXct)
rep(Sys.time(),5)
debug(fbody)
x
x$class
rm(rep.POSIXct)
debug(rep.POSIXct)
rep(Sys.time(),5)
x$class
attributes(x)
DecorateSubst(rep.POSIXct)
debug(rep.POSIXct)
rep(Sys.time(),5)
debug(fbody)
attributes(x)
rep
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
BeginBuiltinCapture()
(z <- range(as.Date(c("2007-11-06", NA)), na.rm = TRUE))
z <- rep(Sys.time(),5)
y <- 1:100 + rnorm(10)
od <- data.frame(x=1:100, z=1:100 + rnorm(100, 10))
nd <- data.frame(x=1:100, z=11:110)
fit <- loess(y ~ log(x) + log(z), od)
p1 <- predict(fit, nd)
fit.log <- loess(y ~ x + z, log(od))
rep(Sys.time(),5)
rm(rep)
rep(Sys.time(),5)
rep(Sys.time(),5)
fbody(...)
fit.log <- loess(y ~ x + z, log(od))
Math.data.frame
?.Generic
rm(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
debug(Math.data.frame)
fit.log <- loess(y ~ x + z, log(od))
.Generi
fit.log <- loess(y ~ x + z, log(od))
.Generic
rep.POSIXct
rep(Sys.time(),5)
.Generic
debug(fbody)
.Generic
rm(rep.POSIXct)
rep(Sys.time(),5)
.Generic
ls()
ls(all.names=TRUE)
DecorateSubst(rep.POSIXct)
rep(Sys.time(),5)
ls(all.names=TRUE)
debug(fbody)
ls(all.names = TRUE)
rep(Sys.time(),5)
ls(all.names=TRUE)
ls(parent.frame())
ls(parent.frame(1))
ls(parent.frame(2))
ls(parent.frame(3))
ls(sys.frame)
ls(sys.frame())
ls(sys.frame(1))
ls(sys.frame(2))
ls(sys.frame(2), all.names = TRUE)
ls(sys.frame(-1), all.names = TRUE)
rep(Sys.time(),5)
ls(sys.frame())
ls(sys.frame(1))
ls(sys.frame(2))
ls(sys.frame(3))
ls(sys.frame(-1))
ls(sys.frame(-2))
ls(sys.frame(-3))
ls(sys.frame(-3), all.names = TRUE)
