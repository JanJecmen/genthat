"import org.junit.*;",
"import com.oracle.truffle.r.test.*;",
paste("public class ", class.name, "extends TestBase {"),
lines,
"}"),
con = f.conn)
close(f.conn)
}
}
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
OrginizeTests("tests/")
any(-1,2,3)
operators()
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
source('~/Dropbox/RProject/testr/translator.R')
debug(translateFastR)
translateFastR("filtered-test-suite-prim/any/")
files
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/any")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/any")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/any")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
OrginizeTests("tests/")
cache <- new.env()
cache[[name]]
cache[["any"]]
cache[["any"]] <- 1
cache[["any"]]
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/any")
?writeLines
argv <- list(0, 1000000L);`:`(argv[[1]],argv[[2]])
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("filtered-test-suite-prim/", "tsuite")
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("filtered-test-suite-prim/", "tsuite")
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("filtered-test-suite-prim/", "tsuite")
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("filtered-test-suite-prim/", "tsuite")
warnings()
source('~/Dropbox/RProject/testr/translator.R')
?file
?write
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("filtered-test-suite-prim/", "tsuite")
OrginizeTestCases("filtered-test-suite-prim/any/", "tsuite")
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("filtered-test-suite-prim/any/", "tsuite")
OrginizeTestCases("filtered-test-suite-prim/", "tsuite")
library(testr)
rm(test)
library(testr)
runTests("tsuite/")
runTests("filtered-test-suite-prim/")
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
builtins()
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
builtins(TRUE)
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("efs/", "tsuite")
rm(list=ls())
source('~/Dropbox/RProject/testr/translator.R')
rm(list=ls())
source('~/Dropbox/RProject/testr/translator.R')
OrginizeTestCases("efs/", "tsuite")
runTests("efs")
rm(test)
library(testr)
runTests("efs")
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
runTests("efs", stopOnError=TRUE)
OrginizeTestCases("efs/", "tsuite")
runTests("tsuite/", stopOnError=TRUE)
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-prim/any")
translateFastR("filtered-test-suite-primitive/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/any")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
OrginizeTests("tests/")
argv <- eval(parse(text="list(list(c(\"text> \", \"text> \", \"text> \", \"text+ \"), c(\"## The following two examples use latin1 characters: these may not\", \"## appear correctly (or be omitted entirely).\", \"plot(1:10, 1:10, main = \\\"text(...) examples\\\\n~~~~~~~~~~~~~~\\\",\", \"     sub = \\\"R is GNU ©, but not ® ...\\\")\")), \"\\n\")"));
.Internal(`paste0`(argv[[1]], argv[[2]]));
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
OrginizeTests("tests/")
argv <- eval(parse(text = 'list(list(c(\'text> \', \'text> \', \'text> \', \'text+ \'), c(\'## The following two examples use latin1 characters: these may not\', \'## appear correctly (or be omitted entirely).\', \'plot(1:10, 1:10, main = \\\'text(...) examples\\\\n~~~~~~~~~~~~~~\\\',\', \'     sub = \\\'R is GNU ©, but not ® ...\\\')\')), \'\\n\')')); .Internal(paste0(argv[[1]], argv[[2]]))
.Internal(paste0(argv[[1]], argv[[2]]))
f <- .Internal(paste0(argv[[1]], argv[[2]]))
sink()
sink()
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
OrginizeTests("tests/")
x <- "argv <- eval(parse(text="list(list(structure(c(\"-0.20\", \" 0.07\", \" 0.16\", \" 0.55\", \" 0.13\", \"-0.07\", \"-0.08\", \"-0.48\", \" 0.22\", \" 0.04\", \"-0.34\", \"-0.38\", \"-0.02\", \"-0.23\", \" 0.09\", \"-0.02\", \" 0.12\", \"-0.03\", \" 0.23\", \"-1.02\", \"-0.46\", \"-0.25\", \" 0.75\", \"-1.16\", \" 0.65\", \" 1.66\", \" 0.51\", \" 2.09\", \" 0.04\", \" 0.01\", \" 0.10\", \" 0.27\", \" 0.04\", \" 0.33\", \" 0.06\", \" 0.53\"), .Dim = c(4L, 9L), .Dimnames = list(c(\"Chile\", \"United States\", \"Zambia\", \"Libya\"), c(\"dfb.1_\", \"dfb.pp15\", \"dfb.pp75\", \"dfb.dpi\", \"dfb.ddpi\", \"dffit\", \"cov.r\", \"cook.d\", \"hat\"))), c(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"_*\", \"\", \"\", \"\", \"_*\", \"_*\", \"_*\", \"_*\", \"_*\", \"\", \"\", \"\", \"\", \"\", \"_*\", \"\", \"_*\")), NULL)"));
"
""
""
x <- 'argv <- eval(parse(text="list(list(structure(c(\"-0.20\", \" 0.07\", \" 0.16\", \" 0.55\", \" 0.13\", \"-0.07\", \"-0.08\", \"-0.48\", \" 0.22\", \" 0.04\", \"-0.34\", \"-0.38\", \"-0.02\", \"-0.23\", \" 0.09\", \"-0.02\", \" 0.12\", \"-0.03\", \" 0.23\", \"-1.02\", \"-0.46\", \"-0.25\", \" 0.75\", \"-1.16\", \" 0.65\", \" 1.66\", \" 0.51\", \" 2.09\", \" 0.04\", \" 0.01\", \" 0.10\", \" 0.27\", \" 0.04\", \" 0.33\", \" 0.06\", \" 0.53\"), .Dim = c(4L, 9L), .Dimnames = list(c(\"Chile\", \"United States\", \"Zambia\", \"Libya\"), c(\"dfb.1_\", \"dfb.pp15\", \"dfb.pp75\", \"dfb.dpi\", \"dfb.ddpi\", \"dffit\", \"cov.r\", \"cook.d\", \"hat\"))), c(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"_*\", \"\", \"\", \"\", \"_*\", \"_*\", \"_*\", \"_*\", \"_*\", \"\", \"\", \"\", \"\", \"\", \"_*\", \"\", \"_*\")), NULL)"));
'
gsub("argv <- eval\\(parse\\(text=\"(.*)\"", "\\1", x)
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
OrginizeTests("tests/")
argv <- list(list(c("Package:", "Type:", "Version:", "Date:", "License:", "Depends:"), " \\tab ", structure(c("myTst2", "Package", "1.0", "2014-03-17", "What license is it under?", "methods"), .Names = c("Package", "Type", "Version", "Date", "License", "Depends")), "\\cr"), NULL); .Internal(paste0(argv[[1]], argv[[2]]))
sink()
sink()
argv <- list(list(c("Package:", "Type:", "Version:", "Date:", "License:", "Depends:"), " \\tab ", structure(c("myTst2", "Package", "1.0", "2014-03-17", "What license is it under?", "methods"), .Names = c("Package", "Type", "Version", "Date", "License", "Depends")), "\\cr"), NULL); .Internal(paste0(argv[[1]], argv[[2]]))
source('~/Dropbox/RProject/testr/translator.R')
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/paste0/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
sink()
sink()
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
OrginizeTests("tests/")
warnings()
source('~/Dropbox/RProject/testr/translator.R')
translateFastR("filtered-test-suite-primitive/")
OrginizeTests("tests/")
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
setwd("wd/")
source('~/Dropbox/RProject/testr/capturer_own.R')
rm(list=ls())
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
?get
get("trace.file")
get(writing.down)
get("writing.down")
file.create(trace.file)
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
rm(list=ls())
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
exists("func")
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
all(TRUE, FALSE, FALSE)
all(TRUE, FALSE, writing.down)
all(TRUE, FALSE, FALSE)
all(TRUE, FALSE, writing.down)
source('~/Dropbox/RProject/testr/capturer_own.R')
all(TRUE, FALSE, writing.down)
sc
i
debug(write.down)
all(TRUE, FALSE, writing.down)
source('~/Dropbox/RProject/testr/capturer_own.R')
debug(write.down)
all(TRUE, FALSE, writing.down)
sc
func
sc[[i]]
sc[[i]]
?exists
source('~/Dropbox/RProject/testr/capturer_own.R')
all(TRUE, FALSE, writing.down)
source('~/Dropbox/RProject/testr/capturer_own.R')
all(TRUE, FALSE, writing.down)
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
warnings()
?f
f
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
debug(write.down)
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
sc
body
debug(write.down)
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
sc
get("f")
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
library(testr)
runTests("genTests/")
argv <- eval(parse(text="list(1:24, 2:4)"));
.Internal(`array`(argv[[1]], argv[[2]]));
source('~/Dropbox/RProject/testr/capturer_own.R')
source('~/Dropbox/RProject/R-3.0.1/tests/any-all.R')
rm(list=ls())
library(testr)
TestGen("closure.0", "genTests")
source('~/Dropbox/RProject/testr/reload.R')
TestGen("closure.0", "genTests")
TestGen("closure.0", "genTests", capture.type='c')
TestGen("closure.0", "genTests", capture.type='b')
runTests("genTests/")
argv <- eval(parse(text="structure(list(\"any\", \".na.rm\", sep = \"\"), .Names = c(\"\", \"\",  \"sep\"))"));
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
argv[[1]]
?.Internal
paste
expected <- eval(parse(text="\"any.na.rm\""));
test(id=0, code={
argv <- eval(parse(text="structure(list(\"any\", \".na.rm\", sep = \"\"), .Names = c(\"\", \"\",  \"sep\"))"));
.Internal(paste((argv[[1]], argv[[2]], argv[[3]])));
}, o=expected);
.Internal(paste((argv[[1]], argv[[2]], argv[[3]])));
.Internal(paste(argv[[1]], argv[[2]], argv[[3]]));
paste
.Internal(`paste`((argv[[1]], argv[[2]], argv[[3]])));
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
argv[[1]]
argv[[2]]
argv[[3]]
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
paste(argv[[1]], argv[[2]], argv[[3]]));
paste(argv[[1]], argv[[2]], argv[[3]]);
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]))
paste
TestGen("closure.0", "genTests", capture.type='b')
library(testr)
TestGen("closure.0", "genTests", capture.type='b')
runTests("genTests/")
argv <- eval(parse(text="structure(list(\"all\", \".na.rm\", sep = \"\"), .Names = c(\"\", \"\",  \"sep\"))"));
argv
as.list(argv)
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
argv <- as.list(argv)
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
paste(argv[[1]], argv[[2]], argv[[3]]));
paste(argv[[1]], argv[[2]], argv[[3]]);
?paste
argv <- eval(parse(text="list(\"all\", \".na.rm\", sep = \"\");
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
""
""
argv <- structure(list(\"all\", \".na.rm\", sep = \"\"), .Names = c(\"\", \"\",  \"sep\"))"));
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
argv <- list(list(\"all\", \".na.rm\", sep = \"\"), .Names = c(\"\", \"\",  \"sep\"))"));
argv <- list(list("all", ".na.rm", sep = ""), .Names = c("", "",  "sep"))"));
""
argv <- list(list("all", ".na.rm", sep = ""), .Names = c("", "",  "sep"));
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
argv <- list("all", ".na.rm", sep = "");
.Internal(`paste`(argv[[1]], argv[[2]], argv[[3]]));
.Internal(`paste`(list(argv[[1]], argv[[2]]), argv[[3]]));
paste
.Internal(`paste`(list(argv[[1]], argv[[2]]), argv[[3]], ""));
.Internal
paste(argv[[1]], argv[[2]], argv[[3]]);
paste(argv[[1]], argv[[2]], sep = argv[[3]]);
argv <- eval(parse(text="list(.Primitive(\"all\"), structure(list(c(TRUE, FALSE), c(TRUE,  NA), na.rm = TRUE), .Names = c(\"\", \"\", \"na.rm\")))"));
.Internal(`do.call`(argv[[1]], argv[[2]]));
do.call
do.call(argv[[1]], argv[[2]]);
names(argv)
argv <- list("all", ".na.rm", sep = "");
names(argv)
argv <- eval(parse(text="structure(list(\"any\", \".na.rm\", sep = \"\"), .Names = c(\"\", \"\",  \"sep\"))"));
names(argv)
debug(".Internal")
.Internal(`paste`(list("aaa", "bbb"), "", ""))
.Internal
source('~/.active-rstudio-document')
.Internal(`paste`(list("aaa", "bbb"), "", ""))
source('~/.active-rstudio-document')
.Internal(`paste`(list("aaa", "bbb"), "", ""))
source('~/.active-rstudio-document')
.Internal(`paste`(list("aaa", "bbb"), "", ""))
.Primitive
?.Primitive
Map
source('~/Dropbox/RProject/testr/reload.R')
library(testr)
source('~/Dropbox/RProject/testr/reload.R')
source("filtered-test-suite-primitive/Im/tc_Im_1.R")
runTests("filtered-test-suite-primitive/Im/")
source('~/Dropbox/RProject/testr/reload.R')
source('~/Dropbox/RProject/testr/reload.R')
testr.option('verbose')
roxygenize("./")
library(roxugen2)
library(roxygen2)
roxygenize("./")
roxygenize("./")
source('~/Dropbox/RProject/testr/reload.R')
source('~/Dropbox/RProject/testr/reload.R')
testr.option('verbose')
testr.option('verbose', TRUE)
testr.option('verbose')
testr:::cache
cache
cache <- new.env()
ifelse(cache$foo, cache$foo, FALSe)
if (cache$foo)
""
cache$foo
ifelse(!is.null(cache$foo), cache$foo, FALSe)
ifelse(!is.null(cache$foo), cache$foo, FALSE)
cache$foo <- TRUE
ifelse(!is.null(cache$foo), cache$foo, FALSE)
source('~/Dropbox/RProject/testr/reload.R')
runTests("filtered-test-suite-primitive/Im/")
runTests("filtered-test-suite-primitive/any/")
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
debug(test)
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
source('~/Dropbox/RProject/testr/reload.R')
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
runTests("filtered-test-suite-primitive/any/")
debug(tests)
debug(test)
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
tests
tests[[1]]
tests[[2]]
source('~/Dropbox/RProject/testr/reload.R')
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
runTests("filtered-test-suite-primitive/any/")
source('~/Dropbox/RProject/testr/reload.R')
runTests("filtered-test-suite-primitive/any/")
debug(runTests)
runTests("filtered-test-suite-primitive/any/")
cache$passes
source('~/Dropbox/RProject/testr/reload.R')
source('~/Dropbox/RProject/testr/reload.R')
runTests("filtered-test-suite-primitive/any/")
library("roxygen2")
roxygenise("./")
roxygenise("./")
library(testr)
RunTests("filtered-test-suite-primitive/any/")
RunTests("filtered-test-suite-primitive/all/")
RunTests("filtered-test-suite-primitive/all/", verbose = TRUE)
showConnections(TRUE)
source R closes connection?
?source
RunTests("filtered-test-suite-primitive/all/", summary = TRUE)
library(testr)
RunTests("filtered-test-suite-primitive/all/", summary = TRUE)
library(testr)
RunTests("filtered-test-suite-primitive/all/", summary = TRUE)
RunTests("filtered-test-suite-primitive/all/", run.summary = TRUE)
library(testr)
RunTests("filtered-test-suite-primitive/all/", run.summary = TRUE)
RunTests("filtered-test-suite-primitive/all/", run.summary = TRUE, verbose = TRUE)
RunTests("example.R", run.summary = TRUE, verbose = TRUE)
RunTests("example.R", verbose = TRUE)
RunTests("example.R", run.summary = TRUE, verbose = TRUE)
RunTests("example.R", file.summary = TRUE, verbose = TRUE)
library(testr)
RunTests("example.R", file.summary = TRUE, verbose = TRUE)
RunTests("example.R", stop.on.error=TRUE)
RunTests("example.R", stop.on.error=TRUE, display.code.on.error=TRUE)
RunTests("example.R", display.code.on.error=TRUE)
library(testr)
RunTests("example.R", display.code.on.error=TRUE)
debug(PrintTest)
debug(RunTests)
RunTests("example.R", display.code.on.error=TRUE)
debug(PrintTest)
RunTests("example.R", display.code.on.error=TRUE)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
undebug(RunTets)
undebug(RunTests)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
library(testr)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE, file.summary = TRUE)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE, verbose = TRUE)
library(testr)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE, verbose = TRUE)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE)
RunTests("example.R", display.code.on.error=TRUE)
typeof(any)
identical(any, any)
f <- any
identical(any, f)
?all.equal
library(testr)
RunTests("filtered-test-suite-primitive/")
library(testr)
RunTests("filtered-test-suite-primitive/")
RunTests("filtered-test-suite-primitive/", stop.on.error = TRUE)
is.na(any)
all.equal(any, f)
?typeof
class(any)
?special
library(testr)
RunTests("filtered-test-suite-primitive/", stop.on.error = TRUE)
