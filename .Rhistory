debug(matrix)
Y <- matrix(rnorm(20), , 2)
fc <- match.call()
fc
force(fc)
library(testr)
rm(matri)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
args
sapply(names(as.list(match.call())[-1]), force)
force(data)
library(testr)
library(testr)
rm(matrix)
DecorateSubst(matrix)
Y <- matrix(rnorm(20), , 2)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
library(testr)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
lapply(names(as.list(match.call())[-1]), function(x) force(get(x)))
force
library(testr)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
base
readLines("~/r-vm/fastr/com.oracle.truffle.r.test/src/com/oracle/truffle/r/test/testrgen/TestrGenBuiltinall.java")
x <- readLines("~/r-vm/fastr/com.oracle.truffle.r.test/src/com/oracle/truffle/r/test/testrgen/TestrGenBuiltinall.java")
x
cat(x)
gsub("\t", "    ", x)
paste(gsub("\t", "    ", x), collapse="\n")
cat(paste(gsub("\t", "    ", x), collapse="\n"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
line <- ""(){""
line <- "(){"
gsub("(){", "() {", line)
gsub("\\(\\)\\{", "\\(\\) \\{", line)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(testr)
setwd("rWD/")
BeginBuiltinCapture(TRUE)
source("any-all.R")
lapply(as.list(match.call())[-1], function(x) force(x))
list(...)
DecorateSubst(any)
any(TRUE,FALSE,FALSE)
debug(any)
any(TRUE,FALSE,FALSE)
any
DecorateSubst(any)
any
library(testr)
matrix(rnorm(20), , 2)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
debug(matrix)
matrix(rnorm(20), , 2)
args <- lapply(as.list(match.call())[-1], function(x) force(x))
args <- lapply(names(as.list(match.call())[-1]), function(x) force(get(x))
)
args <- lapply(names(as.list(match.call())[-1]), function(x) force(get(x)))
names(as.list(match.call())[-1])
matrix(rnorm(20), , 2)
names(as.list(match.call())[-1])
match.call()
as.list(match.call())
as.list(match.call())[-1]
rm(any)
rm(matrix)
formals(any)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
debug(matrix)
matrix(rnorm(20), , 2)
args <- lapply(as.list(match.call())[-1], function(x) force(x))
args <- lapply(names(as.list(match.call())[-1]), function(x) force(get(x)))
library(testr)
rm(matrix)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
any
DecorateSubst(any)
an
any
rm(any)
formals(any)
any
any
rm(matrix)
library(testr)
library(testr)
DecorateSubst(any)
any
formals(any)
formals(any)
formals(matrix)
debug(matrix)
undebug(matrix)
debug(matrix)
matrix(rnorm(20), , 2)
undebug(matrix)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
debug(matrix)
matrix(rnorm(20), , 2)
...
`...`
list(...)
match.call()
as.list(match.call())[-1]
args
rm(matrix)
rm(any)
library(testr)
DecorateSubst(matrix)
debug(matrix)
matrix(rnorm(20), , 2)
args
args[1]
args[[1]]
eval(args[[1]])
library(testr)
library(testr)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
matrix(rnorm(20), , 2)
rm(matrix)
library(testr)
DecorateSubst(matrix)
debug(matrix)
matrix(rnorm(20), , 2)
DecorateSubst(any)
any(TRUE, FALSE)
rm(any)
debug(DecorateSubst)
DecorateSubst(any)
formals(fobj)
matrix
debug(Decorate)
library(testr)
rm(any)
undebug(DecorateSubst)
debug(any)
undebug(any)
DecorateSubst(any)
any(TRUE, FALSE)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
rm(matrix)
rm(matrix)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
library(testr)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
rm(matrix)
matrix(rnorm(20), , 2)
DecorateSubst(matrix)
debug(matrix)
matrix(rnorm(20), , 2)
lapply(names(as.list(match.call())[-1]), function(x) force(get(x)))
library(testr)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
rm(matrix)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
rm(matrix)
matrix(rnorm(20), , 2)
debug(matrix)
matrix(rnorm(20), , 2)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
rm(matrix)
DecorateSubst(matrix)
undebug(matrix)
debug(matrix)
DecorateSubst(matrix)
rm(matrix)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
undebug(matrix)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
matrix(rnorm(20), , 2)
args
library(testr)
DecorateSubst(matri)
DecorateSubst(matrix)
debug(matrix)
matrix(rnorm(20), , 2)
args
rm(matri)
library(testr)
library(testrx)
rm(matrix)
DecorateSubst(matrix)
matrix(rnorm(20), , 2)
DecorateSubst(any)
any(TRUE, FALSE)
BeginBuiltinCapture(TRUE)
source("any-all.R")
debug(matrix)
matrix(rnorm(20), , 2)
vector(...)
list(...)
library(testr)
rm(matrix)
any(TRUE, , FALSE)
any(TRUE, FALSE)
f1 <- function(x = 1, y = 2, z = 3)
x + y + z
f1(2, , 2)
f1(2, ,3)
list(...)
library(testr)
debug(matrix)
undebug(matrix)
DecorateSubst(matrix)
debug(matrix)
DecorateSubst(f1)
debug(f1)
f1(2, ,3)
as.list(...)
list(...)
as.vector(...)
as.list(match.call())[-1]
as.list(match.call())[-1]
as.list(match.call())[-1][[2]]
as.list(match.call())[-1][[1]]
fbody''
fbody
args <- as.list(match.call())[-1]
args
do.call(fbody, args)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3)
x + y + z
f1
DecorateSubst(f1)
debug(f1)
f1(2, ,3)
fbody
f1(rnorm(5), ,3)
f1(rnorm(5), ,3)
do.call(fbody, args.list)
names(args.list)
eval(args.list)
eval(args.list[[2]])
f1(rnorm(5), ,3)
args.list[[2]]
args.list[[2]]
is.null(args.list[[2]])
args.list[[2]] == ""
eval("")
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
f1(rnorm(5), ,3)
f1
f1(rnorm(5), ,3)
debug(f1)
f1(rnorm(5), ,3)
f1(rnorm(5), ,3)
lapply(args.list, function(x) eval(x)
)
lapply(args.list, function(x) eval(x))
f1(rnorm(5), ,3)
args.list[[1]]
eval(args.list[[1]])
eval(args.list[[2]])
eval(args.list[[]])
eval(args.list[[3]])
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
f1(rnorm(5), ,3)
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
args
f1(rnorm(5), ,3)
args
library(testr)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
f1(rnorm(5), ,3)
DecorateSubst(f1)
rm(f1)
DecorateSubst(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
library(testr)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
eval(args.list[[2]])
eval(args.list[[1]])
f1(rnorm(5), ,3)
eval(args.list[[1]])
eval(args.list[[1]])
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
debug(ef)
q
q
q
args.lists
args
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
library(testr)
rm(f1)
DecorateSubst(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
rm(f1)
library(testr)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
f1(rnorm(5), ,3)
el
length(list())
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
library(testr)
DecorateSubst(f1)
rm(f1)
DecorateSubst(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
f1(rnorm(5), ,3)
el
f1(rnorm(5), ,3)
el
missing(el)
class(el)
library(testr)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
names(as.list(match.call())[-1])
lapply(names(as.list(match.call())[-1]), function(x) force(get(x)))
lapply(names(as.list(match.call())[-1]), function(q) force(get(q)))
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
args
DecorateSubst(any)
any(TRUE, FALSE)
debug(any)
any(TRUE, FALSE)
is.null(formals(fbody))
list(...)
args
library(testr)
rm(f1)
rm(any)
DecorateSubst(any)
any(TRUE, FALSE)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
f1(rnorm(5), ,3)
library(testr)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
debug(f1)
f1(rnorm(5), ,3)
f1(rnorm(5), ,3)
names(args.list)
names(args.list)[1]
library(testr)
rm(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
f1(rnorm(5), ,3)
library(testr)
rm(f1)
DecorateSubst(f1)
f1 <- function(x = rnorm(5), y = 2, z = 3) x + y + z
DecorateSubst(f1)
f1(rnorm(5), ,3)
source("reg-tests-1a.R")
source("reg-tests-1b.R")
BeginBuiltinCapture()
BeginBuiltinCapture(TRUE)
load(file.path(Sys.getenv("SRCDIR"), "nanbug.rda"))
bb <- b; bb[5] <- NaN
open("/nanbug.rda")
load(file.path("nanbug.rda"))
bb <- b; bb[5] <- NaN
b
a <- b <- 1
class(a) <- c("foo","bar","baz")
class(b) <- c("foo","baz")
stopifnot(a == 1,
b == a)
Ops.foo <- function(e1, e2) {
NextMethod()
}
Ops.baz <- function(e1, e2) {
NextMethod()
}
a <- b <- 1
class(a) <- c("foo","bar","baz")
class(b) <- c("foo","baz")
stopifnot(a == 1,
b == a)
fbody
NextMethod
rm(NextMethod)
NextMethod
Ops.foo <- function(e1, e2) {
NextMethod()
}
Ops.baz <- function(e1, e2) {
NextMethod()
}
a <- b <- 1
class(a) <- c("foo","bar","baz")
class(b) <- c("foo","baz")
stopifnot(a == 1,
b == a)
bar <- function(x=NULL)
foo <- function(y=3) testit()
print(formals("foo"))
print(body("foo"))
formals
rm(formals)
formals
body
rm(body)
body
bar <- function(x=NULL)
foo <- function(y=3) testit()
print(formals("foo"))
print(body("foo"))
bar
rm(install.packages)
?install.packages
(y <- x <- charToRaw("12345"))
save(x, file="x.Rda")
rm(deparse)
source("reg-tests-1b.R")
source("reg-tests-2.R")
rm(remove)
remove
eval
rm(eval)
source("reg-tests-2.R")
