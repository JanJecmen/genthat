Map
source('~/Dropbox/RProject/testr/reload.R')
library(testr)
source('~/Dropbox/RProject/testr/reload.R')
source("filtered-test-suite-primitive/Im/tc_Im_1.R")
runTests("filtered-test-suite-primitive/Im/")
source('~/Dropbox/RProject/testr/reload.R')
source('~/Dropbox/RProject/testr/reload.R')
testr.option('verbose')
roxygenize("./")
library(roxugen2)
library(roxygen2)
roxygenize("./")
roxygenize("./")
source('~/Dropbox/RProject/testr/reload.R')
source('~/Dropbox/RProject/testr/reload.R')
testr.option('verbose')
testr.option('verbose', TRUE)
testr.option('verbose')
testr:::cache
cache
cache <- new.env()
ifelse(cache$foo, cache$foo, FALSe)
if (cache$foo)
""
cache$foo
ifelse(!is.null(cache$foo), cache$foo, FALSe)
ifelse(!is.null(cache$foo), cache$foo, FALSE)
cache$foo <- TRUE
ifelse(!is.null(cache$foo), cache$foo, FALSE)
source('~/Dropbox/RProject/testr/reload.R')
runTests("filtered-test-suite-primitive/Im/")
runTests("filtered-test-suite-primitive/any/")
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
debug(test)
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
source('~/Dropbox/RProject/testr/reload.R')
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
runTests("filtered-test-suite-primitive/any/")
debug(tests)
debug(test)
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
tests
tests[[1]]
tests[[2]]
source('~/Dropbox/RProject/testr/reload.R')
test(id=0, code={
argv <- eval(parse(text="list(structure(csp = c(1, 101, 1), class = \"ts\"))"));
do.call(`any`, argv);
}, o=expected);
runTests("filtered-test-suite-primitive/any/")
source('~/Dropbox/RProject/testr/reload.R')
runTests("filtered-test-suite-primitive/any/")
debug(runTests)
runTests("filtered-test-suite-primitive/any/")
cache$passes
source('~/Dropbox/RProject/testr/reload.R')
source('~/Dropbox/RProject/testr/reload.R')
runTests("filtered-test-suite-primitive/any/")
library("roxygen2")
roxygenise("./")
roxygenise("./")
library(testr)
RunTests("filtered-test-suite-primitive/any/")
RunTests("filtered-test-suite-primitive/all/")
RunTests("filtered-test-suite-primitive/all/", verbose = TRUE)
showConnections(TRUE)
source R closes connection?
?source
RunTests("filtered-test-suite-primitive/all/", summary = TRUE)
library(testr)
RunTests("filtered-test-suite-primitive/all/", summary = TRUE)
library(testr)
RunTests("filtered-test-suite-primitive/all/", summary = TRUE)
RunTests("filtered-test-suite-primitive/all/", run.summary = TRUE)
library(testr)
RunTests("filtered-test-suite-primitive/all/", run.summary = TRUE)
RunTests("filtered-test-suite-primitive/all/", run.summary = TRUE, verbose = TRUE)
RunTests("example.R", run.summary = TRUE, verbose = TRUE)
RunTests("example.R", verbose = TRUE)
RunTests("example.R", run.summary = TRUE, verbose = TRUE)
RunTests("example.R", file.summary = TRUE, verbose = TRUE)
library(testr)
RunTests("example.R", file.summary = TRUE, verbose = TRUE)
RunTests("example.R", stop.on.error=TRUE)
RunTests("example.R", stop.on.error=TRUE, display.code.on.error=TRUE)
RunTests("example.R", display.code.on.error=TRUE)
library(testr)
RunTests("example.R", display.code.on.error=TRUE)
debug(PrintTest)
debug(RunTests)
RunTests("example.R", display.code.on.error=TRUE)
debug(PrintTest)
RunTests("example.R", display.code.on.error=TRUE)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
undebug(RunTets)
undebug(RunTests)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
library(testr)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE)
RunTests("example.R", display.code.on.error=TRUE, display.only.errors=FALSE, file.summary = TRUE)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE, verbose = TRUE)
library(testr)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE, verbose = TRUE)
RunTests("example.R", display.code.on.error=TRUE, file.summary = TRUE)
RunTests("example.R", display.code.on.error=TRUE)
typeof(any)
identical(any, any)
f <- any
identical(any, f)
?all.equal
library(testr)
RunTests("filtered-test-suite-primitive/")
library(testr)
RunTests("filtered-test-suite-primitive/")
RunTests("filtered-test-suite-primitive/", stop.on.error = TRUE)
is.na(any)
all.equal(any, f)
?typeof
class(any)
?special
library(testr)
RunTests("filtered-test-suite-primitive/", stop.on.error = TRUE)
library(testr)
BeginBuiltinCapture(TRUE)
source("~/Dropbox/RProject/R-3.0.1/tests/any-all.R")
library(testr)
source("~/Dropbox/RProject/R-3.0.1/tests/any-all.R")
BeginBuiltinCapture(TRUE)
source("~/Dropbox/RProject/R-3.0.1/tests/any-all.R")
TestGen("capture/capture.0", "genTests")
RunTests("genTests/")
source("~/Dropbox/RProject/R-3.0.1/tests/d-p-q-r-tests.R")
TestGen("capture/capture.0", "genTests")
RunTests("genTests/")
trace
library
as.character(substitute(any))
?foce
?force
DecorateSubst(any)
class(any)
library(testr)
class(any)
DecorateSubst(any)
any(T)
library(testr)
DecorateSubst(any)
any(T)
rm(any)
DecorateSubst(any)
any(T, F)
substitute("func")
testr:::EligibleForCapture(any)
rm(any)
testr:::EligibleForCapture(any)
debug(testr:::EligibleForCapture)
library(testr)
testr:::EligibleForCapture(any)
SetupCapture(c(any, all))
library(testr)
debug(SetupCapture)
SetupCapture(c(any, all))
func
EligibleForCapture(func)
debug(EligibleForCapture)
EligibleForCapture(func)
library(testr)
SetupCapture(c(any, all))
debug(SetupCapture)
SetupCapture(c(any, all))
SetupCapture(c(any, all))
warnings()
as.character(func)
library(testr)
SetupCapture(c(any, all))
debug(SetupCapture)
SetupCapture(c(any, all))
library(testr)
debug(SetupCapture)
SetupCapture(c(any, all))
flist
sys.call()
sys.call()[[1]]
sys.call()[[2]]
class(c(any,all))
typeof(c(any,all))
source('~/.active-rstudio-document')
decorate(any)
any <- decorate(any)
any <- decorate("any")
any
source('~/.active-rstudio-document')
any <- decorate("any")
attr(any, "decorated")
library(testr)
DecorateSubst(any)
DecorateSubst(any)
get
library(testr)
DecorateSubst(any)
library(testr)
DecorateSubst(any)
DecorateSubst(any)
any
debug(testr:::Decorate)
DecorateSubst(any)
attr(fobj, "decorated")
any
library(testr)
DecorateSubst(any)
DecorateSubst(any)
debug(testr:::Decorate)
DecorateSubst(any)
fobj
is.null(attr(fobj, "decorated"))
library(testr)
DecorateSubst(any)
DecorateSubst(any)
library(testr)
DecorateSubst(any)
DecorateSubst(any)
library(testr)
DecorateSubst(any)
DecorateSubst(any)
any(T)
any
DecorateSubst(any)
any(T)
any(T, F)
DecorateSubst(any)
any(T, F)
any(T, F, F)
library(testr)
DecorateSubst(any)
library(testr)
DecorateSubst(any)
any(T, F, F)
DecorateSubst(any)
any(T, F, F)
x  <- sink()
x <- sink()
x  <- capture.output(any(T, F, F))
x
x  <- capture.output(any(-1, -1, 2, 5))
x
x  <- capture.output(cat('Roman\n'))
x
x  <- capture.output(cat('Roman\nSa'))
x
f1 <- function(){
warning("AAA!")
warning("BBB!")
10
}
library(testr)
RunTests("genTests/")
RunTests("genTests/", verbose = TRUE)
library(testr)
RunTests("genTests/", verbose = TRUE)
RunTests("genTests/")
RunTests("java-helpers/src/genTests/")
RunTests("java-helpers/src/genTests/tc_max.r")
RunTests("java-helpers/src/genTests/")
RunTests("java-helpers/src/genTests/2014_07_28_23_18_59//tc_all.equal.r", stop.on.error=TRUE)
argv <- structure(list(c(0, 0, -0.000499523968713701, -1.33089326820405,
-5.36470502873211, -9.91015144019122, -32.9293385491432,
-38.707517174609, -Inf), c(0, 0, -0.000499523968713701,
-1.33089326820406, -5.36470502873211, -9.91015144019122,
-32.9293385491433, -38.707517174609, -Inf), tol = 2e-15),
.Names = c("", "", "tol"))
do.call("all.equal", argv)
argv <- structure(list(c(0, 0, -0.000499523968713701, -1.33089326820405,
-5.36470502873211, -9.91015144019122, -32.9293385491432,
-38.707517174609, -Inf), c(0, 0, -0.000499523968713701,
-1.33089326820406, -5.36470502873211, -9.91015144019122,
-32.9293385491433, -38.707517174609, -Inf), tol = 2e-10),
.Names = c("", "", "tol"))
do.call("all.equal", argv)
library(testr)
library(testr)
BeginBuiltinCapture(TRUE)
source("~/Dropbox/RProject/R-3.0.1/tests/reg-tests-1a.R")
Y <- matrix(rnorm(20), , 2)
rm(matrix)
Y <- matrix(rnorm(20), , 2)
Y
DecorateSubst(matrix)
Y <- matrix(rnorm(20), , 2)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
matrix
rm(matrix)
matrix
formals(matrix)
f1 <- function(x) x
formals(f1)
?formals
formals(f1) <- formals(matrix)
f1
library(testr)
rm(matrix)
DecorateSubst(matrix)
Y <- matrix(rnorm(20), , 2)
matrix
>match.call
?match.call
?match.args
debug(matrix)
Y <- matrix(rnorm(20), , 2)
match.args()
match.arg()
rm(matrix)
ls
rm(matrix)
matrix
fm <- formals(matrix)
DecorateSubst(matrix)
debug(matrix)
DecorateSubst(matrix)
debug(matrix)
rm(matrix)
matrix
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
fm
fm(names)
names(fm)
match.args(names(fm))
match.arg(names(fm))
?match.arg
match.arg(as.vector(names(fm)))
match.arg(c("data"))
match.arg(arg = c("data"))
fc <- match.call()
fc[[1]]
fc[[2]]
fc[[3]]
names(fc)
fc[[2:3]]
fc[1]
fc[2]
fc[3]
class(fc)
typeof(fc)
fc[2:3]
fc[2:3][[1]]
args <- fc[2:3]
argv <- fc[2:3]
unlist(argv)
unlist(fc)
fc[[1]] <- fbody
unlist(fc)
fc
fc <- match.call()
as.list(fc)
as.list(fc)[-1]
matrix
Y <- matrix(rnorm(20), 1, 2)
library(testr)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), 1, 2)
args
rm(matrix)
library(testr)
DecorateSubst(matrix)
Y <- matrix(rnorm(20), 1, 2)
library(testr)
rm(matrix)
DecorateSubst(matrix)
Y <- matrix(rnorm(20), 1, 2)
Y
Y
Y <- matrix(rnorm(20), 1, 2)
Y <- matrix(rnorm(20), , 2)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
force(...)
force()
force(func.decorated)
args
force(data)
force(args$data)
Y <- matrix(rnorm(20), , 2)
force(args)
eval(args)
eval(args$data)
sapply(args, eval)
ar <- sapply(args, eval)
ar
library(testr)
source("~/Dropbox/RProject/R-3.1.1/tests/reg-tests-1a.R")
source("~/Dropbox/RProject/R-3.1.1/tests/reg-tests-1a.R")
source("~/Dropbox/RProject/R-3.1.1/tests/reg-tests-1a.R")
source("~/Dropbox/RProject/R-3.1.1/tests/reg-tests-1c.R")
stopifnot(deparse(as.name("`"), backtick=TRUE) == "`\\``")
assign("`", TRUE)
`\``
tools::assertError(parse("```"))
rm(assign)
stopifnot(deparse(as.name("`"), backtick=TRUE) == "`\\``")
assign("`", TRUE)
`\``
tools::assertError(parse("```"))
DecorateSubst("assign")
assign("`", TRUE)
debug(assign)
assign("`", TRUE)
args
class(list)
class(args)
library(testr)
assign("`", TRUE)
assign
DecorateSubst("assign")
assign("`", TRUE)
'`'
'\`'
`\``
debug(assign)
assign("`", TRUE)
args
envir
?assign
assign("`", TRUE)
pos <- -2
assign("`", TRUE)
pos <- -2
envir
pos <- -1
envir
BeginBuiltinCapture(TRUE)
source("~/Dropbox/RProject/R-3.1.1/tests/reg-tests-1c.R")
lgamma(-X)
x <- c(TRUE, FALSE, NA, TRUE)
stopifnot(is.integer(+x))
x <- ts(c(a=TRUE, b=FALSE, c=NA, d=TRUE), frequency = 4, start = 2000)
x; +x; -x; !x
stopifnot(is.ts(!x), !is.ts(+x), !is.ts(-x))
matrix
debug(matrix)
Y <- matrix(rnorm(20), , 2)
fc <- match.call()
fc
force(fc)
library(testr)
rm(matri)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
args
sapply(names(as.list(match.call())[-1]), force)
force(data)
library(testr)
library(testr)
rm(matrix)
DecorateSubst(matrix)
Y <- matrix(rnorm(20), , 2)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
library(testr)
rm(matrix)
DecorateSubst(matrix)
debug(matrix)
Y <- matrix(rnorm(20), , 2)
lapply(names(as.list(match.call())[-1]), function(x) force(get(x)))
force
library(testr)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
base
readLines("~/r-vm/fastr/com.oracle.truffle.r.test/src/com/oracle/truffle/r/test/testrgen/TestrGenBuiltinall.java")
x <- readLines("~/r-vm/fastr/com.oracle.truffle.r.test/src/com/oracle/truffle/r/test/testrgen/TestrGenBuiltinall.java")
x
cat(x)
gsub("\t", "    ", x)
paste(gsub("\t", "    ", x), collapse="\n")
cat(paste(gsub("\t", "    ", x), collapse="\n"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
line <- ""(){""
line <- "(){"
gsub("(){", "() {", line)
gsub("\\(\\)\\{", "\\(\\) \\{", line)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
