func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(temp = c(-1, 3, 2, -2), cat = structure(c(1L, 2L, 1L, 2L), .Label = c("A", "B"), class = "factor")), .Names = c("temp", "cat"), row.names = c(NA, -4L), class = "data.frame"))
retn: structure(list(temp = c(-1, 3, 2, -2), cat = structure(c(1L, 2L, 1L, 2L), .Label = c("A", "B"), class = "factor")), .Names = c("temp", "cat"), row.names = c(NA, -4L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(1L, 2L, 1L, 2L), .Label = c("A", "B"), class = "factor"))
retn: structure(c(1L, 2L, 1L, 2L), .Label = c("A", "B"), class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"))
retn: structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Dim = 5:6, .Dimnames = structure(list(blocks = c("1", "2", "3", "4", "5"), varieties = c("1", "2", "3", "4", "5", "6")), .Names = c("blocks", "varieties")), class = "table"))
retn: structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Dim = 5:6, .Dimnames = structure(list(blocks = c("1", "2", "3", "4", "5"), varieties = c("1", "2", "3", "4", "5", "6")), .Names = c("blocks", "varieties")), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(2L, 6L, 2L, 5L, 4L, 2L, 5L, 4L), .Dim = 8L, .Dimnames = structure(list(statef = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")), .Names = "statef"), class = "table"))
retn: structure(c(2L, 6L, 2L, 5L, 4L, 2L, 5L, 4L), .Dim = 8L, .Dimnames = structure(list(statef = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")), .Names = "statef"), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(1L, 1L, 0L, 0L, 1L, 1L, 3L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 3L, 0L, 0L, 2L, 2L, 0L, 0L, 0L, 2L, 0L, 1L, 1L, 2L, 1L, 0L, 3L, 1L, 0L), .Dim = c(4L, 8L), .Dimnames = structure(list(incomef = c("(35,45]", "(45,55]", "(55,65]", "(65,75]"), statef = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")), .Names = c("incomef", "statef")), class = "table"))
retn: structure(c(1L, 1L, 0L, 0L, 1L, 1L, 3L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 3L, 0L, 0L, 2L, 2L, 0L, 0L, 0L, 2L, 0L, 1L, 1L, 2L, 1L, 0L, 3L, 1L, 0L), .Dim = c(4L, 8L), .Dimnames = structure(list(incomef = c("(35,45]", "(45,55]", "(55,65]", "(65,75]"), statef = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")), .Names = c("incomef", "statef")), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(home = structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"), loot = c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43), shot = structure(c(3L, 2L, 1L, 3L, 3L, 3L, 3L, 2L, 3L, 4L, 4L, 1L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 2L, 1L, 2L, 2L, 2L, 3L, 
args: 2L, 3L, 1L), .Label = c("(35,45]", "(45,55]", "(55,65]", "(65,75]"), class = "factor")), .Names = c("home", "loot", "shot"), row.names = c(NA, -30L), class = "data.frame"))
retn: structure(list(home = structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"), loot = c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43), shot = structure(c(3L, 2L, 1L, 3L, 3L, 3L, 3L, 2L, 3L, 4L, 4L, 1L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 2L, 1L, 2L, 2L, 2L, 3L, 2L, 3L, 
retn: 1L), .Label = c("(35,45]", "(45,55]", "(55,65]", "(65,75]"), class = "factor")), .Names = c("home", "loot", "shot"), row.names = c(NA, -30L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "R-exts", path = "/home/roman/r-instrumented/tests/R-exts.so", dynamicLookup = TRUE, handle = <pointer: 0x7283a90>, info = <pointer: 0x92e1a0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"))
retn: structure(list(name = "R-exts", path = "/home/roman/r-instrumented/tests/R-exts.so", dynamicLookup = TRUE, handle = <pointer: 0x7283a90>, info = <pointer: 0x92e1a0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(TRUE)
retn: TRUE

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(FALSE)
retn: FALSE

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(c("Attributes: < names for target but not for current >", "Attributes: < Length mismatch: comparison on first 0 components >"))
retn: c("Attributes: < names for target but not for current >", "Attributes: < Length mismatch: comparison on first 0 components >")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(1L)
retn: 1L

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), class = "hexmode"))
retn: structure(integer(0), class = "hexmode")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), class = "octmode"))
retn: structure(integer(0), class = "octmode")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = logical(0)), .Names = "c0", row.names = integer(0), class = "data.frame"))
retn: structure(list(c0 = logical(0)), .Names = "c0", row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), class = "difftime"))
retn: structure(numeric(0), class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), class = "difftime"))
retn: structure(integer(0), class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = logical(0)), .Names = "c0", row.names = integer(0), class = "difftime"))
retn: structure(list(c0 = logical(0)), .Names = "c0", row.names = integer(0), class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0L, class = "difftime"))
retn: structure(0L, class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), class = "Date"))
retn: structure(numeric(0), class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), class = "Date"))
retn: structure(integer(0), class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0L, class = "Date"))
retn: structure(0L, class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), class = c("POSIXct", "POSIXt")))
retn: structure(numeric(0), class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), class = c("POSIXct", "POSIXt")))
retn: structure(integer(0), class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0L, class = c("POSIXct", "POSIXt")))
retn: structure(0L, class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(NaN, class = "difftime"))
retn: structure(NaN, class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "AsIs"))
retn: list()

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), class = "AsIs"))
retn: logical(0)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), class = "AsIs"))
retn: character(0)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), .Dim = c(0L, 0L), class = "AsIs"))
retn: structure(numeric(0), .Dim = c(0L, 0L))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = c("AsIs", "data.frame")))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, class = "AsIs"))
retn: FALSE

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = c("R_system_version", "package_version", "numeric_version")))
retn: structure(list(), class = c("R_system_version", "package_version", "numeric_version"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(integer(0)), class = c("R_system_version", "package_version", "numeric_version")))
retn: structure(list(integer(0)), class = c("R_system_version", "package_version", "numeric_version"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(16147, class = "Date"))
retn: structure(16147, class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1395162794.92465, class = c("POSIXct", "POSIXt")))
retn: structure(1395162794.92465, class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(2L, class = "octmode"))
retn: structure(2L, class = "octmode")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Label = NA_character_, class = "factor"))
retn: structure(integer(0), .Label = NA_character_, class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Label = c("FALSE", NA), class = "factor"))
retn: structure(1L, .Label = c("FALSE", NA), class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Label = character(0), class = "factor"))
retn: structure(integer(0), .Label = character(0), class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame", .Dim = 1L))
retn: structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame", .Dim = 1L)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), .Dim = c(0L, 0L), class = "Date"))
retn: structure(numeric(0), .Dim = c(0L, 0L), class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, class = "Date"))
retn: structure(0, class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), class = c("POSIXct", "POSIXt"), tzone = ""))
retn: structure(numeric(0), class = c("POSIXct", "POSIXt"), tzone = "")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), .Dim = c(0L, 0L), class = c("POSIXct", "POSIXt")))
retn: structure(numeric(0), .Dim = c(0L, 0L), class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, class = c("POSIXct", "POSIXt")))
retn: structure(0, class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = c("", "EST", "EDT")))
retn: structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = c("", "EST", "EDT"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt")))
retn: structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = "UTC"))
retn: structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = "UTC")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = structure(NA_integer_, .Names = "c0"), wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = "UTC"))
retn: structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = structure(NA_integer_, .Names = "c0"), wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = "UTC")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 70L, wday = 4L, yday = 0L, isdst = 0L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = "UTC"))
retn: structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 70L, wday = 4L, yday = 0L, isdst = 0L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = "UTC")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = structure(NA_integer_, .Names = "c0"), wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = c("", "EST", "EDT")))
retn: structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = structure(NA_integer_, .Names = "c0"), wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = c("", "EST", "EDT"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sec = 0, min = 0L, hour = 19L, mday = 31L, mon = 11L, year = 69L, wday = 3L, yday = 364L, isdst = 0L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = c("", "EST", "EDT")))
retn: structure(list(sec = 0, min = 0L, hour = 19L, mday = 31L, mon = 11L, year = 69L, wday = 3L, yday = 364L, isdst = 0L), .Names = c("sec", "min", "hour", "mday", "mon", "year", "wday", "yday", "isdst"), class = c("POSIXlt", "POSIXt"), tzone = c("", "EST", "EDT"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(character(0), class = "AsIs")), .Names = "c0", row.names = character(0), class = "data.frame"))
retn: structure(list(c0 = structure(character(0), class = "AsIs")), .Names = "c0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame"))
retn: structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(l0 = logical(0)), .Names = "l0", row.names = character(0), class = "data.frame"))
retn: structure(list(l0 = logical(0)), .Names = "l0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), row.names = integer(0), class = "data.frame"))
retn: structure(list(), row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(`FALSE` = FALSE), .Names = "FALSE", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(`FALSE` = FALSE), .Names = "FALSE", row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(`NULL` = NULL), .Names = "NULL", row.names = character(0), class = "data.frame"))
retn: structure(list(`NULL` = NULL), .Names = "NULL", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(`list()` = list()), .Names = "list()", row.names = character(0), class = "data.frame"))
retn: structure(list(`list()` = list()), .Names = "list()", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = character(0)), .Names = "c0", row.names = character(0), class = "data.frame"))
retn: structure(list(c0 = character(0)), .Names = "c0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(numeric(0), .Dim = c(0L, 0L))), .Names = "x", row.names = integer(0), class = "data.frame"))
retn: structure(list(x = structure(numeric(0), .Dim = c(0L, 0L))), .Names = "x", row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame")), .Names = "x", row.names = character(0), class = "data.frame"))
retn: structure(list(x = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame")), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(m0 = structure(numeric(0), .Dim = c(0L, 0L))), .Names = "m0", row.names = character(0), class = "data.frame"))
retn: structure(list(m0 = structure(numeric(0), .Dim = c(0L, 0L))), .Names = "m0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(df0 = structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame")), .Names = "df0", row.names = "c0", class = "data.frame"))
retn: structure(list(df0 = structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame")), .Names = "df0", row.names = "c0", class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(l0 = structure(numeric(0), class = c("POSIXct", "POSIXt"))), .Names = "l0", row.names = character(0), class = "data.frame"))
retn: structure(list(l0 = structure(numeric(0), class = c("POSIXct", "POSIXt"))), .Names = "l0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(numeric(0), class = c("POSIXct", "POSIXt"), tzone = "")), .Names = "c0", row.names = character(0), class = "data.frame"))
retn: structure(list(c0 = structure(numeric(0), class = c("POSIXct", "POSIXt"), tzone = "")), .Names = "c0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = character(0)), .Names = "c0", row.names = integer(0), class = "data.frame"))
retn: structure(list(c0 = character(0)), .Names = "c0", row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(`NULL` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "NULL", row.names = character(0), class = "data.frame"))
retn: structure(list(`NULL` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "NULL", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(l0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "l0", row.names = character(0), class = "data.frame"))
retn: structure(list(l0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "l0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(m0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "m0", row.names = character(0), class = "data.frame"))
retn: structure(list(m0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "m0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(`FALSE` = structure(1L, .Label = "FALSE", class = "factor")), .Names = "FALSE", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(`FALSE` = structure(1L, .Label = "FALSE", class = "factor")), .Names = "FALSE", row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = integer(0), class = "data.frame"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE. = FALSE), .Names = "FALSE.", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(FALSE. = FALSE), .Names = "FALSE.", row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), .Names = character(0), row.names = character(0), class = "data.frame"))
retn: structure(list(), .Names = character(0), row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(m0 = structure(numeric(0), .Dim = c(0L, 0L))), .Names = "m0", row.names = integer(0), class = "data.frame"))
retn: structure(list(m0 = structure(numeric(0), .Dim = c(0L, 0L))), .Names = "m0", row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(df0 = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame")), .Names = "df0", row.names = character(0), class = "data.frame"))
retn: structure(list(df0 = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame")), .Names = "df0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = character(0), Var2 = character(0), c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("Var1", "Var2", "c0"), row.names = integer(0), class = "data.frame"))
retn: structure(list(Var1 = character(0), Var2 = character(0), c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("Var1", "Var2", "c0"), row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = NULL), .Names = "x", row.names = character(0), class = "data.frame"))
retn: structure(list(x = NULL), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = list()), .Names = "x", row.names = character(0), class = "data.frame"))
retn: structure(list(x = list()), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = logical(0)), .Names = "x", row.names = character(0), class = "data.frame"))
retn: structure(list(x = logical(0)), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = character(0)), .Names = "x", row.names = character(0), class = "data.frame"))
retn: structure(list(x = character(0)), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame")), .Names = "x", row.names = "c0", class = "data.frame"))
retn: structure(list(x = structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame")), .Names = "x", row.names = "c0", class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = FALSE), .Names = "x", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(x = FALSE), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), units = "secs", class = "difftime"))
retn: structure(numeric(0), units = "secs", class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(expression(c0 = integer(0)), .Names = "c0", row.names = character(0), class = "data.frame"))
retn: structure(expression(c0 = integer(0)), .Names = "c0", row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Label = "FALSE", class = "factor"))
retn: structure(1L, .Label = "FALSE", class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(function () 
args: integer(0))
retn: function () 
retn: integer(0)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", class = "data.frame", row.names = character(0)))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", class = "data.frame", row.names = character(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(integer(0), .Label = character(0), class = "factor")), class = "data.frame", row.names = character(0)))
retn: structure(list(structure(integer(0), .Label = character(0), class = "factor")), class = "data.frame", row.names = character(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0:1, .Dimnames = list(NULL, "c0"), class = "noquote"))
retn: structure(logical(0), .Dim = 0:1, .Dimnames = list(NULL, "c0"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "numeric_version"))
retn: structure(list(), class = "numeric_version")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Label = character(0), class = c("ordered", "factor")))
retn: structure(integer(0), .Label = character(0), class = c("ordered", "factor"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Label = "FALSE", class = c("ordered", "factor")))
retn: structure(1L, .Label = "FALSE", class = c("ordered", "factor"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = c("package_version", "numeric_version")))
retn: structure(list(), class = c("package_version", "numeric_version"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Label = character(0), class = "factor"), digits = 7L)
retn: structure(integer(0), .Label = character(0), class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0L, .Dimnames = structure(list(l0 = NULL), .Names = "l0"), call = quote(by.default(data = l0, INDICES = l0)), class = "by"))
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(l0 = NULL), .Names = "l0"), call = quote(by.default(data = l0, INDICES = l0)), class = "by")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(by.default(data = c0, INDICES = c0)), class = "by"))
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(by.default(data = c0, INDICES = c0)), class = "by")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(by.data.frame(data = df0, INDICES = df0)), class = "by"))
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(by.data.frame(data = df0, INDICES = df0)), class = "by")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(f(data = df0, INDICES = df0)), class = "by"))
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(f(data = df0, INDICES = df0)), class = "by")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0L, .Dimnames = structure(list(l0 = NULL), .Names = "l0"), call = quote(f(data = l0, INDICES = l0)), class = "by"))
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(l0 = NULL), .Names = "l0"), call = quote(f(data = l0, INDICES = l0)), class = "by")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(f(data = c0, INDICES = c0)), class = "by"))
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(f(data = c0, INDICES = c0)), class = "by")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(by.data.frame(data = dd, INDICES = INDICES, FUN = FUN, simplify = simplify)), class = "by"))
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), call = quote(by.data.frame(data = dd, INDICES = INDICES, FUN = FUN, simplify = simplify)), class = "by")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "Date"))
retn: structure(list(), class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), class = "Date"))
retn: structure(logical(0), class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), class = "Date"))
retn: structure(character(0), class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, class = "Date"))
retn: structure(FALSE, class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(FALSE, FALSE), class = "Date"))
retn: structure(c(FALSE, FALSE), class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = c("POSIXct", "POSIXt")))
retn: structure(list(), class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(logical(0), class = c("POSIXct", "POSIXt")))
retn: structure(logical(0), class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), class = c("POSIXct", "POSIXt")))
retn: structure(character(0), class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, class = c("POSIXct", "POSIXt")))
retn: structure(FALSE, class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(FALSE, FALSE), class = c("POSIXct", "POSIXt")))
retn: structure(c(FALSE, FALSE), class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", class = "noquote"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor"), c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("c0", "c0"), class = "noquote"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor"), c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("c0", "c0"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor"), c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("c0", "c0"), row.names = integer(0), class = "data.frame"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor"), c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("c0", "c0"), row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(l0 = logical(0)), .Names = "l0", row.names = integer(0), class = "data.frame"))
retn: structure(list(l0 = logical(0)), .Names = "l0", row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(l0 = logical(0), l0 = logical(0)), .Names = c("l0", "l0"), row.names = integer(0), class = "data.frame"))
retn: structure(list(l0 = logical(0), l0 = logical(0)), .Names = c("l0", "l0"), row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(`FALSE` = FALSE, `FALSE` = FALSE), .Names = c("FALSE", "FALSE"), row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(`FALSE` = FALSE, `FALSE` = FALSE), .Names = c("FALSE", "FALSE"), row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = structure("integer(0)", .Names = "c0")))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = structure("integer(0)", .Names = "c0"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, class = "FALSE"))
retn: structure(FALSE, class = "FALSE")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list("abort", NULL), class = "restart"))
retn: structure(list("abort", NULL), class = "restart")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(l0 = logical(0), l0.1 = logical(0)), .Names = c("l0", "l0.1"), row.names = integer(0), class = "data.frame"))
retn: structure(list(l0 = logical(0), l0.1 = logical(0)), .Names = c("l0", "l0.1"), row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor"), c0.1 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("c0", "c0.1"), row.names = integer(0), class = "data.frame"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor"), c0.1 = structure(integer(0), .Label = character(0), class = "factor")), .Names = c("c0", "c0.1"), row.names = integer(0), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE. = FALSE, FALSE..1 = FALSE), .Names = c("FALSE.", "FALSE..1"), row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(FALSE. = FALSE, FALSE..1 = FALSE), .Names = c("FALSE.", "FALSE..1"), row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = structure("integer(0)", .Names = "c0"), .Dim = c(1L, 1L), .Dimnames = list("c0", NULL)))
retn: structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = structure("integer(0)", .Names = "c0"), .Dim = c(1L, 1L), .Dimnames = list("c0", NULL))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(modulus = structure(0, logarithm = TRUE), sign = 1L), .Names = c("modulus", "sign"), class = "det"))
retn: structure(list(modulus = structure(0, logarithm = TRUE), sign = 1L), .Names = c("modulus", "sign"), class = "det")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), class = "difftime", units = "days"))
retn: structure(numeric(0), class = "difftime", units = "days")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), .Names = character(0), out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(), .Names = character(0), out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var2 = NULL), .Names = "Var2", out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(Var2 = NULL), .Names = "Var2", out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = logical(0)), .Names = "Var1", out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(Var1 = logical(0)), .Names = "Var1", out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = character(0)), .Names = "Var1", out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(Var1 = character(0)), .Names = "Var1", out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = numeric(0)), .Names = "Var1", out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(Var1 = numeric(0)), .Names = "Var1", out.attrs = structure(list(dim = 0L, dimnames = structure(list(Var1 = NULL), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", out.attrs = structure(list(dim = structure(0L, .Names = "c0"), dimnames = structure(list(c0 = NULL), .Names = "c0")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", out.attrs = structure(list(dim = structure(0L, .Names = "c0"), dimnames = structure(list(c0 = NULL), .Names = "c0")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = FALSE), .Names = "Var1", out.attrs = structure(list(dim = 1L, dimnames = structure(list(Var1 = "Var1=FALSE"), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = c(NA, -1L)))
retn: structure(list(Var1 = FALSE), .Names = "Var1", out.attrs = structure(list(dim = 1L, dimnames = structure(list(Var1 = "Var1=FALSE"), .Names = "Var1")), .Names = c("dim", "dimnames")), class = "data.frame", row.names = c(NA, -1L))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = list(), Var2 = list()), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(Var1 = list(), Var2 = list()), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = logical(0), Var2 = logical(0)), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(Var1 = logical(0), Var2 = logical(0)), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = character(0), Var2 = character(0)), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0)))
retn: structure(list(Var1 = character(0), Var2 = character(0)), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(0L, 0L), dimnames = structure(list(Var1 = NULL, Var2 = NULL), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0"), Var2 = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0")), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(1L, 1L), dimnames = structure(list(Var1 = "Var1=integer(0)", Var2 = "Var2=integer(0)"), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = c(NA, -1L)))
retn: structure(list(Var1 = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0"), Var2 = structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0")), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(1L, 1L), dimnames = structure(list(Var1 = "Var1=integer(0)", Var2 = "Var2=integer(0)"), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = c(NA, -1L))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(Var1 = FALSE, Var2 = FALSE), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(1L, 1L), dimnames = structure(list(Var1 = "Var1=FALSE", Var2 = "Var2=FALSE"), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = c(NA, -1L)))
retn: structure(list(Var1 = FALSE, Var2 = FALSE), .Names = c("Var1", "Var2"), out.attrs = structure(list(dim = c(1L, 1L), dimnames = structure(list(Var1 = "Var1=FALSE", Var2 = "Var2=FALSE"), .Names = c("Var1", "Var2"))), .Names = c("dim", "dimnames")), class = "data.frame", row.names = c(NA, -1L))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Names = "c0", .Label = "integer(0)", class = "factor"))
retn: structure(1L, .Names = "c0", .Label = "integer(0)", class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(3L, class = c("file", "connection"), conn_id = <pointer: 0x84>))
retn: structure(3L, class = c("file", "connection"), conn_id = <pointer: 0x84>)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(size = numeric(0), isdir = logical(0), mode = structure(integer(0), class = "octmode"), mtime = structure(numeric(0), class = c("POSIXct", "POSIXt")), ctime = structure(numeric(0), class = c("POSIXct", "POSIXt")), atime = structure(numeric(0), class = c("POSIXct", "POSIXt")), uid = integer(0), gid = integer(0), uname = character(0), grname = character(0)), .Names = c("size", "isdir", "mode", "mtime", "ctime", "atime", "uid", "gid", "uname", "grname"), class = "data.frame", row.names = character(0)))
retn: structure(list(size = numeric(0), isdir = logical(0), mode = structure(integer(0), class = "octmode"), mtime = structure(numeric(0), class = c("POSIXct", "POSIXt")), ctime = structure(numeric(0), class = c("POSIXct", "POSIXt")), atime = structure(numeric(0), class = c("POSIXct", "POSIXt")), uid = integer(0), gid = integer(0), uname = character(0), grname = character(0)), .Names = c("size", "isdir", "mode", "mtime", "ctime", "atime", "uid", "gid", "uname", "grname"), class = "data.frame", row.names = character(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(`NA` = structure("FALSE", class = "AsIs")), .Names = "NA", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(`NA` = structure("FALSE", class = "AsIs")), .Names = "NA", row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(function () 
args: NULL)
retn: function () 
retn: NULL

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0L, class = c("terminal", "connection")))
retn: structure(0L, class = c("terminal", "connection"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(base = structure(list(name = "base", path = "base", dynamicLookup = FALSE, handle = <pointer: (nil)>, info = <pointer: 0x92df60>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), utils = structure(list(name = "utils", path = "/home/roman/r-instrumented/library/utils/libs/utils.so", dynamicLookup = FALSE, handle = <pointer: 0x26bfca0>, info = <pointer: 0x92dfc0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), 
args:     methods = structure(list(name = "methods", path = "/home/roman/r-instrumented/library/methods/libs/methods.so", dynamicLookup = FALSE, handle = <pointer: 0x3baeae0>, info = <pointer: 0x92e020>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), grDevices = structure(list(name = "grDevices", path = "/home/roman/r-instrumented/library/grDevices/libs/grDevices.so", dynamicLookup = FALSE, handle = <pointer: 0x3a06f90>, info = <pointer: 0x92e080>), .Names = c("name", 
args:     "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), graphics = structure(list(name = "graphics", path = "/home/roman/r-instrumented/library/graphics/libs/graphics.so", dynamicLookup = FALSE, handle = <pointer: 0x4525460>, info = <pointer: 0x92e0e0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), stats = structure(list(name = "stats", path = "/home/roman/r-instrumented/library/stats/libs/stats.so", dynamicLookup = FALSE, handle = <pointer: 0x6e55120>, 
args:         info = <pointer: 0x92e140>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), lapack = structure(list(name = "lapack", path = "/home/roman/r-instrumented/modules//lapack.so", dynamicLookup = TRUE, handle = <pointer: 0x4578d30>, info = <pointer: 0x92e1a0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), R_X11 = structure(list(name = "R_X11", path = "/home/roman/r-instrumented/modules//R_X11.so", dynamicLookup = TRUE, handle = <pointer: 0x4746d80>, 
args:         info = <pointer: 0x92e200>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo")), class = "DLLInfoList", .Names = c("base", "utils", "methods", "grDevices", "graphics", "stats", "lapack", "R_X11")))
retn: structure(list(base = structure(list(name = "base", path = "base", dynamicLookup = FALSE, handle = <pointer: (nil)>, info = <pointer: 0x92df60>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), utils = structure(list(name = "utils", path = "/home/roman/r-instrumented/library/utils/libs/utils.so", dynamicLookup = FALSE, handle = <pointer: 0x26bfca0>, info = <pointer: 0x92dfc0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), methods = structure(list(
retn:     name = "methods", path = "/home/roman/r-instrumented/library/methods/libs/methods.so", dynamicLookup = FALSE, handle = <pointer: 0x3baeae0>, info = <pointer: 0x92e020>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), grDevices = structure(list(name = "grDevices", path = "/home/roman/r-instrumented/library/grDevices/libs/grDevices.so", dynamicLookup = FALSE, handle = <pointer: 0x3a06f90>, info = <pointer: 0x92e080>), .Names = c("name", "path", "dynamicLookup", 
retn: "handle", "info"), class = "DLLInfo"), graphics = structure(list(name = "graphics", path = "/home/roman/r-instrumented/library/graphics/libs/graphics.so", dynamicLookup = FALSE, handle = <pointer: 0x4525460>, info = <pointer: 0x92e0e0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), stats = structure(list(name = "stats", path = "/home/roman/r-instrumented/library/stats/libs/stats.so", dynamicLookup = FALSE, handle = <pointer: 0x6e55120>, info = <pointer: 0x92e140>), .Names = c("name", 
retn: "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), lapack = structure(list(name = "lapack", path = "/home/roman/r-instrumented/modules//lapack.so", dynamicLookup = TRUE, handle = <pointer: 0x4578d30>, info = <pointer: 0x92e1a0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), R_X11 = structure(list(name = "R_X11", path = "/home/roman/r-instrumented/modules//R_X11.so", dynamicLookup = TRUE, handle = <pointer: 0x4746d80>, info = <pointer: 0x92e200>), .Names = c("name", 
retn: "path", "dynamicLookup", "handle", "info"), class = "DLLInfo")), class = "DLLInfoList", .Names = c("base", "utils", "methods", "grDevices", "graphics", "stats", "lapack", "R_X11"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c(3L, 0L, 1L)), class = c("R_system_version", "package_version", "numeric_version")))
retn: structure(list(c(3L, 0L, 1L)), class = c("R_system_version", "package_version", "numeric_version"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Label = "FALSE.FALSE", class = "factor"))
retn: structure(1L, .Label = "FALSE.FALSE", class = "factor")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, class = "Date"), digits = 7L)
retn: structure(0, class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(header = NULL, results = structure(c("KernSmooth", "MASS", "Matrix", "base", "boot", "class", "cluster", "codetools", "compiler", "datasets", "foreign", "grDevices", "graphics", "grid", "lattice", "methods", "mgcv", "nlme", "nnet", "parallel", "rpart", "spatial", "splines", "stats", "stats4", "survival", "tcltk", "tools", "utils", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
args: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
args: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "Functions for kernel smoothing for Wand & Jones (1995)", "Support Functions and Datasets for Venables and Ripley's MASS", 
args: "Sparse and Dense Matrix Classes and Methods", "The R Base Package", "Bootstrap Functions (originally by Angelo Canty for S)", "Functions for Classification", "Cluster Analysis Extended Rousseeuw et al.", "Code Analysis Tools for R", "The R Compiler Package", "The R Datasets Package", "Read Data Stored by Minitab, S, SAS, SPSS, Stata, Systat, dBase,\n...", "The R Graphics Devices and Support for Colours and Fonts", "The R Graphics Package", "The Grid Graphics Package", "Lattice Graphics", "Formal Methods and Classes", 
args: "Mixed GAM Computation Vehicle with GCV/AIC/REML smoothness\nestimation", "Linear and Nonlinear Mixed Effects Models", "Feed-forward Neural Networks and Multinomial Log-Linear Models", "Support for Parallel computation in R", "Recursive Partitioning", "Functions for Kriging and Point Pattern Analysis", "Regression Spline Functions and Classes", "The R Stats Package", "Statistical Functions using S4 Classes", "Survival Analysis", "Tcl/Tk Interface", "Tools for Package Development", "The R Utils Package"
args: ), .Dim = c(29L, 3L), .Dimnames = list(NULL, c("Package", "LibPath", "Title"))), footer = NULL), .Names = c("header", "results", "footer"), class = "libraryIQR"))
retn: structure(list(header = NULL, results = structure(c("KernSmooth", "MASS", "Matrix", "base", "boot", "class", "cluster", "codetools", "compiler", "datasets", "foreign", "grDevices", "graphics", "grid", "lattice", "methods", "mgcv", "nlme", "nnet", "parallel", "rpart", "spatial", "splines", "stats", "stats4", "survival", "tcltk", "tools", "utils", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
retn: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
retn: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "Functions for kernel smoothing for Wand & Jones (1995)", "Support Functions and Datasets for Venables and Ripley's MASS", 
retn: "Sparse and Dense Matrix Classes and Methods", "The R Base Package", "Bootstrap Functions (originally by Angelo Canty for S)", "Functions for Classification", "Cluster Analysis Extended Rousseeuw et al.", "Code Analysis Tools for R", "The R Compiler Package", "The R Datasets Package", "Read Data Stored by Minitab, S, SAS, SPSS, Stata, Systat, dBase,\n...", "The R Graphics Devices and Support for Colours and Fonts", "The R Graphics Package", "The Grid Graphics Package", "Lattice Graphics", "Formal Methods and Classes", 
retn: "Mixed GAM Computation Vehicle with GCV/AIC/REML smoothness\nestimation", "Linear and Nonlinear Mixed Effects Models", "Feed-forward Neural Networks and Multinomial Log-Linear Models", "Support for Parallel computation in R", "Recursive Partitioning", "Functions for Kriging and Point Pattern Analysis", "Regression Spline Functions and Classes", "The R Stats Package", "Statistical Functions using S4 Classes", "Survival Analysis", "Tcl/Tk Interface", "Tools for Package Development", "The R Utils Package"
retn: ), .Dim = c(29L, 3L), .Dimnames = list(NULL, c("Package", "LibPath", "Title"))), footer = NULL), .Names = c("header", "results", "footer"), class = "libraryIQR")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(list(name = "utils", path = "/home/roman/r-instrumented/library/utils/libs/utils.so", dynamicLookup = FALSE, handle = <pointer: 0x26bfca0>, info = <pointer: 0x92dfc0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), structure(list(name = "methods", path = "/home/roman/r-instrumented/library/methods/libs/methods.so", dynamicLookup = FALSE, handle = <pointer: 0x3baeae0>, info = <pointer: 0x92e020>), .Names = c("name", "path", "dynamicLookup", 
args: "handle", "info"), class = "DLLInfo"), structure(list(name = "grDevices", path = "/home/roman/r-instrumented/library/grDevices/libs/grDevices.so", dynamicLookup = FALSE, handle = <pointer: 0x3a06f90>, info = <pointer: 0x92e080>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), structure(list(name = "graphics", path = "/home/roman/r-instrumented/library/graphics/libs/graphics.so", dynamicLookup = FALSE, handle = <pointer: 0x4525460>, info = <pointer: 0x92e0e0>), .Names = c("name", 
args: "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), structure(list(name = "stats", path = "/home/roman/r-instrumented/library/stats/libs/stats.so", dynamicLookup = FALSE, handle = <pointer: 0x6e55120>, info = <pointer: 0x92e140>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo")), class = "DLLInfoList"))
retn: structure(list(structure(list(name = "utils", path = "/home/roman/r-instrumented/library/utils/libs/utils.so", dynamicLookup = FALSE, handle = <pointer: 0x26bfca0>, info = <pointer: 0x92dfc0>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), structure(list(name = "methods", path = "/home/roman/r-instrumented/library/methods/libs/methods.so", dynamicLookup = FALSE, handle = <pointer: 0x3baeae0>, info = <pointer: 0x92e020>), .Names = c("name", "path", "dynamicLookup", 
retn: "handle", "info"), class = "DLLInfo"), structure(list(name = "grDevices", path = "/home/roman/r-instrumented/library/grDevices/libs/grDevices.so", dynamicLookup = FALSE, handle = <pointer: 0x3a06f90>, info = <pointer: 0x92e080>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), structure(list(name = "graphics", path = "/home/roman/r-instrumented/library/graphics/libs/graphics.so", dynamicLookup = FALSE, handle = <pointer: 0x4525460>, info = <pointer: 0x92e0e0>), .Names = c("name", 
retn: "path", "dynamicLookup", "handle", "info"), class = "DLLInfo"), structure(list(name = "stats", path = "/home/roman/r-instrumented/library/stats/libs/stats.so", dynamicLookup = FALSE, handle = <pointer: 0x6e55120>, info = <pointer: 0x92e140>), .Names = c("name", "path", "dynamicLookup", "handle", "info"), class = "DLLInfo")), class = "DLLInfoList")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(NA_real_, class = "Date"))
retn: structure(NA_real_, class = "Date")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(NA_real_, class = c("POSIXct", "POSIXt")))
retn: structure(NA_real_, class = c("POSIXct", "POSIXt"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(NA_real_, class = "difftime"))
retn: structure(NA_real_, class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, class = "difftime"))
retn: structure(0, class = "difftime")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = FALSE, y = FALSE), .Names = c("x", "y"), row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(x = FALSE, y = FALSE), .Names = c("x", "y"), row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "noquote"))
retn: list()

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, class = "noquote"))
retn: FALSE

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(integer(0)), class = "numeric_version"))
retn: structure(list(integer(0)), class = "numeric_version")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(integer(0)), class = c("package_version", "numeric_version")))
retn: structure(list(integer(0)), class = c("package_version", "numeric_version"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(30.748, 0.856, 31.818, 0, 0), .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child"), class = "proc_time"))
retn: structure(c(30.748, 0.856, 31.818, 0, 0), .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child"), class = "proc_time")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(qr = structure(numeric(0), .Dim = 0:1), rank = 0L, qraux = 0, pivot = 1L), .Names = c("qr", "rank", "qraux", "pivot"), class = "qr"))
retn: structure(list(qr = structure(numeric(0), .Dim = 0:1), rank = 0L, qraux = 0, pivot = 1L), .Names = c("qr", "rank", "qraux", "pivot"), class = "qr")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(qr = structure(0, .Dim = c(1L, 1L)), rank = 0L, qraux = 0, pivot = 1L), .Names = c("qr", "rank", "qraux", "pivot"), class = "qr"))
retn: structure(list(qr = structure(0, .Dim = c(1L, 1L)), rank = 0L, qraux = 0, pivot = 1L), .Names = c("qr", "rank", "qraux", "pivot"), class = "qr")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(qr = structure(0, .Dim = c(1L, 1L)), rank = 1L, qraux = 0, pivot = 1L), .Names = c("qr", "rank", "qraux", "pivot"), class = "qr"))
retn: structure(list(qr = structure(0, .Dim = c(1L, 1L)), rank = 1L, qraux = 0, pivot = 1L), .Names = c("qr", "rank", "qraux", "pivot"), class = "qr")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "data.frame", row.names = integer(0)))
retn: structure(list(), class = "data.frame", row.names = integer(0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE. = FALSE), .Names = "FALSE.", row.names = 1L, class = "data.frame"))
retn: structure(list(FALSE. = FALSE), .Names = "FALSE.", row.names = 1L, class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(c.FALSE..FALSE. = c(FALSE, FALSE)), .Names = "c.FALSE..FALSE.", row.names = 1:2, class = "data.frame"))
retn: structure(list(c.FALSE..FALSE. = c(FALSE, FALSE)), .Names = "c.FALSE..FALSE.", row.names = 1:2, class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = FALSE), .Names = "x", row.names = "FALSE", class = "data.frame"))
retn: structure(list(x = FALSE), .Names = "x", row.names = "FALSE", class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = character(0), call = NULL), .Names = c("message", "call"), class = c("simpleCondition", "condition")))
retn: structure(list(message = character(0), call = NULL), .Names = c("message", "call"), class = c("simpleCondition", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = "FALSE", call = NULL), .Names = c("message", "call"), class = c("simpleCondition", "condition")))
retn: structure(list(message = "FALSE", call = NULL), .Names = c("message", "call"), class = c("simpleCondition", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = character(0), call = list()), .Names = c("message", "call"), class = c("simpleCondition", "condition")))
retn: structure(list(message = character(0), call = list()), .Names = c("message", "call"), class = c("simpleCondition", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = "FALSE", call = FALSE), .Names = c("message", "call"), class = c("simpleCondition", "condition")))
retn: structure(list(message = "FALSE", call = FALSE), .Names = c("message", "call"), class = c("simpleCondition", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = character(0), call = NULL), .Names = c("message", "call"), class = c("simpleError", "error", "condition")))
retn: structure(list(message = character(0), call = NULL), .Names = c("message", "call"), class = c("simpleError", "error", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = "FALSE", call = NULL), .Names = c("message", "call"), class = c("simpleError", "error", "condition")))
retn: structure(list(message = "FALSE", call = NULL), .Names = c("message", "call"), class = c("simpleError", "error", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = character(0), call = list()), .Names = c("message", "call"), class = c("simpleError", "error", "condition")))
retn: structure(list(message = character(0), call = list()), .Names = c("message", "call"), class = c("simpleError", "error", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = "FALSE", call = FALSE), .Names = c("message", "call"), class = c("simpleError", "error", "condition")))
retn: structure(list(message = "FALSE", call = FALSE), .Names = c("message", "call"), class = c("simpleError", "error", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = NULL, call = NULL), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition")))
retn: structure(list(message = NULL, call = NULL), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = list(), call = NULL), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition")))
retn: structure(list(message = list(), call = NULL), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = FALSE, call = NULL), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition")))
retn: structure(list(message = FALSE, call = NULL), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = list(), call = list()), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition")))
retn: structure(list(message = list(), call = list()), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = FALSE, call = FALSE), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition")))
retn: structure(list(message = FALSE, call = FALSE), .Names = c("message", "call"), class = c("simpleMessage", "message", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = character(0), call = NULL), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition")))
retn: structure(list(message = character(0), call = NULL), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = "FALSE", call = NULL), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition")))
retn: structure(list(message = "FALSE", call = NULL), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = character(0), call = list()), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition")))
retn: structure(list(message = character(0), call = list()), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(message = "FALSE", call = FALSE), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition")))
retn: structure(list(message = "FALSE", call = FALSE), .Names = c("message", "call"), class = c("simpleWarning", "warning", "condition"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(2L, class = c("terminal", "connection")))
retn: structure(2L, class = c("terminal", "connection"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, class = c("terminal", "connection")))
retn: structure(1L, class = c("terminal", "connection"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c("0", "NULL", "NULL"), .Names = c("Length", "Class", "Mode"), class = c("summaryDefault", "table")))
retn: structure(c("0", "NULL", "NULL"), .Names = c("Length", "Class", "Mode"), class = c("summaryDefault", "table"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c("0", "list", "list"), .Names = c("Length", "Class", "Mode"), class = c("summaryDefault", "table")))
retn: structure(c("0", "list", "list"), .Names = c("Length", "Class", "Mode"), class = c("summaryDefault", "table"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c("logical", "1", "0"), .Names = c("Mode", "FALSE", "NA's"), class = c("summaryDefault", "table")))
retn: structure(c("logical", "1", "0"), .Names = c("Mode", "FALSE", "NA's"), class = c("summaryDefault", "table"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c("logical", "1"), .Names = c("Mode", "FALSE"), NAs = 0L, class = c("summaryDefault", "table")))
retn: structure(c("logical", "1"), .Names = c("Mode", "FALSE"), NAs = 0L, class = c("summaryDefault", "table"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(0, 0, 0, 0, 0), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child")))
retn: structure(c(0, 0, 0, 0, 0), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = 0L, .Dimnames = structure(list(NULL), .Names = ""), class = "table"))
retn: structure(integer(0), .Dim = 0L, .Dimnames = structure(list(NULL), .Names = ""), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(NULL, NULL), .Names = c("", "")), class = "table"))
retn: structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(NULL, NULL), .Names = c("", "")), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = 0L, .Dimnames = structure(list(l0 = NULL), .Names = "l0"), class = "table"))
retn: structure(integer(0), .Dim = 0L, .Dimnames = structure(list(l0 = NULL), .Names = "l0"), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), class = "table"))
retn: structure(integer(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = 0L, .Dimnames = structure(list(m0 = NULL), .Names = "m0"), class = "table"))
retn: structure(integer(0), .Dim = 0L, .Dimnames = structure(list(m0 = NULL), .Names = "m0"), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = 0L, .Dimnames = structure(list(df0 = NULL), .Names = "df0"), class = "table"))
retn: structure(integer(0), .Dim = 0L, .Dimnames = structure(list(df0 = NULL), .Names = "df0"), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Dim = 1L, .Dimnames = structure(list("FALSE"), .Names = ""), class = "table"))
retn: structure(1L, .Dim = 1L, .Dimnames = structure(list("FALSE"), .Names = ""), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(l0 = NULL, l0 = NULL), .Names = c("l0", "l0")), class = "table"))
retn: structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(l0 = NULL, l0 = NULL), .Names = c("l0", "l0")), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(c0 = NULL, c0 = NULL), .Names = c("c0", "c0")), class = "table"))
retn: structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(c0 = NULL, c0 = NULL), .Names = c("c0", "c0")), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(df0 = NULL, df0 = NULL), .Names = c("df0", "df0")), class = "table"))
retn: structure(integer(0), .Dim = c(0L, 0L), .Dimnames = structure(list(df0 = NULL, df0 = NULL), .Names = c("df0", "df0")), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Dim = c(1L, 1L), .Dimnames = structure(list("FALSE", "FALSE"), .Names = c("", "")), class = "table"))
retn: structure(1L, .Dim = c(1L, 1L), .Dimnames = structure(list("FALSE", "FALSE"), .Names = c("", "")), class = "table")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(X_data = FALSE), .Names = "X_data", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(X_data = FALSE), .Names = "X_data", row.names = c(NA, -1L), class = "data.frame")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(0.00400000000000489, 0, 0, 0, 0), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child")))
retn: structure(c(0.00400000000000489, 0, 0, 0, 0), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(0.00399999999999778, 0, 0, 0, 0), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child")))
retn: structure(c(0.00399999999999778, 0, 0, 0, 0), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(3L, class = c("unz", "connection"), conn_id = <pointer: 0xdd>))
retn: structure(3L, class = c("unz", "connection"), conn_id = <pointer: 0xdd>)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(), class = "warnings"))
retn: structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(), class = "warnings")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(NULL), class = "warnings"))
retn: structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(NULL), class = "warnings")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(NULL, NULL), class = "warnings"))
retn: structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(NULL, NULL), class = "warnings")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(list()), class = "warnings"))
retn: structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(list()), class = "warnings")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(FALSE), class = "warnings"))
retn: structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(FALSE), class = "warnings")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(list(), list()), class = "warnings"))
retn: structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(list(), list()), class = "warnings")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(FALSE, FALSE), class = "warnings"))
retn: structure(list(FALSEFALSE = NULL), .Names = "FALSEFALSE", dots = list(FALSE, FALSE), class = "warnings")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f()))
retn: quote(f())

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(NULL)))
retn: quote(f(NULL))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(, NULL)))
retn: quote(f(, NULL))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(NULL, NULL)))
retn: quote(f(NULL, NULL))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(list())))
retn: quote(f(list()))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(l0)))
retn: quote(f(l0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(c0)))
retn: quote(f(c0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(m0)))
retn: quote(f(m0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(df0)))
retn: quote(f(df0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(FALSE)))
retn: quote(f(FALSE))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(list(), list())))
retn: quote(f(list(), list()))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(l0, l0)))
retn: quote(f(l0, l0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(c0, c0)))
retn: quote(f(c0, c0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(df0, df0)))
retn: quote(f(df0, df0))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(quote(f(FALSE, FALSE)))
retn: quote(f(FALSE, FALSE))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("#000000", .Dim = c(1L, 1L), class = "raster"))
retn: structure("#000000", .Dim = c(1L, 1L))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Times", metrics = c("Times-Roman.afm", "Times-Bold.afm", "Times-Italic.afm", "Times-BoldItalic.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "Times", metrics = c("Times-Roman.afm", "Times-Bold.afm", "Times-Italic.afm", "Times-BoldItalic.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Helvetica", metrics = c("Helvetica.afm", "Helvetica-Bold.afm", "Helvetica-Oblique.afm", "Helvetica-BoldOblique.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "Helvetica", metrics = c("Helvetica.afm", "Helvetica-Bold.afm", "Helvetica-Oblique.afm", "Helvetica-BoldOblique.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Courier", metrics = c("Courier.afm", "Courier-Bold.afm", "Courier-Oblique.afm", "Courier-BoldOblique.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "Courier", metrics = c("Courier.afm", "Courier-Bold.afm", "Courier-Oblique.afm", "Courier-BoldOblique.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "AvantGarde", metrics = c("agw_____.afm", "agd_____.afm", "agwo____.afm", "agdo____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "AvantGarde", metrics = c("agw_____.afm", "agd_____.afm", "agwo____.afm", "agdo____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Bookman", metrics = c("bkl_____.afm", "bkd_____.afm", "bkli____.afm", "bkdi____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "Bookman", metrics = c("bkl_____.afm", "bkd_____.afm", "bkli____.afm", "bkdi____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Helvetica-Narrow", metrics = c("hvn_____.afm", "hvnb____.afm", "hvno____.afm", "hvnbo___.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "Helvetica-Narrow", metrics = c("hvn_____.afm", "hvnb____.afm", "hvno____.afm", "hvnbo___.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "NewCenturySchoolbook", metrics = c("ncr_____.afm", "ncb_____.afm", "nci_____.afm", "ncbi____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "NewCenturySchoolbook", metrics = c("ncr_____.afm", "ncb_____.afm", "nci_____.afm", "ncbi____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Palatino", metrics = c("por_____.afm", "pob_____.afm", "poi_____.afm", "pobi____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "Palatino", metrics = c("por_____.afm", "pob_____.afm", "poi_____.afm", "pobi____.afm", "Symbol.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "URWGothic", metrics = c("a010013l.afm", "a010015l.afm", "a010033l.afm", "a010035l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "URWGothic", metrics = c("a010013l.afm", "a010015l.afm", "a010033l.afm", "a010035l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "URWBookman", metrics = c("b018012l.afm", "b018015l.afm", "b018032l.afm", "b018035l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "URWBookman", metrics = c("b018012l.afm", "b018015l.afm", "b018032l.afm", "b018035l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "NimbusMon", metrics = c("n022003l.afm", "n022004l.afm", "n022023l.afm", "n022024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "NimbusMon", metrics = c("n022003l.afm", "n022004l.afm", "n022023l.afm", "n022024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "NimbusSan", metrics = c("n019003l.afm", "n019004l.afm", "n019023l.afm", "n019024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "NimbusSan", metrics = c("n019003l.afm", "n019004l.afm", "n019023l.afm", "n019024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "URWHelvetica", metrics = c("n019003l.afm", "n019004l.afm", "n019023l.afm", "n019024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "URWHelvetica", metrics = c("n019003l.afm", "n019004l.afm", "n019023l.afm", "n019024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "NimbusSanCond", metrics = c("n019043l.afm", "n019044l.afm", "n019063l.afm", "n019064l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "NimbusSanCond", metrics = c("n019043l.afm", "n019044l.afm", "n019063l.afm", "n019064l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "CenturySch", metrics = c("c059013l.afm", "c059016l.afm", "c059033l.afm", "c059036l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "CenturySch", metrics = c("c059013l.afm", "c059016l.afm", "c059033l.afm", "c059036l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "URWPalladio", metrics = c("p052003l.afm", "p052004l.afm", "p052023l.afm", "p052024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "URWPalladio", metrics = c("p052003l.afm", "p052004l.afm", "p052023l.afm", "p052024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "NimbusRom", metrics = c("n021003l.afm", "n021004l.afm", "n021023l.afm", "n021024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "NimbusRom", metrics = c("n021003l.afm", "n021004l.afm", "n021023l.afm", "n021024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "URWTimes", metrics = c("n021003l.afm", "n021004l.afm", "n021023l.afm", "n021024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "URWTimes", metrics = c("n021003l.afm", "n021004l.afm", "n021023l.afm", "n021024l.afm", "s050000l.afm"), encoding = "default"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "KozMinPro-Regular-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 740 /Ascent 1075 /Descent -272 /StemV 72\n        /FontBBox [-195 -272 1110 1075]\n        /ItalicAngle 0 /Flags 6 /XHeight 502\n        /Style << /Panose <000001000500000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500 \n         8718 [500 500] \n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "KozMinPro-Regular-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 740 /Ascent 1075 /Descent -272 /StemV 72\n        /FontBBox [-195 -272 1110 1075]\n        /ItalicAngle 0 /Flags 6 /XHeight 502\n        /Style << /Panose <000001000500000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500 \n         8718 [500 500] \n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "HeiseiMin-W3-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 709 /Ascent 723 /Descent -241 /StemV 69\n        /FontBBox [-123 -257 1001 910]\n        /ItalicAngle 0 /Flags 6 /XHeight 450\n        /Style << /Panose <000002020500000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500 \n         8718 [500 500] \n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "HeiseiMin-W3-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 709 /Ascent 723 /Descent -241 /StemV 69\n        /FontBBox [-123 -257 1001 910]\n        /ItalicAngle 0 /Flags 6 /XHeight 450\n        /Style << /Panose <000002020500000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500 \n         8718 [500 500] \n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "GothicBBB-Medium", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 737 /Ascent 752 /Descent -271 /StemV 99\n        /FontBBox [-22 -252 1000 892]\n        /ItalicAngle 0 /Flags 4\n        /Style << /Panose <0801020b0500000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500\n         8718 [500 500]\n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "GothicBBB-Medium", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 737 /Ascent 752 /Descent -271 /StemV 99\n        /FontBBox [-22 -252 1000 892]\n        /ItalicAngle 0 /Flags 4\n        /Style << /Panose <0801020b0500000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500\n         8718 [500 500]\n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Ryumin-Light", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 709 /Ascent 723 /Descent -241 /StemV 69\n        /FontBBox [-54 -305 1000 903]\n        /ItalicAngle 0 /Flags 6\n        /Style << /Panose <010502020300000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500\n         8718 [500 500]\n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "Ryumin-Light", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 709 /Ascent 723 /Descent -241 /StemV 69\n        /FontBBox [-54 -305 1000 903]\n        /ItalicAngle 0 /Flags 6\n        /Style << /Panose <010502020300000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Japan1) /Supplement  2 >>\n      /DW 1000\n      /W [\n         1 632 500\n         8718 [500 500]\n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "HYSMyeongJoStd-Medium-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 720 /Ascent 880 /Descent -148 /StemV 59\n        /FontBBox [-28 -148 1001 880]\n        /ItalicAngle 0 /Flags 6 /XHeight 468\n        /Style << /Panose <000001000600000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Korea1) /Supplement 1 >>\n      /DW 1000\n      /W [\n         1 94 500\n         97 [500] \n         8094 8190 500\n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "HYSMyeongJoStd-Medium-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 720 /Ascent 880 /Descent -148 /StemV 59\n        /FontBBox [-28 -148 1001 880]\n        /ItalicAngle 0 /Flags 6 /XHeight 468\n        /Style << /Panose <000001000600000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Korea1) /Supplement 1 >>\n      /DW 1000\n      /W [\n         1 94 500\n         97 [500] \n         8094 8190 500\n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "HYGothic-Medium-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 737 /Ascent 752 /Descent -271 /StemV 58\n        /FontBBox [-6 -145 1003 880]\n        /ItalicAngle 0 /Flags 4 /XHeight 553\n        /Style << /Panose <000001000600000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Korea1) /Supplement 1 >>\n      /DW 1000\n      /W [\n         1 94 500\n         97 [500] \n         8094 8190 500\n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "HYGothic-Medium-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 737 /Ascent 752 /Descent -271 /StemV 58\n        /FontBBox [-6 -145 1003 880]\n        /ItalicAngle 0 /Flags 4 /XHeight 553\n        /Style << /Panose <000001000600000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(Korea1) /Supplement 1 >>\n      /DW 1000\n      /W [\n         1 94 500\n         97 [500] \n         8094 8190 500\n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "MSungStd-Light-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "B5pc-H", cmapEncoding = "CP950", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 662 /Ascent 1071 /Descent -249 /StemV 66\n        /FontBBox [-160 -249 1015 1071]\n        /ItalicAngle 0 /Flags 6 /XHeight 400\n        /Style << /Panose <000001000600000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(CNS1) /Supplement  0 >>\n      /DW 1000\n      /W [\n           1 33 500\n           34 [749 673 679 679 685 671 738 736 333 494 739 696 902 720 750 674 746 672 627 769 707 777 887 709 616]\n           60 65 500\n           66 [500 511 502 549 494 356 516 550 321 321 510 317 738 533 535 545 533 376 443 261 529 742 534 576 439]\n           92 95 500\n           13648 13742 500\n           17603 [500]\n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "MSungStd-Light-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "B5pc-H", cmapEncoding = "CP950", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 662 /Ascent 1071 /Descent -249 /StemV 66\n        /FontBBox [-160 -249 1015 1071]\n        /ItalicAngle 0 /Flags 6 /XHeight 400\n        /Style << /Panose <000001000600000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(CNS1) /Supplement  0 >>\n      /DW 1000\n      /W [\n           1 33 500\n           34 [749 673 679 679 685 671 738 736 333 494 739 696 902 720 750 674 746 672 627 769 707 777 887 709 616]\n           60 65 500\n           66 [500 511 502 549 494 356 516 550 321 321 510 317 738 533 535 545 533 376 443 261 529 742 534 576 439]\n           92 95 500\n           13648 13742 500\n           17603 [500]\n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "STSong-Light-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "GBK-EUC-H", cmapEncoding = "GBK", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 626 /Ascent 905 /Descent -254 /StemV 48\n        /FontBBox [-134 -254 1001 905]\n        /ItalicAngle 0 /Flags 6 /XHeight 416\n        /Style << /Panose <000000000400000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(GB1) /Supplement  2 >>\n      /DW 1000\n      /W [\n           1 95 500\n           814 939 500\n           7712 7716 500\n           22127 22357 500\n      ]\n"), .Names = c("family", 
args: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "STSong-Light-Acro", metrics = c("", "", "", "", "Symbol.afm"), cmap = "GBK-EUC-H", cmapEncoding = "GBK", pdfresource = "/FontDescriptor\n      <<\n        /Type /FontDescriptor\n        /CapHeight 626 /Ascent 905 /Descent -254 /StemV 48\n        /FontBBox [-134 -254 1001 905]\n        /ItalicAngle 0 /Flags 6 /XHeight 416\n        /Style << /Panose <000000000400000000000000> >>\n      >>\n      /CIDSystemInfo << /Registry(Adobe) /Ordering(GB1) /Supplement  2 >>\n      /DW 1000\n      /W [\n           1 95 500\n           814 939 500\n           7712 7716 500\n           22127 22357 500\n      ]\n"), .Names = c("family", 
retn: "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "ComputerModern", metrics = c("CM_regular_10.afm", "CM_boldx_10.afm", "CM_italic_10.afm", "CM_boldx_italic_10.afm", "CM_symbol_10.afm"), encoding = "TeXtext.enc"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "ComputerModern", metrics = c("CM_regular_10.afm", "CM_boldx_10.afm", "CM_italic_10.afm", "CM_boldx_italic_10.afm", "CM_symbol_10.afm"), encoding = "TeXtext.enc"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "ComputerModernItalic", metrics = c("CM_regular_10.afm", "CM_boldx_10.afm", "cmti10.afm", "cmbxti10.afm", "CM_symbol_10.afm"), encoding = "TeXtext.enc"), .Names = c("family", "metrics", "encoding"), class = "Type1Font"))
retn: structure(list(family = "ComputerModernItalic", metrics = c("CM_regular_10.afm", "CM_boldx_10.afm", "cmti10.afm", "cmbxti10.afm", "CM_symbol_10.afm"), encoding = "TeXtext.enc"), .Names = c("family", "metrics", "encoding"), class = "Type1Font")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "HeiseiKakuGo-W5", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "HeiseiKakuGo-W5", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "HeiseiMin-W3", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "HeiseiMin-W3", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "GothicBBB-Medium", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "GothicBBB-Medium", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Ryumin-Light", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "Ryumin-Light", metrics = c("", "", "", "", "Symbol.afm"), cmap = "EUC-H", cmapEncoding = "EUC-JP", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Baekmuk-Batang", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "Baekmuk-Batang", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "Batang-Regular", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "Batang-Regular", metrics = c("", "", "", "", "Symbol.afm"), cmap = "KSCms-UHC-H", cmapEncoding = "CP949", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "MOESung-Regular", metrics = c("", "", "", "", "Symbol.afm"), cmap = "B5pc-H", cmapEncoding = "CP950", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "MOESung-Regular", metrics = c("", "", "", "", "Symbol.afm"), cmap = "B5pc-H", cmapEncoding = "CP950", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "BousungEG-Light-GB", metrics = c("", "", "", "", "Symbol.afm"), cmap = "GBK-EUC-H", cmapEncoding = "GBK", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont"))
retn: structure(list(family = "BousungEG-Light-GB", metrics = c("", "", "", "", "Symbol.afm"), cmap = "GBK-EUC-H", cmapEncoding = "GBK", pdfresource = ""), .Names = c("family", "metrics", "cmap", "cmapEncoding", "pdfresource"), class = "CIDFont")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: <arguments too long, ignored>
retn: <arguments too long, ignored>

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(0, 0, 0, 0, 0), .Dim = c(5L, 1L), class = structure("logical", .Names = "1")))
retn: structure(c(0, 0, 0, 0, 0), .Dim = c(5L, 1L), class = structure("logical", .Names = "1"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(5L, 2L), class = structure("logical", .Names = "1")))
retn: structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(5L, 2L), class = structure("logical", .Names = "1"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"))
retn: structure(0.25, unit = "inches", valid.unit = 2L, class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L), .Names = c("angle", "length", "ends", "type"), class = "arrow"))
retn: structure(list(angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L), .Names = c("angle", "length", "ends", "type"), class = "arrow")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(angle = numeric(0), length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L), .Names = c("angle", "length", "ends", "type"), class = "arrow"))
retn: structure(list(angle = numeric(0), length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L), .Names = c("angle", "length", "ends", "type"), class = "arrow")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(angle = 0, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L), .Names = c("angle", "length", "ends", "type"), class = "arrow"))
retn: structure(list(angle = 0, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L), .Names = c("angle", "length", "ends", "type"), class = "arrow")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(c(0.25, 0.75), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.1", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", 
args: "children", "childrenOrder"), class = c("arrows", "gTree", "grob", "gDesc")))
retn: structure(list(x = structure(c(0.25, 0.75), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.1", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", 
retn: "childrenOrder"), class = c("arrows", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.2", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", 
args: "childrenOrder"), class = c("arrows", "gTree", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.2", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", "childrenOrder"
retn: ), class = c("arrows", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.3", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", 
args: "childrenOrder"), class = c("arrows", "gTree", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.3", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", "childrenOrder"
retn: ), class = c("arrows", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "null", valid.unit = 5L, class = "unit"))
retn: structure(1, unit = "null", valid.unit = 5L, class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(c(0, 0.5, 1, 0.5), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0.5, 1, 0.5, 0), unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, arrow = NULL, name = "GRID.beziergrob.4", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "arrow", "name", "gp", "vp"), class = c("beziergrob", "grob", "gDesc")))
retn: structure(list(x = structure(c(0, 0.5, 1, 0.5), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0.5, 1, 0.5, 0), unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, arrow = NULL, name = "GRID.beziergrob.4", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "arrow", "name", "gp", "vp"), class = c("beziergrob", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.5", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc")))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.5", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.6", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.6", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.7", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.7", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.clip.8", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("clip", "grob", "gDesc"
args: )))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.clip.8", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("clip", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.clip.9", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("clip", "grob", "gDesc"
args: )))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.clip.9", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("clip", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.clip.10", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("clip", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.clip.10", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("clip", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = TRUE, xscale = c(0, 504), yscale = c(0, 504), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 
args: 0.5), valid.pos.row = NULL, valid.pos.col = NULL, name = "ROOT"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = TRUE, xscale = c(0, 504), yscale = c(0, 504), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5
retn: ), valid.pos.row = NULL, valid.pos.col = NULL, name = "ROOT"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 0), yscale = c(0, 0), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 
args: 0.5), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.1"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 0), yscale = c(0, 0), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5), 
retn:     valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.1"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, unit = "inches", valid.unit = 2L, class = "unit"))
retn: structure(0, unit = "inches", valid.unit = 2L, class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.11", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.11", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.12", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.12", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.13", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.13", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.14", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.14", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.15", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.15", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.16", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.16", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.17", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.17", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.18", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.18", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.19", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.19", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.20", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.20", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.21", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.21", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "gEdit"))
retn: structure(list(), class = "gEdit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL), class = "gEdit"))
retn: structure(list(NULL), class = "gEdit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL), class = "gEdit"))
retn: structure(list(NULL, NULL), class = "gEdit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list()), class = "gEdit"))
retn: structure(list(list()), class = "gEdit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE), class = "gEdit"))
retn: structure(list(FALSE), class = "gEdit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list(), list()), class = "gEdit"))
retn: structure(list(list(), list()), class = "gEdit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE, FALSE), class = "gEdit"))
retn: structure(list(FALSE, FALSE), class = "gEdit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "gEditList"))
retn: structure(list(), class = "gEditList")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "gList"))
retn: structure(list(), class = "gList")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.22", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.22", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.gTree.23", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.gTree.23", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.gTree.24", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.gTree.24", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.gTree.25", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.gTree.25", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list(), name = "GRID.gTree.26", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(list(), name = "GRID.gTree.26", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.gTree.27", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.gTree.27", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.gTree.28", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.gTree.28", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.gTree.29", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.gTree.29", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.gTree.30", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.gTree.30", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE, name = "GRID.gTree.31", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(FALSE, name = "GRID.gTree.31", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list(), list(), name = "GRID.gTree.32", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(list(), list(), name = "GRID.gTree.32", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.gTree.33", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.gTree.33", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.gTree.34", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.gTree.34", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.gTree.35", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.gTree.35", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE, FALSE, name = "GRID.gTree.36", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(FALSE, FALSE, name = "GRID.gTree.36", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("", "", "name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(fill = "transparent", col = "black", lty = "solid", lwd = 1, cex = 1, fontsize = 12, lineheight = 1.2, font = 1L, fontfamily = "", alpha = 1, lineend = "round", linejoin = "round", linemitre = 10, lex = 1), .Names = c("fill", "col", "lty", "lwd", "cex", "fontsize", "lineheight", "font", "fontfamily", "alpha", "lineend", "linejoin", "linemitre", "lex"), class = "gpar"))
retn: structure(list(fill = "transparent", col = "black", lty = "solid", lwd = 1, cex = 1, fontsize = 12, lineheight = 1.2, font = 1L, fontfamily = "", alpha = 1, lineend = "round", linejoin = "round", linemitre = 10, lex = 1), .Names = c("fill", "col", "lty", "lwd", "cex", "fontsize", "lineheight", "font", "fontfamily", "alpha", "lineend", "linejoin", "linemitre", "lex"), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "gpar"))
retn: structure(list(), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL), class = "gpar"))
retn: structure(list(NULL), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL), class = "gpar"))
retn: structure(list(NULL, NULL), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list()), class = "gpar"))
retn: structure(list(list()), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE), class = "gpar"))
retn: structure(list(FALSE), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list(), list()), class = "gpar"))
retn: structure(list(list(), list()), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE, FALSE), class = "gpar"))
retn: structure(list(FALSE, FALSE), class = "gpar")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.53", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", 
args: "childrenOrder"), class = c("arrows", "gTree", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.53", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", "childrenOrder"
retn: ), class = c("arrows", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.54", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", 
args: "childrenOrder"), class = c("arrows", "gTree", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), angle = 30, length = structure(0.25, unit = "inches", valid.unit = 2L, class = "unit"), ends = 2L, type = 1L, name = "GRID.arrows.54", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("x", "y", "angle", "length", "ends", "type", "name", "gp", "vp", "children", "childrenOrder"
retn: ), class = c("arrows", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.57", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.57", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.58", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.circle.58", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "r", "name", "gp", "vp"), class = c("circle", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.62", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.62", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.63", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.63", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.64", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.64", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.65", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.65", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.67", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.67", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.68", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.68", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.69", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.69", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.70", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.70", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.73", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.73", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.74", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.74", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.collection.75", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.collection.75", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("collection", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.85", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.85", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.86", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.86", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.87", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.87", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.88", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.88", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.89", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.89", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.90", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.90", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.91", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.91", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.92", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.92", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.93", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.93", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(framevp = NULL, name = "GRID.frame.94", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc")))
retn: structure(list(framevp = NULL, name = "GRID.frame.94", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("framevp", "name", "gp", "vp", "children", "childrenOrder"), class = c("frame", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.grob.101", gp = NULL, vp = NULL), .Names = c("name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(name = "GRID.grob.101", gp = NULL, vp = NULL), .Names = c("name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.grob.102", gp = NULL, vp = NULL), .Names = c("name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(name = "GRID.grob.102", gp = NULL, vp = NULL), .Names = c("name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(nrow = 1L, ncol = 1L, widths = structure(1, unit = "null", valid.unit = 5L, class = "unit"), heights = structure(1, unit = "null", valid.unit = 5L, class = "unit"), respect = FALSE, valid.respect = 0L, respect.mat = structure(0L, .Dim = c(1L, 1L)), just = "centre", valid.just = c(0.5, 0.5)), .Names = c("nrow", "ncol", "widths", "heights", "respect", "valid.respect", "respect.mat", "just", "valid.just"), class = "layout"))
retn: structure(list(nrow = 1L, ncol = 1L, widths = structure(1, unit = "null", valid.unit = 5L, class = "unit"), heights = structure(1, unit = "null", valid.unit = 5L, class = "unit"), respect = FALSE, valid.respect = 0L, respect.mat = structure(0L, .Dim = c(1L, 1L)), just = "centre", valid.just = c(0.5, 0.5)), .Names = c("nrow", "ncol", "widths", "heights", "respect", "valid.respect", "respect.mat", "just", "valid.just"), class = "layout")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.109", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.109", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.110", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.110", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.112", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.112", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.113", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.113", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.115", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.115", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.116", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.116", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), pch = 1L, size = structure(1, unit = "char", valid.unit = 18L, class = "unit"), name = "GRID.points.143", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "pch", "size", "name", "gp", "vp"), class = c("points", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), pch = 1L, size = structure(1, unit = "char", valid.unit = 18L, class = "unit"), name = "GRID.points.143", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "pch", "size", "name", "gp", "vp"), class = c("points", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, name = "GRID.polygon.145", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "name", "gp", "vp"), class = c("polygon", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, name = "GRID.polygon.145", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "name", "gp", "vp"), class = c("polygon", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.158", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
args: "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.158", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.159", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
args: "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.159", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.164", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")))
retn: structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.164", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.165", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")))
retn: structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.165", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.219", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.219", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.220", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.220", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.221", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.221", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.222", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.222", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.223", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.223", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.224", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.224", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = "FALSE", x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.225", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = "FALSE", x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.225", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = "FALSE", x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.226", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = "FALSE", x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.226", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.227", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.227", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.228", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.228", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.229", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.229", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.230", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.230", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.231", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.231", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.232", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.232", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.233", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
args:     label = "FALSE", x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(-1.5, unit = "lines", valid.unit = 3L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels")), 
args:     childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.233", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
retn:     label = "FALSE", x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(-1.5, unit = "lines", valid.unit = 3L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels")), 
retn:     childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.xaxis.234", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
args: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.xaxis.234", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
retn: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.237", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.237", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.238", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.238", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.239", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.239", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.240", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.240", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.241", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.241", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.242", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.242", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.243", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
args:     label = "FALSE", x = structure(-1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), just = c("right", "centre"), hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels"
args: )), childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.243", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
retn:     label = "FALSE", x = structure(-1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), just = c("right", "centre"), hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels"
retn: )), childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.yaxis.244", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
args: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.yaxis.244", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
retn: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.grob.245", gp = NULL, vp = NULL), .Names = c("name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(name = "GRID.grob.245", gp = NULL, vp = NULL), .Names = c("name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.grob.246", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.grob.246", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.grob.247", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.grob.247", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.grob.248", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.grob.248", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list(), name = "GRID.grob.249", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(list(), name = "GRID.grob.249", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.grob.250", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.grob.250", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.grob.251", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.grob.251", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.grob.252", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.grob.252", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, name = "GRID.grob.253", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, name = "GRID.grob.253", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE, name = "GRID.grob.254", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(FALSE, name = "GRID.grob.254", gp = NULL, vp = NULL), .Names = c("", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(list(), list(), name = "GRID.grob.255", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(list(), list(), name = "GRID.grob.255", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.grob.256", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.grob.256", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.grob.257", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.grob.257", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(NULL, NULL, name = "GRID.grob.258", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(NULL, NULL, name = "GRID.grob.258", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(FALSE, FALSE, name = "GRID.grob.259", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc")))
retn: structure(list(FALSE, FALSE, name = "GRID.grob.259", gp = NULL, vp = NULL), .Names = c("", "", "name", "gp", "vp"), class = c("grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "grobascent", valid.unit = 23L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit"))
retn: structure(1, unit = "grobascent", valid.unit = 23L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "grobdescent", valid.unit = 24L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit"))
retn: structure(1, unit = "grobdescent", valid.unit = 24L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "grobheight", valid.unit = 22L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit"))
retn: structure(1, unit = "grobheight", valid.unit = 22L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.271", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.271", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.272", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.272", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.273", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.273", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.274", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.274", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.276", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.276", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.277", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.277", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.278", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.278", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.279", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.279", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.282", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.282", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.283", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.283", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "GRID.gTree.284", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc")))
retn: structure(list(name = "GRID.gTree.284", gp = NULL, vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("name", "gp", "vp", "children", "childrenOrder"), class = c("gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "grobwidth", valid.unit = 21L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit"))
retn: structure(1, unit = "grobwidth", valid.unit = 21L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, unit = "grobx", valid.unit = 19L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit"))
retn: structure(0, unit = "grobx", valid.unit = 19L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, unit = "groby", valid.unit = 20L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit"))
retn: structure(0, unit = "groby", valid.unit = 20L, data = list(structure(list(path = NULL, name = "FALSE", n = 1L), .Names = c("path", "name", "n"), class = c("gPath", "path"))), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = "Absolute and relative -- bottom-right respected", x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(1, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.467", gp = structure(list(
args:     font = 2L), .Names = "font", class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = "Absolute and relative -- bottom-right respected", x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(1, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.467", gp = structure(list(
retn:     font = 2L), .Names = "font", class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.468", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc")))
retn: structure(list(x = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.468", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.469", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.469", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.470", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.line.to.470", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("line.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.471", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc")))
retn: structure(list(x = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.471", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.472", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.472", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.473", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.lines.473", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.474", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.474", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.475", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.475", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.476", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.move.to.476", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("move.to", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.null.477", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("null", "grob", "gDesc")))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.null.477", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("null", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.null.478", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("null", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.null.478", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("null", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.null.479", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("null", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), name = "GRID.null.479", gp = NULL, vp = NULL), .Names = c("x", "y", "name", "gp", "vp"), class = c("null", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, rule = "winding", name = "GRID.pathgrob.480", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "rule", "name", "gp", "vp"), class = c("pathgrob", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, rule = "winding", name = "GRID.pathgrob.480", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "rule", "name", "gp", "vp"), class = c("pathgrob", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(4.1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(5.1, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(6.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(9.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.110"), .Names = c("x", "y", "width", "height", "justification", "gp", 
args: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(4.1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(5.1, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(6.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(9.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.110"), .Names = c("x", "y", "width", "height", "justification", "gp", 
retn: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.111"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.111"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(4.1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(5.1, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(6.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(9.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.112"), .Names = c("x", "y", "width", "height", "justification", "gp", 
args: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(4.1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(5.1, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(6.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(9.2, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.112"), .Names = c("x", "y", "width", "height", "justification", "gp", 
retn: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.113"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.113"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.114"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.114"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.115"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.115"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.116"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.116"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.117"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.117"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.118"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.118"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.119"), .Names = c("x", "y", "width", "height", "justification", "gp", 
args: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.119"), .Names = c("x", "y", "width", "height", "justification", "gp", 
retn: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.120"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.120"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.121"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.121"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.122"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.122"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.123"), .Names = c("x", "y", "width", "height", "justification", 
args: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(NA_real_, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.123"), .Names = c("x", "y", "width", "height", "justification", 
retn: "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
args:     arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.124"), .Names = c("x", "y", "width", "height", "justification", "gp", 
args: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "lines", valid.unit = 3L, class = "unit"), width = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), height = structure(list(fname = "-", arg1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), 
retn:     arg2 = structure(0, unit = "lines", valid.unit = 3L, class = "unit")), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")), justification = c("left", "bottom"), gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.124"), .Names = c("x", "y", "width", "height", "justification", "gp", 
retn: "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), pch = 1L, size = structure(1, unit = "char", valid.unit = 18L, class = "unit"), name = "GRID.points.481", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "pch", "size", "name", "gp", "vp"), class = c("points", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), pch = 1L, size = structure(1, unit = "char", valid.unit = 18L, class = "unit"), name = "GRID.points.481", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "pch", "size", "name", "gp", "vp"), class = c("points", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(c(0, 0.5, 1, 0.5), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0.5, 1, 0.5, 0), unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, name = "GRID.polygon.482", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "name", "gp", "vp"), class = c("polygon", "grob", "gDesc")))
retn: structure(list(x = structure(c(0, 0.5, 1, 0.5), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0.5, 1, 0.5, 0), unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, name = "GRID.polygon.482", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "name", "gp", "vp"), class = c("polygon", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, name = "GRID.polygon.483", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "name", "gp", "vp"), class = c("polygon", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, name = "GRID.polygon.483", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "name", "gp", "vp"), class = c("polygon", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, arrow = NULL, name = "GRID.polyline.484", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "arrow", "name", "gp", "vp"), class = c("polyline", "grob", "gDesc")))
retn: structure(list(x = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 1), unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, arrow = NULL, name = "GRID.polyline.484", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "arrow", "name", "gp", "vp"), class = c("polyline", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, arrow = NULL, name = "GRID.polyline.485", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "arrow", "name", "gp", "vp"), class = c("polyline", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), id = NULL, id.lengths = NULL, arrow = NULL, name = "GRID.polyline.485", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "id", "id.lengths", "arrow", "name", "gp", "vp"), class = c("polyline", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(raster = structure("#000000", .Dim = c(1L, 1L), class = "raster"), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = NULL, height = NULL, just = "centre", hjust = NULL, vjust = NULL, interpolate = TRUE, name = "GRID.rastergrob.486", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("raster", "x", "y", "width", "height", "just", "hjust", "vjust", "interpolate", "name", "gp", 
args: "vp"), class = c("rastergrob", "grob", "gDesc")))
retn: structure(list(raster = structure("#000000", .Dim = c(1L, 1L), class = "raster"), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = NULL, height = NULL, just = "centre", hjust = NULL, vjust = NULL, interpolate = TRUE, name = "GRID.rastergrob.486", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("raster", "x", "y", "width", "height", "just", "hjust", "vjust", "interpolate", "name", "gp", "vp"
retn: ), class = c("rastergrob", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(raster = structure("#000000", .Dim = c(1L, 1L), class = "raster"), x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = NULL, height = NULL, just = "centre", hjust = NULL, vjust = NULL, interpolate = TRUE, name = "GRID.rastergrob.487", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("raster", "x", "y", "width", "height", "just", "hjust", "vjust", "interpolate", "name", "gp", "vp"
args: ), class = c("rastergrob", "grob", "gDesc")))
retn: structure(list(raster = structure("#000000", .Dim = c(1L, 1L), class = "raster"), x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = NULL, height = NULL, just = "centre", hjust = NULL, vjust = NULL, interpolate = TRUE, name = "GRID.rastergrob.487", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("raster", "x", "y", "width", "height", "just", "hjust", "vjust", "interpolate", "name", "gp", "vp"), class = c("rastergrob", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.488", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
args: "grob", "gDesc")))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.488", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.489", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
args: "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.489", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.490", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
args: "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, name = "GRID.rect.490", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "width", "height", "just", "hjust", "vjust", "name", "gp", "vp"), class = c("rect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.1, unit = "snpc", valid.unit = 6L, class = "unit"), just = "centre", name = "GRID.roundrect.491", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "r", "just", "name", "gp", "vp"
args: ), class = c("roundrect", "grob", "gDesc")))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.1, unit = "snpc", valid.unit = 6L, class = "unit"), just = "centre", name = "GRID.roundrect.491", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "r", "just", "name", "gp", "vp"), class = c("roundrect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.1, unit = "snpc", valid.unit = 6L, class = "unit"), just = "centre", name = "GRID.roundrect.492", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "r", "just", "name", "gp", "vp"), class = c("roundrect", 
args: "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.1, unit = "snpc", valid.unit = 6L, class = "unit"), just = "centre", name = "GRID.roundrect.492", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "r", "just", "name", "gp", "vp"), class = c("roundrect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.1, unit = "snpc", valid.unit = 6L, class = "unit"), just = "centre", name = "GRID.roundrect.493", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "r", "just", "name", "gp", "vp"), class = c("roundrect", 
args: "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), r = structure(0.1, unit = "snpc", valid.unit = 6L, class = "unit"), just = "centre", name = "GRID.roundrect.493", gp = NULL, vp = NULL), .Names = c("x", "y", "width", "height", "r", "just", "name", "gp", "vp"), class = c("roundrect", 
retn: "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.494", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")))
retn: structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.494", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.495", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")))
retn: structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.495", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.496", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")))
retn: structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), y1 = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "GRID.segments.496", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "strascent", valid.unit = 16L, data = list("FALSE"), class = "unit"))
retn: structure(1, unit = "strascent", valid.unit = 16L, data = list("FALSE"), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "strdescent", valid.unit = 17L, data = list("FALSE"), class = "unit"))
retn: structure(1, unit = "strdescent", valid.unit = 17L, data = list("FALSE"), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "strheight", valid.unit = 15L, data = list("FALSE"), class = "unit"))
retn: structure(1, unit = "strheight", valid.unit = 15L, data = list("FALSE"), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1, unit = "strwidth", valid.unit = 14L, data = list("FALSE"), class = "unit"))
retn: structure(1, unit = "strwidth", valid.unit = 14L, data = list("FALSE"), class = "unit")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.497", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.497", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.498", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.498", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.499", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.499", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.500", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.500", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.501", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.501", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.502", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = character(0), x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.502", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = "FALSE", x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.503", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = "FALSE", x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.503", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(label = "FALSE", x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.504", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc")))
retn: structure(list(label = "FALSE", x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = "GRID.text.504", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(fname = "max", arg1 = structure(list(), class = c("unit.list", "unit")), arg2 = NULL), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")))
retn: structure(list(fname = "max", arg1 = structure(list(), class = c("unit.list", "unit")), arg2 = NULL), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(fname = "min", arg1 = structure(list(), class = c("unit.list", "unit")), arg2 = NULL), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit")))
retn: structure(list(fname = "min", arg1 = structure(list(), class = c("unit.list", "unit")), arg2 = NULL), .Names = c("fname", "arg1", "arg2"), class = c("unit.arithmetic", "unit"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 
args: 0.5), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.125"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5), 
retn:     valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.125"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5
args: ), valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.126"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0.5, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5), valid.pos.row = NULL, 
retn:     valid.pos.col = NULL, name = "GRID.VP.126"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5), 
args:     valid.pos.row = NULL, valid.pos.col = NULL, name = "GRID.VP.127"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport"))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), width = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), height = structure(1, unit = "npc", valid.unit = 0L, class = "unit"), justification = "centre", gp = structure(list(), class = "gpar"), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5), valid.pos.row = NULL, 
retn:     valid.pos.col = NULL, name = "GRID.VP.127"), .Names = c("x", "y", "width", "height", "justification", "gp", "clip", "xscale", "yscale", "angle", "layout", "layout.pos.row", "layout.pos.col", "valid.just", "valid.pos.row", "valid.pos.col", "name"), class = "viewport")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = c("vpList", "viewport")))
retn: structure(list(), class = c("vpList", "viewport"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = c("vpStack", "viewport")))
retn: structure(list(), class = c("vpStack", "viewport"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.506", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.506", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.507", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.507", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.508", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.508", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.509", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.509", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.510", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.510", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.511", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
args:     label = "FALSE", x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(-1.5, unit = "lines", valid.unit = 3L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels")), 
args:     childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.xaxis.511", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
retn:     label = "FALSE", x = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y = structure(-1.5, unit = "lines", valid.unit = 3L, class = "unit"), just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels")), 
retn:     childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.xaxis.512", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
args: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.xaxis.512", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), y = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), x1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), y1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
retn: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("xaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(c(0, 0.5, 1, 0.5), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0.5, 1, 0.5, 0), unit = "npc", valid.unit = 0L, class = "unit"), shape = c(0, 0, 0, 0), open = TRUE, id = NULL, id.lengths = NULL, arrow = NULL, repEnds = TRUE, name = "GRID.xspline.513", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "shape", "open", "id", "id.lengths", "arrow", "repEnds", "name", "gp", "vp"), class = c("xspline", "grob", "gDesc")))
retn: structure(list(x = structure(c(0, 0.5, 1, 0.5), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0.5, 1, 0.5, 0), unit = "npc", valid.unit = 0L, class = "unit"), shape = c(0, 0, 0, 0), open = TRUE, id = NULL, id.lengths = NULL, arrow = NULL, repEnds = TRUE, name = "GRID.xspline.513", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "shape", "open", "id", "id.lengths", "arrow", "repEnds", "name", "gp", "vp"), class = c("xspline", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), shape = 0, open = TRUE, id = NULL, id.lengths = NULL, arrow = NULL, repEnds = TRUE, name = "GRID.xspline.514", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "shape", "open", "id", "id.lengths", "arrow", "repEnds", "name", "gp", "vp"), class = c("xspline", "grob", "gDesc")))
retn: structure(list(x = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), shape = 0, open = TRUE, id = NULL, id.lengths = NULL, arrow = NULL, repEnds = TRUE, name = "GRID.xspline.514", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "shape", "open", "id", "id.lengths", "arrow", "repEnds", "name", "gp", "vp"), class = c("xspline", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.516", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.516", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.517", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.517", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.518", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.518", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.519", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.519", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.520", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.520", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(), class = "gList"), childrenOrder = character(0)), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.521", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
args:     label = "FALSE", x = structure(-1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), just = c("right", "centre"), hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels"
args: )), childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = TRUE, main = TRUE, edits = NULL, name = "GRID.yaxis.521", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc")), labels = structure(list(
retn:     label = "FALSE", x = structure(-1, unit = "lines", valid.unit = 3L, class = "unit"), y = structure(0, unit = "native", valid.unit = 4L, class = "unit"), just = c("right", "centre"), hjust = NULL, vjust = NULL, rot = 0, check.overlap = TRUE, name = "labels", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("label", "x", "y", "just", "hjust", "vjust", "rot", "check.overlap", "name", "gp", "vp"), class = c("text", "grob", "gDesc"))), class = "gList", .Names = c("major", "ticks", "labels"
retn: )), childrenOrder = c("major", "ticks", "labels")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.yaxis.522", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
args: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
args: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc")))
retn: structure(list(at = 0, label = FALSE, main = TRUE, edits = NULL, name = "GRID.yaxis.522", gp = structure(list(), class = "gpar"), vp = NULL, children = structure(list(major = structure(list(x = structure(c(0, 0), unit = "npc", valid.unit = 0L, class = "unit"), y = structure(c(0, 0), unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "major", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x", "y", "arrow", "name", "gp", "vp"), class = c("lines", "grob", "gDesc"
retn: )), ticks = structure(list(x0 = structure(0, unit = "npc", valid.unit = 0L, class = "unit"), y0 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), x1 = structure(-0.5, unit = "lines", valid.unit = 3L, class = "unit"), y1 = structure(0, unit = "native", valid.unit = 4L, class = "unit"), arrow = NULL, name = "ticks", gp = structure(list(), class = "gpar"), vp = NULL), .Names = c("x0", "y0", "x1", "y1", "arrow", "name", "gp", "vp"), class = c("segments", "grob", "gDesc"))), class = "gList", .Names = c("major", 
retn: "ticks")), childrenOrder = c("major", "ticks")), .Names = c("at", "label", "main", "edits", "name", "gp", "vp", "children", "childrenOrder"), class = c("yaxis", "axis", "gTree", "grob", "gDesc"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(NaN, NaN, NaN), .Dim = c(1L, 3L), .Dimnames = list(NULL, c("1", "2", "3")), degree = 3L, knots = numeric(0), Boundary.knots = c(0L, 0L), intercept = FALSE, class = c("bs", "basis", "matrix")))
retn: structure(c(NaN, NaN, NaN), .Dim = c(1L, 3L), .Dimnames = list(NULL, c("1", "2", "3")), degree = 3L, knots = numeric(0), Boundary.knots = c(0L, 0L), intercept = FALSE, class = c("bs", "basis", "matrix"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = NULL, y = NULL), .Names = c("x", "y"), class = "xyVector"))
retn: structure(list(x = NULL, y = NULL), .Names = c("x", "y"), class = "xyVector")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = list(), y = list()), .Names = c("x", "y"), class = "xyVector"))
retn: structure(list(x = list(), y = list()), .Names = c("x", "y"), class = "xyVector")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = FALSE, y = FALSE), .Names = c("x", "y"), class = "xyVector"))
retn: structure(list(x = FALSE, y = FALSE), .Names = c("x", "y"), class = "xyVector")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, .Tsp = c(1, 1, 1), class = "ts"))
retn: structure(FALSE, .Tsp = c(1, 1, 1), class = "ts")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(statistic = structure(1.5, .Names = "AB"), p.value = 0.654720846018577, null.value = structure(1, .Names = "ratio of scales"), alternative = "two.sided", method = "Ansari-Bradley test", data.name = "FALSE and FALSE"), .Names = c("statistic", "p.value", "null.value", "alternative", "method", "data.name"), class = "htest"))
retn: structure(list(statistic = structure(1.5, .Names = "AB"), p.value = 0.654720846018577, null.value = structure(1, .Names = "ratio of scales"), alternative = "two.sided", method = "Ansari-Bradley test", data.name = "FALSE and FALSE"), .Names = c("statistic", "p.value", "null.value", "alternative", "method", "data.name"), class = "htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), Size = 0L, call = quote(as.dist.default(m = list())), class = "dist", Diag = FALSE, Upper = FALSE))
retn: structure(numeric(0), Size = 0L, call = quote(as.dist.default(m = list())), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), Size = 1L, call = quote(as.dist.default(m = FALSE)), class = "dist", Diag = FALSE, Upper = FALSE))
retn: structure(numeric(0), Size = 1L, call = quote(as.dist.default(m = FALSE)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), Size = 0L, call = quote(as.dist.default(m = list(), diag = list())), class = "dist", Diag = list(), Upper = FALSE))
retn: structure(numeric(0), Size = 0L, call = quote(as.dist.default(m = list(), diag = list())), class = "dist", Diag = list(), Upper = FALSE)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), Size = 1L, call = quote(as.dist.default(m = FALSE, diag = FALSE)), class = "dist", Diag = FALSE, Upper = FALSE))
retn: structure(numeric(0), Size = 1L, call = quote(as.dist.default(m = FALSE, diag = FALSE)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "formula", .Environment = <environment>))
retn: structure(list(), class = "formula", .Environment = <environment>)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "formula"))
retn: structure(list(), class = "formula")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), Size = 0L, Diag = FALSE, Upper = FALSE, method = "euclidean", call = quote(f(x = list())), class = "dist"))
retn: structure(numeric(0), Size = 0L, Diag = FALSE, Upper = FALSE, method = "euclidean", call = quote(f(x = list())), class = "dist")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(numeric(0), Size = 1L, Diag = FALSE, Upper = FALSE, method = "euclidean", call = quote(f(x = FALSE)), class = "dist"))
retn: structure(numeric(0), Size = 1L, Diag = FALSE, Upper = FALSE, method = "euclidean", call = quote(f(x = FALSE)), class = "dist")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(function (v) 
args: .approxfun(x, y, v, method, yleft, yright, f), class = c("ecdf", "stepfun", "function"), call = quote(f(FALSE))))
retn: structure(function (v) 
retn: .approxfun(x, y, v, method, yleft, yright, f), class = c("ecdf", "stepfun", "function"), call = quote(f(FALSE)))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, .Tsp = c(1, 1, 1), class = "ts"))
retn: structure(0, .Tsp = c(1, 1, 1), class = "ts")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(NULL), .Names = "")))
retn: structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(NULL), .Names = ""))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(l0 = NULL), .Names = "l0")))
retn: structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(l0 = NULL), .Names = "l0"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(c0 = NULL), .Names = "c0")))
retn: structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(c0 = NULL), .Names = "c0"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(m0 = NULL), .Names = "m0")))
retn: structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(m0 = NULL), .Names = "m0"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(df0 = NULL), .Names = "df0")))
retn: structure(integer(0), .Dim = c(1L, 0L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(df0 = NULL), .Names = "df0"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Dim = c(1L, 1L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list("FALSE"), .Names = "")))
retn: structure(1L, .Dim = c(1L, 1L), class = "ftable", row.vars = structure(list(), .Names = character(0)), col.vars = structure(list("FALSE"), .Names = ""))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Dim = c(1L, 1L), class = "ftable", row.vars = structure(list("FALSE"), .Names = ""), col.vars = structure(list("FALSE"), .Names = "")))
retn: structure(1L, .Dim = c(1L, 1L), class = "ftable", row.vars = structure(list("FALSE"), .Names = ""), col.vars = structure(list("FALSE"), .Names = ""))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(qr = structure(0, .Dim = c(1L, 1L)), rank = 0L, qraux = 0, pivot = 1L, tol = 1e-11), .Names = c("qr", "rank", "qraux", "pivot", "tol"), class = "qr"))
retn: structure(list(qr = structure(0, .Dim = c(1L, 1L)), rank = 0L, qraux = 0, pivot = 1L, tol = 1e-11), .Names = c("qr", "rank", "qraux", "pivot", "tol"), class = "qr")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = NULL))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = NULL))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = NULL, y = NULL))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = NULL, y = NULL))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = l0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = l0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = c0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = c0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = m0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = m0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = df0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = df0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = 1, y = 0, yf = 0, yc = c(0, 0), iKnots = 1L, isOrd = TRUE, ord = NULL, call = quote(f(x = FALSE))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = 1, y = 0, yf = 0, yc = c(0, 0), iKnots = 1L, isOrd = TRUE, ord = NULL, call = quote(f(x = FALSE))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = list(), y = list()))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = list(), y = list()))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = l0, y = l0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = l0, y = l0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = c0, y = c0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = c0, y = c0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = df0, y = df0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = numeric(0), y = numeric(0), yf = numeric(0), yc = 0, iKnots = 0L, isOrd = TRUE, ord = NULL, call = quote(f(x = df0, y = df0))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = 0, y = 0, yf = 0, yc = c(0, 0), iKnots = 1L, isOrd = TRUE, ord = NULL, call = quote(f(x = FALSE, y = FALSE))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg"))
retn: structure(list(x = 0, y = 0, yf = 0, yc = c(0, 0), iKnots = 1L, isOrd = TRUE, ord = NULL, call = quote(f(x = FALSE, y = FALSE))), .Names = c("x", "y", "yf", "yc", "iKnots", "isOrd", "ord", "call"), class = "isoreg")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(overall = 0, row = 0, col = 0, residuals = structure(0L, .Dim = c(1L, 1L)), name = "FALSE"), .Names = c("overall", "row", "col", "residuals", "name"), class = "medpolish"))
retn: structure(list(overall = 0, row = 0, col = 0, residuals = structure(0L, .Dim = c(1L, 1L)), name = "FALSE"), .Names = c("overall", "row", "col", "residuals", "name"), class = "medpolish")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(method = "t tests with pooled SD", data.name = "FALSE and FALSE", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest"))
retn: structure(list(method = "t tests with pooled SD", data.name = "FALSE and FALSE", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(method = "Wilcoxon rank sum test", data.name = " and NULL", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest"))
retn: structure(list(method = "Wilcoxon rank sum test", data.name = " and NULL", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(method = "Wilcoxon rank sum test", data.name = "NULL and NULL", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest"))
retn: structure(list(method = "Wilcoxon rank sum test", data.name = "NULL and NULL", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(method = "Wilcoxon rank sum test", data.name = "l0 and l0", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest"))
retn: structure(list(method = "Wilcoxon rank sum test", data.name = "l0 and l0", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(method = "Wilcoxon rank sum test", data.name = "c0 and c0", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest"))
retn: structure(list(method = "Wilcoxon rank sum test", data.name = "c0 and c0", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(method = "Wilcoxon rank sum test", data.name = "df0 and df0", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest"))
retn: structure(list(method = "Wilcoxon rank sum test", data.name = "df0 and df0", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(method = "Wilcoxon rank sum test", data.name = "FALSE and FALSE", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest"))
retn: structure(list(method = "Wilcoxon rank sum test", data.name = "FALSE and FALSE", p.value = structure(list(), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), p.adjust.method = "holm"), .Names = c("method", "data.name", "p.value", "p.adjust.method"), class = "pairwise.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(statistic = structure(0, .Names = "number of events"), parameter = structure(1, .Names = "time base"), p.value = 1, conf.int = structure(c(0, 3.68887945411394), conf.level = 0.95), estimate = structure(0, .Names = "event rate"), null.value = structure(1, .Names = "event rate"), alternative = "two.sided", method = "Exact Poisson test", data.name = "FALSE time base: 1"), .Names = c("statistic", "parameter", "p.value", "conf.int", "estimate", "null.value", "alternative", "method", 
args: "data.name"), class = "htest"))
retn: structure(list(statistic = structure(0, .Names = "number of events"), parameter = structure(1, .Names = "time base"), p.value = 1, conf.int = structure(c(0, 3.68887945411394), conf.level = 0.95), estimate = structure(0, .Names = "event rate"), null.value = structure(1, .Names = "event rate"), alternative = "two.sided", method = "Exact Poisson test", data.name = "FALSE time base: 1"), .Names = c("statistic", "parameter", "p.value", "conf.int", "estimate", "null.value", "alternative", "method", "data.name"
retn: ), class = "htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(statistic = structure(0, .Names = "number of events"), parameter = structure(FALSE, .Names = "time base"), p.value = TRUE, conf.int = structure(c(NaN, Inf), conf.level = 0.95), estimate = structure(NaN, .Names = "event rate"), null.value = structure(1, .Names = "event rate"), alternative = "two.sided", method = "Exact Poisson test", data.name = "FALSE time base: FALSE"), .Names = c("statistic", "parameter", "p.value", "conf.int", "estimate", "null.value", "alternative", "method", 
args: "data.name"), class = "htest"))
retn: structure(list(statistic = structure(0, .Names = "number of events"), parameter = structure(FALSE, .Names = "time base"), p.value = TRUE, conf.int = structure(c(NaN, Inf), conf.level = 0.95), estimate = structure(NaN, .Names = "event rate"), null.value = structure(1, .Names = "event rate"), alternative = "two.sided", method = "Exact Poisson test", data.name = "FALSE time base: FALSE"), .Names = c("statistic", "parameter", "p.value", "conf.int", "estimate", "null.value", "alternative", "method", "data.name"
retn: ), class = "htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(linkfun = function (mu) 
args: mu, linkinv = function (eta) 
args: eta, mu.eta = function (eta) 
args: rep.int(1, length(eta)), valideta = function (eta) 
args: TRUE, name = "identity"), .Names = c("linkfun", "linkinv", "mu.eta", "valideta", "name"), class = "link-glm"))
retn: structure(list(linkfun = function (mu) 
retn: mu, linkinv = function (eta) 
retn: eta, mu.eta = function (eta) 
retn: rep.int(1, length(eta)), valideta = function (eta) 
retn: TRUE, name = "identity"), .Names = c("linkfun", "linkinv", "mu.eta", "valideta", "name"), class = "link-glm")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(n = FALSE, delta = 0L, sd = 1, sig.level = 0.05, power = NaN, alternative = "two.sided", note = "n is number in *each* group", method = "Two-sample t test power calculation"), .Names = c("n", "delta", "sd", "sig.level", "power", "alternative", "note", "method"), class = "power.htest"))
retn: structure(list(n = FALSE, delta = 0L, sd = 1, sig.level = 0.05, power = NaN, alternative = "two.sided"), .Names = c("n", "delta", "sd", "sig.level", "power", "alternative"), class = "power.htest")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sdev = 0, rotation = structure(1, .Dim = c(1L, 1L), .Dimnames = list(NULL, "PC1")), center = 0, scale = FALSE, x = structure(0, .Dim = c(1L, 1L), .Dimnames = list(NULL, "PC1"))), .Names = c("sdev", "rotation", "center", "scale", "x"), class = "prcomp"))
retn: structure(list(sdev = 0, rotation = structure(1, .Dim = c(1L, 1L), .Dimnames = list(NULL, "PC1")), center = 0, scale = FALSE, x = structure(0, .Dim = c(1L, 1L), .Dimnames = list(NULL, "PC1"))), .Names = c("sdev", "rotation", "center", "scale", "x"), class = "prcomp")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(sdev = 0, rotation = structure(1, .Dim = c(1L, 1L), .Dimnames = list(NULL, "PC1")), center = 0, scale = FALSE), .Names = c("sdev", "rotation", "center", "scale"), class = "prcomp"))
retn: structure(list(sdev = 0, rotation = structure(1, .Dim = c(1L, 1L), .Dimnames = list(NULL, "PC1")), center = 0, scale = FALSE), .Names = c("sdev", "rotation", "center", "scale"), class = "prcomp")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"NULL\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
args: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
args: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = expression({
args:     n <- rep.int(1, nobs)
args:     mustart <- y
args: }), validmu = function (mu) 
args: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"NULL\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
retn: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
retn: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = expression({
retn:     n <- rep.int(1, nobs)
retn:     mustart <- y
retn: }), validmu = function (mu) 
retn: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "identity", linkfun = function (mu) 
args: mu, linkinv = function (eta) 
args: eta, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = function (eta) 
args: rep.int(1, length(eta)), initialize = NULL, validmu = NULL, valideta = function (eta) 
args: TRUE, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "identity", linkfun = function (mu) 
retn: mu, linkinv = function (eta) 
retn: eta, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = function (eta) 
retn: rep.int(1, length(eta)), initialize = NULL, validmu = NULL, valideta = function (eta) 
retn: TRUE, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"NULL\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"NULL\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"list()\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
args: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
args: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = expression({
args:     n <- rep.int(1, nobs)
args:     mustart <- y
args: }), validmu = function (mu) 
args: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"list()\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
retn: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
retn: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = expression({
retn:     n <- rep.int(1, nobs)
retn:     mustart <- y
retn: }), validmu = function (mu) 
retn: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"l0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
args: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
args: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = expression({
args:     n <- rep.int(1, nobs)
args:     mustart <- y
args: }), validmu = function (mu) 
args: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"l0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
retn: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
retn: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = expression({
retn:     n <- rep.int(1, nobs)
retn:     mustart <- y
retn: }), validmu = function (mu) 
retn: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"c0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
args: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
args: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = expression({
args:     n <- rep.int(1, nobs)
args:     mustart <- y
args: }), validmu = function (mu) 
args: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"c0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
retn: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
retn: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = expression({
retn:     n <- rep.int(1, nobs)
retn:     mustart <- y
retn: }), validmu = function (mu) 
retn: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"m0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
args: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
args: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = expression({
args:     n <- rep.int(1, nobs)
args:     mustart <- y
args: }), validmu = function (mu) 
args: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"m0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
retn: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
retn: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = expression({
retn:     n <- rep.int(1, nobs)
retn:     mustart <- y
retn: }), validmu = function (mu) 
retn: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"df0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
args: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
args: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = expression({
args:     n <- rep.int(1, nobs)
args:     mustart <- y
args: }), validmu = function (mu) 
args: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"df0\"", linkfun = NULL, linkinv = NULL, variance = function (mu) 
retn: rep.int(1, length(mu)), dev.resids = function (y, mu, wt) 
retn: wt * ((y - mu)^2), aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = expression({
retn:     n <- rep.int(1, nobs)
retn:     mustart <- y
retn: }), validmu = function (mu) 
retn: TRUE, valideta = NULL, varfun = "constant"), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"list()\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"list()\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"l0\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"l0\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"c0\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"c0\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(family = "quasi", link = "\"df0\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
args: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family"))
retn: structure(list(family = "quasi", link = "\"df0\"", linkfun = NULL, linkinv = NULL, variance = NULL, dev.resids = NULL, aic = function (y, n, mu, wt, dev) 
retn: NA, mu.eta = NULL, initialize = NULL, validmu = NULL, valideta = NULL, varfun = NULL), .Names = c("family", "link", "linkfun", "linkinv", "variance", "dev.resids", "aic", "mu.eta", "initialize", "validmu", "valideta", "varfun"), class = "family")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(1L, .Label = "FALSE", class = "factor", scores = structure(0, .Dim = 1L, .Dimnames = list("FALSE"))))
retn: structure(1L, .Label = "FALSE", class = "factor", scores = structure(0, .Dim = 1L, .Dimnames = list("FALSE")))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = numeric(0), y = logical(0)), .Names = c("x", "y"), row.names = integer(0), class = c("sortedXyData", "data.frame")))
retn: structure(list(x = numeric(0), y = logical(0)), .Names = c("x", "y"), row.names = integer(0), class = c("sortedXyData", "data.frame"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(x = 0, y = 0), .Names = c("x", "y"), row.names = 1L, class = c("sortedXyData", "data.frame")))
retn: structure(list(x = 0, y = 0), .Names = c("x", "y"), row.names = 1L, class = c("sortedXyData", "data.frame"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), class = "noquote"))
retn: character(0)

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(".", class = "noquote"))
retn: "."

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(NA, .Tsp = c(1, 1, 1), class = "ts"))
retn: structure(NA, .Tsp = c(1, 1, 1), class = "ts")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, .Tsp = c(0, 0, 1), class = "ts"))
retn: structure(FALSE, .Tsp = c(0, 0, 1), class = "ts")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c("./Packages/cluster/po/R-de.po:217", "./Packages/cluster/po/R-pl.po:395", NA, NA, "difference in entry 1", "difference in entry 1", "a variable was found with at least 50% missing values.", "a variable was found with at least 50% missing values.", "Variable mit mindestens 50% fehlenden Werten gefunden.", "znaleziono zmienn<U+0105> z co najmniej 50% brakuj<U+0105>cych warto<U+015B>ci."), .Dim = c(2L, 5L), class = "check_po_files"))
retn: NULL

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), .Dim = c(0L, 5L), class = "check_po_files"))
retn: NULL

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(old = numeric(0), new = numeric(0)), .Names = c("old", "new"), row.names = integer(0), class = c("compactPDF", "data.frame")))
retn: structure(list(old = numeric(0), new = numeric(0)), .Names = c("old", "new"), row.names = integer(0), class = c("compactPDF", "data.frame"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(old = numeric(0), new = numeric(0)), .Names = c("old", "new"), row.names = character(0), class = c("compactPDF", "data.frame")))
retn: structure(list(old = numeric(0), new = numeric(0)), .Names = c("old", "new"), row.names = character(0), class = c("compactPDF", "data.frame"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure("", latex_tag = "TEXT")), class = "LaTeX"))
retn: NULL

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure("FALSE", latex_tag = "TEXT")), class = "LaTeX"))
retn: NULL

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("/home/roman/r-instrumented/library/base/help/NULL", call = quote(help(topic = NULL, package = NULL)), topic = "NULL", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic"))
retn: structure("/home/roman/r-instrumented/library/base/help/NULL", call = quote(help(topic = NULL, package = NULL)), topic = "NULL", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("/home/roman/r-instrumented/library/base/help/list", call = quote(help(topic = "list", package = NULL)), topic = "list", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic"))
retn: structure("/home/roman/r-instrumented/library/base/help/list", call = quote(help(topic = "list", package = NULL)), topic = "list", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), call = quote(help(topic = "l0", package = NULL)), topic = "l0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic"))
retn: structure(character(0), call = quote(help(topic = "l0", package = NULL)), topic = "l0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), call = quote(help(topic = "c0", package = NULL)), topic = "c0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic"))
retn: structure(character(0), call = quote(help(topic = "c0", package = NULL)), topic = "c0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), call = quote(help(topic = "m0", package = NULL)), topic = "m0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic"))
retn: structure(character(0), call = quote(help(topic = "m0", package = NULL)), topic = "m0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), call = quote(help(topic = "df0", package = NULL)), topic = "df0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic"))
retn: structure(character(0), call = quote(help(topic = "df0", package = NULL)), topic = "df0", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("/home/roman/r-instrumented/library/base/help/logical", call = quote(help(topic = FALSE, package = NULL)), topic = "FALSE", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic"))
retn: structure("/home/roman/r-instrumented/library/base/help/logical", call = quote(help(topic = FALSE, package = NULL)), topic = "FALSE", tried_all_packages = FALSE, type = "text", class = "help_files_with_topic")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(function (...) 
args: NULL)
retn: function (...) 
retn: NULL

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(list(given = NULL, family = "FALSE", role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person"))
retn: structure(list(structure(list(given = NULL, family = "FALSE", role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = c("relistable", "list")))
retn: structure(list(), class = c("relistable", "list"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(FALSE, class = c("relistable", "logical")))
retn: structure(FALSE, class = c("relistable", "logical"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(), class = "bibentry"))
retn: structure(list(), class = "bibentry")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), class = "citationFooter"))
retn: structure(character(0), class = "citationFooter")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("FALSE", class = "citationFooter"))
retn: structure("FALSE", class = "citationFooter")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("FALSE FALSE", class = "citationFooter"))
retn: structure("FALSE FALSE", class = "citationFooter")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), class = "citationHeader"))
retn: structure(character(0), class = "citationHeader")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("FALSE", class = "citationHeader"))
retn: structure("FALSE", class = "citationHeader")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure("FALSE FALSE", class = "citationHeader"))
retn: structure("FALSE FALSE", class = "citationHeader")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(list(title = "R: A Language and Environment for Statistical Computing", author = structure(list(structure(list(given = "R Core Team", family = NULL, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person"), organization = "R Foundation for Statistical Computing", address = "Vienna, Austria", year = "2013", url = "http://www.R-project.org/"), .Names = c("title", "author", "organization", "address", "year", 
args: "url"), bibtype = "Manual", textVersion = "R Core Team (2013). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL http://www.R-project.org/.")), mheader = "To cite R in publications use:", mfooter = "We have invested a lot of time and effort in creating R, please cite it when using it for data analysis. See also 'citation(\"pkgname\")' for citing R packages.", class = c("citation", "bibentry")))
retn: structure(list(structure(list(title = "R: A Language and Environment for Statistical Computing", author = structure(list(structure(list(given = "R Core Team", family = NULL, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person"), organization = "R Foundation for Statistical Computing", address = "Vienna, Austria", year = "2013", url = "http://www.R-project.org/"), .Names = c("title", "author", "organization", "address", "year", "url"
retn: ), bibtype = "Manual", textVersion = "R Core Team (2013). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL http://www.R-project.org/.")), mheader = "To cite R in publications use:", mfooter = "We have invested a lot of time and effort in creating R, please cite it when using it for data analysis. See also 'citation(\"pkgname\")' for citing R packages.", class = c("citation", "bibentry"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(title = "Demos", header = NULL, results = structure(c("stats", "stats", "stats", "stats", "graphics", "graphics", "graphics", "graphics", "graphics", "graphics", "grDevices", "grDevices", "base", "base", "base", "base", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
args: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "glm.vr", "lm.glm", "nlm", "smooth", "Hershey", "Japanese", "graphics", "image", "persp", "plotmath", "colors", "hclColors", "error.catching", "is.things", "recursion", 
args: "scoping", "Some glm() examples from V&R with several predictors", "Some linear and generalized linear modelling examples from `An Introduction to Statistical Modelling' by Annette Dobson", "Nonlinear least-squares using nlm()", "`Visualize' steps in Tukey's smoothers", "Tables of the characters in the Hershey vector fonts", "Tables of the Japanese characters in the Hershey vector fonts", "A show of some of R's graphics capabilities", "The image-like graphics builtins of R", "Extended persp() examples", 
args: "Examples of the use of mathematics annotation", "A show of R's predefined colors()", "Exploration of hcl() space", "More examples on catching and handling errors", "Explore some properties of R objects and is.FOO() functions. Not for newbies!", "Using recursion for adaptive integration", "An illustration of lexical scoping."), .Dim = c(16L, 4L), .Dimnames = list(NULL, c("Package", "LibPath", "Item", "Title"))), footer = "Use 'demo(package = .packages(all.available = TRUE))'\nto list the demos in all *available* packages."), .Names = c("title", 
args: "header", "results", "footer"), class = "packageIQR"))
retn: structure(list(title = "Demos", header = NULL, results = structure(c("stats", "stats", "stats", "stats", "graphics", "graphics", "graphics", "graphics", "graphics", "graphics", "grDevices", "grDevices", "base", "base", "base", "base", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
retn: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "glm.vr", "lm.glm", "nlm", "smooth", "Hershey", "Japanese", "graphics", "image", "persp", "plotmath", "colors", "hclColors", "error.catching", "is.things", "recursion", 
retn: "scoping", "Some glm() examples from V&R with several predictors", "Some linear and generalized linear modelling examples from `An Introduction to Statistical Modelling' by Annette Dobson", "Nonlinear least-squares using nlm()", "`Visualize' steps in Tukey's smoothers", "Tables of the characters in the Hershey vector fonts", "Tables of the Japanese characters in the Hershey vector fonts", "A show of some of R's graphics capabilities", "The image-like graphics builtins of R", "Extended persp() examples", 
retn: "Examples of the use of mathematics annotation", "A show of R's predefined colors()", "Exploration of hcl() space", "More examples on catching and handling errors", "Explore some properties of R objects and is.FOO() functions. Not for newbies!", "Using recursion for adaptive integration", "An illustration of lexical scoping."), .Dim = c(16L, 4L), .Dimnames = list(NULL, c("Package", "LibPath", "Item", "Title"))), footer = "Use 'demo(package = .packages(all.available = TRUE))'\nto list the demos in all *available* packages."), .Names = c("title", 
retn: "header", "results", "footer"), class = "packageIQR")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(title = "Demos", header = NULL, results = structure(c("stats", "stats", "stats", "stats", "graphics", "graphics", "graphics", "graphics", "graphics", "graphics", "grDevices", "grDevices", "base", "base", "base", "base", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
args: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "glm.vr", "lm.glm", "nlm", "smooth", "Hershey", "Japanese", "graphics", "image", "persp", "plotmath", "colors", "hclColors", "error.catching", "is.things", "recursion", 
args: "scoping", "Some glm() examples from V&R with several predictors", "Some linear and generalized linear modelling examples from `An Introduction to Statistical Modelling' by Annette Dobson", "Nonlinear least-squares using nlm()", "`Visualize' steps in Tukey's smoothers", "Tables of the characters in the Hershey vector fonts", "Tables of the Japanese characters in the Hershey vector fonts", "A show of some of R's graphics capabilities", "The image-like graphics builtins of R", "Extended persp() examples", 
args: "Examples of the use of mathematics annotation", "A show of R's predefined colors()", "Exploration of hcl() space", "More examples on catching and handling errors", "Explore some properties of R objects and is.FOO() functions. Not for newbies!", "Using recursion for adaptive integration", "An illustration of lexical scoping."), .Dim = c(16L, 4L), .Dimnames = list(NULL, c("Package", "LibPath", "Item", "Title"))), footer = NULL), .Names = c("title", "header", "results", "footer"), class = "packageIQR"))
retn: structure(list(title = "Demos", header = NULL, results = structure(c("stats", "stats", "stats", "stats", "graphics", "graphics", "graphics", "graphics", "graphics", "graphics", "grDevices", "grDevices", "base", "base", "base", "base", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", 
retn: "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "/home/roman/r-instrumented/library", "glm.vr", "lm.glm", "nlm", "smooth", "Hershey", "Japanese", "graphics", "image", "persp", "plotmath", "colors", "hclColors", "error.catching", "is.things", "recursion", 
retn: "scoping", "Some glm() examples from V&R with several predictors", "Some linear and generalized linear modelling examples from `An Introduction to Statistical Modelling' by Annette Dobson", "Nonlinear least-squares using nlm()", "`Visualize' steps in Tukey's smoothers", "Tables of the characters in the Hershey vector fonts", "Tables of the Japanese characters in the Hershey vector fonts", "A show of some of R's graphics capabilities", "The image-like graphics builtins of R", "Extended persp() examples", 
retn: "Examples of the use of mathematics annotation", "A show of R's predefined colors()", "Exploration of hcl() space", "More examples on catching and handling errors", "Explore some properties of R objects and is.FOO() functions. Not for newbies!", "Using recursion for adaptive integration", "An illustration of lexical scoping."), .Dim = c(16L, 4L), .Dimnames = list(NULL, c("Package", "LibPath", "Item", "Title"))), footer = NULL), .Names = c("title", "header", "results", "footer"), class = "packageIQR")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "list", objs = structure(list(`package:base` = .Primitive("list"), .Primitive("list")), .Names = c("package:base", "")), where = c("package:base", "namespace:base"), visible = c(TRUE, FALSE), dups = c(FALSE, TRUE)), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere"))
retn: structure(list(name = "list", objs = structure(list(`package:base` = .Primitive("list"), .Primitive("list")), .Names = c("package:base", "")), where = c("package:base", "namespace:base"), visible = c(TRUE, FALSE), dups = c(FALSE, TRUE)), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "l0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere"))
retn: structure(list(name = "l0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "c0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere"))
retn: structure(list(name = "c0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "m0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere"))
retn: structure(list(name = "m0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "df0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere"))
retn: structure(list(name = "df0", objs = structure(list(.GlobalEnv = NULL), .Names = ".GlobalEnv"), where = ".GlobalEnv", visible = TRUE, dups = FALSE), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(name = "FALSE", objs = list(), where = character(0), visible = logical(0), dups = logical(0)), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere"))
retn: structure(list(name = "FALSE", objs = list(), where = character(0), visible = logical(0), dups = logical(0)), .Names = c("name", "objs", "where", "visible", "dups"), class = "getAnywhere")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(character(0), class = "MethodsFunction", info = structure(list(visible = logical(0), from = structure(integer(0), .Label = c(".GlobalEnv", "package:base", "package:datasets", "package:grDevices", "package:graphics", "package:methods", "package:stats", "package:utils"), class = "factor")), .Names = c("visible", "from"), row.names = character(0), class = "data.frame")))
retn: structure(character(0), class = "MethodsFunction", info = structure(list(visible = logical(0), from = structure(integer(0), .Label = c(".GlobalEnv", "package:base", "package:datasets", "package:grDevices", "package:graphics", "package:methods", "package:stats", "package:utils"), class = "factor")), .Names = c("visible", "from"), row.names = character(0), class = "data.frame"))

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(0, class = "object_size"))
retn: structure(0, class = "object_size")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(40, class = "object_size"))
retn: structure(40, class = "object_size")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(48, class = "object_size"))
retn: structure(48, class = "object_size")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(list(given = NULL, family = NULL, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person"))
retn: structure(list(structure(list(given = NULL, family = NULL, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(list(given = FALSE, family = NULL, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person"))
retn: structure(list(structure(list(given = FALSE, family = NULL, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(structure(list(given = FALSE, family = FALSE, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person"))
retn: structure(list(structure(list(given = FALSE, family = FALSE, role = NULL, email = NULL, comment = NULL), .Names = c("given", "family", "role", "email", "comment"))), class = "person")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(list(R.version = structure(list(platform = "x86_64-unknown-linux-gnu", arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", status = "", major = "3", minor = "0.1", year = "2013", month = "05", day = "16", `svn rev` = "62743", language = "R", version.string = "R version 3.0.1 (2013-05-16)", nickname = "Good Sport"), .Names = c("platform", "arch", "os", "system", "status", "major", "minor", "year", "month", "day", "svn rev", "language", "version.string", "nickname")), platform = "x86_64-unknown-linux-gnu (64-bit)", 
args:     locale = "C", basePkgs = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base"), loadedOnly = structure(list(KernSmooth = structure(list(Package = "KernSmooth", Priority = "recommended", Version = "2.23-10", Date = "2013-03-20", Title = "Functions for kernel smoothing for Wand & Jones (1995)", `Authors@R` = "c(person(\"Matt\", \"Wand\", role = \"aut\", email =\n        \"Matt.Wand@uts.edu.au\"), person(\"Brian\", \"Ripley\", role =\n        c(\"trl\", \"cre\", \"ctb\"), email = \"ripley@stats.ox.ac.uk\",\n        comment = \"R port and updates\"))", 
args:         Depends = "R (>= 2.5.0), stats", Suggests = "MASS", Description = "functions for kernel smoothing (and density estimation)\n        corresponding to the book: Wand, M.P. and Jones, M.C. (1995)\n        \"Kernel Smoothing\".", License = "Unlimited", ByteCompile = "yes", Packaged = "2013-03-19 08:19:45 UTC; ripley", Author = "Matt Wand [aut], Brian Ripley [trl, cre, ctb] (R port and\n        updates)", Maintainer = "Brian Ripley <ripley@stats.ox.ac.uk>", NeedsCompilation = "yes", Repository = "CRAN", 
args:         `Date/Publication` = "2013-03-19 13:18:58", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-02 02:18:55 UTC; unix"), .Names = c("Package", "Priority", "Version", "Date", "Title", "Authors@R", "Depends", "Suggests", "Description", "License", "ByteCompile", "Packaged", "Author", "Maintainer", "NeedsCompilation", "Repository", "Date/Publication", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/KernSmooth/Meta/package.rds"), compiler = structure(list(Package = "compiler", 
args:         Version = "3.0.1", Priority = "base", Title = "The R Compiler Package", Author = "Luke Tierney <luke-tierney@uiowa.edu>", Maintainer = "R Core Team <R-core@r-project.org>", Description = "Byte code compiler for R", License = "Part of R 3.0.1", Built = "R 3.0.1; ; 2014-03-18 17:08:08 UTC; unix"), .Names = c("Package", "Version", "Priority", "Title", "Author", "Maintainer", "Description", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/compiler/Meta/package.rds"), 
args:         grid = structure(list(Package = "grid", Version = "3.0.1", Priority = "base", Title = "The Grid Graphics Package", Author = "Paul Murrell <paul@stat.auckland.ac.nz>", Maintainer = "R Core Team <R-core@r-project.org>", Description = "A rewrite of the graphics layout capabilities, plus some\n  support for interaction", Imports = "grDevices", Suggests = "lattice", License = "Part of R 3.0.1", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-18 17:08:16 UTC; unix"), .Names = c("Package", "Version", 
args:         "Priority", "Title", "Author", "Maintainer", "Description", "Imports", "Suggests", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/grid/Meta/package.rds"), splines = structure(list(Package = "splines", Version = "3.0.1", Priority = "base", Imports = "graphics, stats", Title = "Regression Spline Functions and Classes", Author = "Douglas M. Bates <bates@stat.wisc.edu> and\n William N. Venables <Bill.Venables@csiro.au>", Maintainer = "R Core Team <R-core@r-project.org>", 
args:             Description = "Regression spline functions and classes", License = "Part of R 3.0.1", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-18 17:08:16 UTC; unix"), .Names = c("Package", "Version", "Priority", "Imports", "Title", "Author", "Maintainer", "Description", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/splines/Meta/package.rds"), tools = structure(list(Package = "tools", Version = "3.0.1", Priority = "base", Title = "Tools for Package Development", 
args:             Author = "R Core Team", Maintainer = "R Core Team <R-core@r-project.org>", Description = "Tools for package development, administration and documentation", License = "Part of R 3.0.1", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-18 17:08:08 UTC; unix"), .Names = c("Package", "Version", "Priority", "Title", "Author", "Maintainer", "Description", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/tools/Meta/package.rds")), .Names = c("KernSmooth", 
args:     "compiler", "grid", "splines", "tools"))), .Names = c("R.version", "platform", "locale", "basePkgs", "loadedOnly"), class = "sessionInfo"))
retn: structure(list(R.version = structure(list(platform = "x86_64-unknown-linux-gnu", arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", status = "", major = "3", minor = "0.1", year = "2013", month = "05", day = "16", `svn rev` = "62743", language = "R", version.string = "R version 3.0.1 (2013-05-16)", nickname = "Good Sport"), .Names = c("platform", "arch", "os", "system", "status", "major", "minor", "year", "month", "day", "svn rev", "language", "version.string", "nickname")), platform = "x86_64-unknown-linux-gnu (64-bit)", 
retn:     locale = "C", basePkgs = c("stats", "graphics", "grDevices", "utils", "datasets", "methods", "base"), loadedOnly = structure(list(KernSmooth = structure(list(Package = "KernSmooth", Priority = "recommended", Version = "2.23-10", Date = "2013-03-20", Title = "Functions for kernel smoothing for Wand & Jones (1995)", `Authors@R` = "c(person(\"Matt\", \"Wand\", role = \"aut\", email =\n        \"Matt.Wand@uts.edu.au\"), person(\"Brian\", \"Ripley\", role =\n        c(\"trl\", \"cre\", \"ctb\"), email = \"ripley@stats.ox.ac.uk\",\n        comment = \"R port and updates\"))", 
retn:         Depends = "R (>= 2.5.0), stats", Suggests = "MASS", Description = "functions for kernel smoothing (and density estimation)\n        corresponding to the book: Wand, M.P. and Jones, M.C. (1995)\n        \"Kernel Smoothing\".", License = "Unlimited", ByteCompile = "yes", Packaged = "2013-03-19 08:19:45 UTC; ripley", Author = "Matt Wand [aut], Brian Ripley [trl, cre, ctb] (R port and\n        updates)", Maintainer = "Brian Ripley <ripley@stats.ox.ac.uk>", NeedsCompilation = "yes", Repository = "CRAN", 
retn:         `Date/Publication` = "2013-03-19 13:18:58", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-02 02:18:55 UTC; unix"), .Names = c("Package", "Priority", "Version", "Date", "Title", "Authors@R", "Depends", "Suggests", "Description", "License", "ByteCompile", "Packaged", "Author", "Maintainer", "NeedsCompilation", "Repository", "Date/Publication", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/KernSmooth/Meta/package.rds"), compiler = structure(list(Package = "compiler", 
retn:         Version = "3.0.1", Priority = "base", Title = "The R Compiler Package", Author = "Luke Tierney <luke-tierney@uiowa.edu>", Maintainer = "R Core Team <R-core@r-project.org>", Description = "Byte code compiler for R", License = "Part of R 3.0.1", Built = "R 3.0.1; ; 2014-03-18 17:08:08 UTC; unix"), .Names = c("Package", "Version", "Priority", "Title", "Author", "Maintainer", "Description", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/compiler/Meta/package.rds"), 
retn:         grid = structure(list(Package = "grid", Version = "3.0.1", Priority = "base", Title = "The Grid Graphics Package", Author = "Paul Murrell <paul@stat.auckland.ac.nz>", Maintainer = "R Core Team <R-core@r-project.org>", Description = "A rewrite of the graphics layout capabilities, plus some\n  support for interaction", Imports = "grDevices", Suggests = "lattice", License = "Part of R 3.0.1", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-18 17:08:16 UTC; unix"), .Names = c("Package", "Version", 
retn:         "Priority", "Title", "Author", "Maintainer", "Description", "Imports", "Suggests", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/grid/Meta/package.rds"), splines = structure(list(Package = "splines", Version = "3.0.1", Priority = "base", Imports = "graphics, stats", Title = "Regression Spline Functions and Classes", Author = "Douglas M. Bates <bates@stat.wisc.edu> and\n William N. Venables <Bill.Venables@csiro.au>", Maintainer = "R Core Team <R-core@r-project.org>", 
retn:             Description = "Regression spline functions and classes", License = "Part of R 3.0.1", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-18 17:08:16 UTC; unix"), .Names = c("Package", "Version", "Priority", "Imports", "Title", "Author", "Maintainer", "Description", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/splines/Meta/package.rds"), tools = structure(list(Package = "tools", Version = "3.0.1", Priority = "base", Title = "Tools for Package Development", 
retn:             Author = "R Core Team", Maintainer = "R Core Team <R-core@r-project.org>", Description = "Tools for package development, administration and documentation", License = "Part of R 3.0.1", Built = "R 3.0.1; x86_64-unknown-linux-gnu; 2014-03-18 17:08:08 UTC; unix"), .Names = c("Package", "Version", "Priority", "Title", "Author", "Maintainer", "Description", "License", "Built"), class = "packageDescription", file = "/home/roman/r-instrumented/library/tools/Meta/package.rds")), .Names = c("KernSmooth", 
retn:     "compiler", "grid", "splines", "tools"))), .Names = c("R.version", "platform", "locale", "basePkgs", "loadedOnly"), class = "sessionInfo")

func: quote(print)
body: function (x, ...) 
body: UseMethod("print")
args: list(structure(c(862.952, 12.244, 882.943, 0, 0.312), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child")))
retn: structure(c(862.952, 12.244, 882.943, 0, 0.312), class = "proc_time", .Names = c("user.self", "sys.self", "elapsed", "user.child", "sys.child"))

