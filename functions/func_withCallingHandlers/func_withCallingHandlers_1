func: quote(withCallingHandlers)
body: function (expr, ...) 
body: {
body:     handlers <- list(...)
body:     classes <- names(handlers)
body:     parentenv <- parent.frame()
body:     if (length(classes) != length(handlers)) 
body:         stop("bad handler specification")
body:     .Internal(.addCondHands(classes, handlers, parentenv, NULL, TRUE))
body:     expr
body: }
args: list(0.693147180559945, warning = function (w) 
args: {
args:     W <<- w
args:     invokeRestart("muffleWarning")
args: })
retn: 0.693147180559945

func: quote(withCallingHandlers)
body: function (expr, ...) 
body: {
body:     handlers <- list(...)
body:     classes <- names(handlers)
body:     parentenv <- parent.frame()
body:     if (length(classes) != length(handlers)) 
body:         stop("bad handler specification")
body:     .Internal(.addCondHands(classes, handlers, parentenv, NULL, TRUE))
body:     expr
body: }
args: list(structure(list(message = "non-numeric argument to mathematical function", call = quote(log("a"))), .Names = c("message", "call"), class = c("simpleError", "error", "condition")), warning = function (w) 
args: {
args:     W <<- w
args:     invokeRestart("muffleWarning")
args: })
retn: structure(list(message = "non-numeric argument to mathematical function", call = quote(log("a"))), .Names = c("message", "call"), class = c("simpleError", "error", "condition"))

func: quote(withCallingHandlers)
body: function (expr, ...) 
body: {
body:     handlers <- list(...)
body:     classes <- names(handlers)
body:     parentenv <- parent.frame()
body:     if (length(classes) != length(handlers)) 
body:         stop("bad handler specification")
body:     .Internal(.addCondHands(classes, handlers, parentenv, NULL, TRUE))
body:     expr
body: }
args: list(NaN, warning = function (w) 
args: {
args:     W <<- w
args:     invokeRestart("muffleWarning")
args: })
retn: NaN

