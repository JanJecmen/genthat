func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("pch")
retn: 1L

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("lty")
retn: "solid"

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("col")
retn: "black"

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("lwd")
retn: 1

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("ann")
retn: TRUE

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("fg")
retn: "black"

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("cex.axis")
retn: 1

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list(structure(list(yaxs = "r", xpd = FALSE), .Names = c("yaxs", "xpd")))
retn: structure(list(yaxs = "i", xpd = TRUE), .Names = c("yaxs", "xpd"))

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("cex")
retn: 1

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list(structure(list(mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1, 4.1, 4.1, 2.1), cex = 1, yaxs = "r"), .Names = c("mai", "mar", "cex", "yaxs")))
retn: structure(list(mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1, 4.1, 4.1, 2.1), cex = 1, yaxs = "i"), .Names = c("mai", "mar", "cex", "yaxs"))

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list(structure(list(mar = c(5.1, 4.1, 4.1, 2.1), las = 0L, mfrow = c(1L, 1L)), .Names = c("mar", "las", "mfrow")))
retn: structure(list(mar = c(5.1, 1, 4.1, 4.1), las = 1L, mfrow = 1:2), .Names = c("mar", "las", "mfrow"))

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list(structure(list(mar = c(5.1, 4.1, 4.1, 2.1)), .Names = "mar"))
retn: structure(list(mar = c(0, 0, 0, 0)), .Names = "mar")

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("lend")
retn: "round"

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("las")
retn: 0L

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list(structure(list(usr = c(-0.04, 1.04, -0.04, 1.04), mgp = c(3, 1, 0)), .Names = c("usr", "mgp")))
retn: structure(list(usr = c(1, 1000, 1, 1000), mgp = c(1, 1, 0)), .Names = c("usr", "mgp"))

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("xaxs")
retn: "r"

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list("yaxs")
retn: "r"

func: quote(par)
body: function (..., no.readonly = FALSE) 
body: {
body:     .Pars.readonly <- c("cin", "cra", "csi", "cxy", "din")
body:     single <- FALSE
body:     args <- list(...)
body:     if (!length(args)) 
body:         args <- as.list(if (no.readonly) 
body:             .Pars[-match(.Pars.readonly, .Pars)]
body:         else .Pars)
body:     else {
body:         if (all(unlist(lapply(args, is.character)))) 
body:             args <- as.list(unlist(args))
body:         if (length(args) == 1) {
body:             if (is.list(args[[1L]]) | is.null(args[[1L]])) 
body:                 args <- args[[1L]]
body:             else if (is.null(names(args))) 
body:                 single <- TRUE
body:         }
body:     }
body:     value <- .External2(C_par, args)
body:     if (single) 
body:         value <- value[[1L]]
body:     if (!is.null(names(args))) 
body:         invisible(value)
body:     else value
body: }
args: list(structure(list(pty = "m"), .Names = "pty"))
retn: structure(list(pty = "s"), .Names = "pty")

