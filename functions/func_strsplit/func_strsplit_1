func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("", ":")
retn: list(character(0))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("~/R/x86_64-unknown-linux-gnu-library/3.0", ":")
retn: list("~/R/x86_64-unknown-linux-gnu-library/3.0")

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "é")
retn: list(c("«Latin-1 accented chars»: ", "è øØ å<Å æ<Æ ", " ", "è"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "é", useBytes = TRUE)
retn: list(c("«Latin-1 accented chars»: ", "è øØ å<Å æ<Æ ", " ", "è"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "é", fixed = TRUE)
retn: list(c("«Latin-1 accented chars»: ", "è øØ å<Å æ<Æ ", " ", "è"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "é", fixed = TRUE, useBytes = TRUE)
retn: list(c("«Latin-1 accented chars»: ", "è øØ å<Å æ<Æ ", " ", "è"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "é", perl = TRUE)
retn: list(c("«Latin-1 accented chars»: ", "è øØ å<Å æ<Æ ", " ", "è"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "é", perl = TRUE, useBytes = TRUE)
retn: list(c("«Latin-1 accented chars»: ", "è øØ å<Å æ<Æ ", " ", "è"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "[a-c]")
retn: list(c("«L", "tin-1 ", "", "", "ented ", "h", "rs»: éè øØ å<Å æ<Æ é éè"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "[a-c]", useBytes = TRUE)
retn: list(c("«L", "tin-1 ", "", "", "ented ", "h", "rs»: éè øØ å<Å æ<Æ é éè"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "[a-c]", perl = TRUE)
retn: list(c("«L", "tin-1 ", "", "", "ented ", "h", "rs»: éè øØ å<Å æ<Æ é éè"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", "[a-c]", perl = TRUE, useBytes = TRUE)
retn: list(c("«L", "tin-1 ", "", "", "ented ", "h", "rs»: éè øØ å<Å æ<Æ é éè"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("A text I want to display with spaces", NULL)
retn: list(c("A", " ", "t", "e", "x", "t", " ", "I", " ", "w", "a", "n", "t", " ", "t", "o", " ", "d", "i", "s", "p", "l", "a", "y", " ", "w", "i", "t", "h", " ", "s", "p", "a", "c", "e", "s"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list("A text I want to display with spaces", "")
retn: list(c("A", " ", "t", "e", "x", "t", " ", "I", " ", "w", "a", "n", "t", " ", "t", "o", " ", "d", "i", "s", "p", "l", "a", "y", " ", "w", "i", "t", "h", " ", "s", "p", "a", "c", "e", "s"))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list(structure(c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech"), .Names = c("as", "qu", "", "", "")), "e")
retn: structure(list(as = c("asf", "f"), qu = c("qw", "rty"), "yuiop[", "b", c("stuff.blah.y", "ch")), .Names = c("as", "qu", "", "", ""))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list(structure(c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech"), .Names = c("as", "qu", "", "", "")), "e", useBytes = TRUE)
retn: structure(list(as = c("asf", "f"), qu = c("qw", "rty"), "yuiop[", "b", c("stuff.blah.y", "ch")), .Names = c("as", "qu", "", "", ""))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list(structure(c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech"), .Names = c("as", "qu", "", "", "")), "e", fixed = TRUE)
retn: structure(list(as = c("asf", "f"), qu = c("qw", "rty"), "yuiop[", "b", c("stuff.blah.y", "ch")), .Names = c("as", "qu", "", "", ""))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list(structure(c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech"), .Names = c("as", "qu", "", "", "")), "e", fixed = TRUE, useBytes = TRUE)
retn: structure(list(as = c("asf", "f"), qu = c("qw", "rty"), "yuiop[", "b", c("stuff.blah.y", "ch")), .Names = c("as", "qu", "", "", ""))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list(structure(c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech"), .Names = c("as", "qu", "", "", "")), "e", perl = TRUE)
retn: structure(list(as = c("asf", "f"), qu = c("qw", "rty"), "yuiop[", "b", c("stuff.blah.y", "ch")), .Names = c("as", "qu", "", "", ""))

func: quote(strsplit)
body: function (x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) 
body: .Internal(strsplit(x, as.character(split), fixed, perl, useBytes))
args: list(structure(c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech"), .Names = c("as", "qu", "", "", "")), "e", perl = TRUE, useBytes = TRUE)
retn: structure(list(as = c("asf", "f"), qu = c("qw", "rty"), "yuiop[", "b", c("stuff.blah.y", "ch")), .Names = c("as", "qu", "", "", ""))

