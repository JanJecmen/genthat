func: quote(example)
body: function (topic, package = NULL, lib.loc = NULL, character.only = FALSE, give.lines = FALSE, local = FALSE, echo = TRUE, verbose = getOption("verbose"), setRNG = FALSE, ask = getOption("example.ask"), prompt.prefix = abbreviate(topic, 6)) 
body: {
body:     if (!character.only) {
body:         topic <- substitute(topic)
body:         if (!is.character(topic)) 
body:             topic <- deparse(topic)[1L]
body:     }
body:     pkgpaths <- find.package(package, lib.loc, verbose = verbose)
body:     file <- index.search(topic, pkgpaths, TRUE)
body:     if (!length(file)) {
body:         warning(gettextf("no help found for %s", sQuote(topic)), domain = NA)
body:         return(invisible())
body:     }
body:     packagePath <- dirname(dirname(file))
body:     pkgname <- basename(packagePath)
body:     lib <- dirname(packagePath)
body:     tf <- tempfile("Rex")
body:     tools::Rd2ex(.getHelpFile(file), tf)
body:     if (!file.exists(tf)) {
body:         if (give.lines) 
body:             return(character())
body:         warning(gettextf("%s has a help file but no examples", sQuote(topic)), domain = NA)
body:         return(invisible())
body:     }
body:     on.exit(unlink(tf))
body:     if (give.lines) 
body:         return(readLines(tf))
body:     if (pkgname != "base") 
body:         library(pkgname, lib.loc = lib, character.only = TRUE)
body:     if (!is.logical(setRNG) || setRNG) {
body:         if ((exists(".Random.seed", envir = .GlobalEnv))) {
body:             oldSeed <- get(".Random.seed", envir = .GlobalEnv)
body:             on.exit(assign(".Random.seed", oldSeed, envir = .GlobalEnv), add = TRUE)
body:         }
body:         else {
body:             oldRNG <- RNGkind()
body:             on.exit(RNGkind(oldRNG[1L], oldRNG[2L]), add = TRUE)
body:         }
body:         if (is.logical(setRNG)) {
body:             RNGkind("default", "default")
body:             set.seed(1)
body:         }
body:         else eval(setRNG)
body:     }
body:     zz <- readLines(tf, n = 1L)
body:     skips <- 0L
body:     if (echo) {
body:         zcon <- file(tf, open = "rt")
body:         while (length(zz) && !length(grep("^### \\*\\*", zz))) {
body:             skips <- skips + 1L
body:             zz <- readLines(zcon, n = 1L)
body:         }
body:         close(zcon)
body:     }
body:     if (ask == "default") 
body:         ask <- echo && grDevices::dev.interactive(orNone = TRUE)
body:     if (ask) {
body:         if (.Device != "null device") {
body:             oldask <- grDevices::devAskNewPage(ask = TRUE)
body:             if (!oldask) 
body:                 on.exit(grDevices::devAskNewPage(oldask), add = TRUE)
body:         }
body:         op <- options(device.ask.default = TRUE)
body:         on.exit(options(op), add = TRUE)
body:     }
body:     source(tf, local, echo = echo, prompt.echo = paste0(prompt.prefix, getOption("prompt")), continue.echo = paste0(prompt.prefix, getOption("continue")), verbose = verbose, max.deparse.length = Inf, encoding = "UTF-8", skip.echo = skips, keep.source = TRUE)
body: }
args: <arguments too long, ignored>
retn: structure(list(value = NULL, visible = TRUE), .Names = c("value", "visible"))

