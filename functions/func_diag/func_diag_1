func: quote(diag)
body: function (x = 1, nrow, ncol) 
body: {
body:     if (is.matrix(x)) {
body:         if (nargs() > 1L) 
body:             stop("'nrow' or 'ncol' cannot be specified when 'x' is a matrix")
body:         if ((m <- min(dim(x))) == 0L) 
body:             return(vector(typeof(x), 0L))
body:         y <- c(x)[1 + 0L:(m - 1L) * (dim(x)[1L] + 1)]
body:         nms <- dimnames(x)
body:         if (is.list(nms) && !any(sapply(nms, is.null)) && identical((nm <- nms[[1L]][seq_len(m)]), nms[[2L]][seq_len(m)])) 
body:             names(y) <- nm
body:         return(y)
body:     }
body:     if (is.array(x) && length(dim(x)) != 1L) 
body:         stop("'x' is an array, but not one-dimensional.")
body:     if (missing(x)) 
body:         n <- nrow
body:     else if (length(x) == 1L && nargs() == 1L) {
body:         n <- as.integer(x)
body:         x <- 1
body:     }
body:     else n <- length(x)
body:     if (!missing(nrow)) 
body:         n <- nrow
body:     if (missing(ncol)) 
body:         ncol <- n
body:     .Internal(diag(x, n, ncol))
body: }
args: list(c(1, 1, 1, 1))
retn: structure(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), .Dim = c(4L, 4L))

func: quote(diag)
body: function (x = 1, nrow, ncol) 
body: {
body:     if (is.matrix(x)) {
body:         if (nargs() > 1L) 
body:             stop("'nrow' or 'ncol' cannot be specified when 'x' is a matrix")
body:         if ((m <- min(dim(x))) == 0L) 
body:             return(vector(typeof(x), 0L))
body:         y <- c(x)[1 + 0L:(m - 1L) * (dim(x)[1L] + 1)]
body:         nms <- dimnames(x)
body:         if (is.list(nms) && !any(sapply(nms, is.null)) && identical((nm <- nms[[1L]][seq_len(m)]), nms[[2L]][seq_len(m)])) 
body:             names(y) <- nm
body:         return(y)
body:     }
body:     if (is.array(x) && length(dim(x)) != 1L) 
body:         stop("'x' is an array, but not one-dimensional.")
body:     if (missing(x)) 
body:         n <- nrow
body:     else if (length(x) == 1L && nargs() == 1L) {
body:         n <- as.integer(x)
body:         x <- 1
body:     }
body:     else n <- length(x)
body:     if (!missing(nrow)) 
body:         n <- nrow
body:     if (missing(ncol)) 
body:         ncol <- n
body:     .Internal(diag(x, n, ncol))
body: }
args: list(c(1, 1, 1))
retn: structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L))

func: quote(diag)
body: function (x = 1, nrow, ncol) 
body: {
body:     if (is.matrix(x)) {
body:         if (nargs() > 1L) 
body:             stop("'nrow' or 'ncol' cannot be specified when 'x' is a matrix")
body:         if ((m <- min(dim(x))) == 0L) 
body:             return(vector(typeof(x), 0L))
body:         y <- c(x)[1 + 0L:(m - 1L) * (dim(x)[1L] + 1)]
body:         nms <- dimnames(x)
body:         if (is.list(nms) && !any(sapply(nms, is.null)) && identical((nm <- nms[[1L]][seq_len(m)]), nms[[2L]][seq_len(m)])) 
body:             names(y) <- nm
body:         return(y)
body:     }
body:     if (is.array(x) && length(dim(x)) != 1L) 
body:         stop("'x' is an array, but not one-dimensional.")
body:     if (missing(x)) 
body:         n <- nrow
body:     else if (length(x) == 1L && nargs() == 1L) {
body:         n <- as.integer(x)
body:         x <- 1
body:     }
body:     else n <- length(x)
body:     if (!missing(nrow)) 
body:         n <- nrow
body:     if (missing(ncol)) 
body:         ncol <- n
body:     .Internal(diag(x, n, ncol))
body: }
args: list(list(1, 1, 1))
retn: structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L))

func: quote(diag)
body: function (x = 1, nrow, ncol) 
body: {
body:     if (is.matrix(x)) {
body:         if (nargs() > 1L) 
body:             stop("'nrow' or 'ncol' cannot be specified when 'x' is a matrix")
body:         if ((m <- min(dim(x))) == 0L) 
body:             return(vector(typeof(x), 0L))
body:         y <- c(x)[1 + 0L:(m - 1L) * (dim(x)[1L] + 1)]
body:         nms <- dimnames(x)
body:         if (is.list(nms) && !any(sapply(nms, is.null)) && identical((nm <- nms[[1L]][seq_len(m)]), nms[[2L]][seq_len(m)])) 
body:             names(y) <- nm
body:         return(y)
body:     }
body:     if (is.array(x) && length(dim(x)) != 1L) 
body:         stop("'x' is an array, but not one-dimensional.")
body:     if (missing(x)) 
body:         n <- nrow
body:     else if (length(x) == 1L && nargs() == 1L) {
body:         n <- as.integer(x)
body:         x <- 1
body:     }
body:     else n <- length(x)
body:     if (!missing(nrow)) 
body:         n <- nrow
body:     if (missing(ncol)) 
body:         ncol <- n
body:     .Internal(diag(x, n, ncol))
body: }
args: list(c(1, 1, 1, 0))
retn: structure(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0), .Dim = c(4L, 4L))

