func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(0)
retn: -1.5

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(5)
retn: 91

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(2.5)
retn: 7.25

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.25)
retn: -0.640625

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.875)
retn: 1.693359375

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.5625)
retn: 0.215087890625

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.40625)
retn: -0.279144287109375

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.484375)
retn: -0.0500526428222656

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.5234375)
retn: 0.0778326988220215

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.50390625)
retn: 0.0127411484718323

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.494140625)
retn: -0.0189401730895042

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.4990234375)
retn: -0.00317096803337336

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.50146484375)
retn: 0.00476718263234943

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.500244140625)
retn: 0.000793635859736241

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.4996337890625)
retn: -0.00118978326463548

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.49993896484375)
retn: -0.000198353082168978

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.50009155273438)
retn: 0.000297571533195651

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.50001525878906)
retn: 4.95917629486087e-05

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.49997711181641)
retn: -7.43850250848332e-05

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.49999618530273)
retn: -1.23977224575911e-05

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.5000057220459)
retn: 1.8596747395537e-05

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.50000095367432)
retn: 3.09944425680529e-06

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.49999856948853)
retn: -4.64915615339416e-06

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.49999976158142)
retn: -7.74860211549835e-07

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.50000035762787)
retn: 1.16229095681324e-06

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.50000005960464)
retn: 1.93715106178161e-07

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.49999991059303)
retn: -2.90572619299213e-07

func: quote(f)
body: function (x) 
body: (x^2 + 1) * (x - 1.5)
args: list(1.49999998509884)
retn: -4.84287732138711e-08

func: quote(f)
body: function (a) 
body: as.hexmode(bitwNot(as.hexmode(a)))
args: list(character(0))
retn: structure(integer(0), class = "hexmode")

func: quote(f)
body: function (x, name) 
body: getNativeSymbolInfo(as.character(name), PACKAGE = x)
args: list(quote(), NULL)
retn: structure(list(), .Names = character(0))

func: quote(f)
body: function (x, name) 
body: getNativeSymbolInfo(as.character(name), PACKAGE = x)
args: list(character(0), character(0))
retn: structure(list(), .Names = character(0))

func: quote(f)
body: function (x, name) 
body: {
body:     name <- pmatch(name, c("major", "minor", "patchlevel"))
body:     x <- unclass(x)
body:     switch(name, major = vapply(x, "[", 0L, 1L), minor = vapply(x, "[", 0L, 2L), patchlevel = vapply(x, "[", 0L, 3L))
body: }
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame"), structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame"))
retn: NULL

func: quote(f)
body: function (x, name) 
body: {
body:     name <- pmatch(name, c("major", "minor", "patchlevel"))
body:     x <- unclass(x)
body:     switch(name, major = vapply(x, "[", 0L, 1L), minor = vapply(x, "[", 0L, 2L), patchlevel = vapply(x, "[", 0L, 3L))
body: }
args: list(FALSE, FALSE)
retn: NULL

func: quote(f)
body: function (x, table) 
body: match(x, table, nomatch = 0L) > 0L
args: list(NULL, NULL)
retn: logical(0)

func: quote(f)
body: function (x, table) 
body: match(x, table, nomatch = 0L) > 0L
args: list(list(), list())
retn: logical(0)

func: quote(f)
body: function (x, table) 
body: match(x, table, nomatch = 0L) > 0L
args: list(logical(0), logical(0))
retn: logical(0)

func: quote(f)
body: function (e1, e2) 
body: {
body:     coerceTimeUnit <- function(x) as.vector(round(switch(attr(x, "units"), secs = x/86400, mins = x/1440, hours = x/24, days = x, weeks = 7 * x)))
body:     if (nargs() == 1) 
body:         return(e1)
body:     if (inherits(e1, "Date") && inherits(e2, "Date")) 
body:         stop("binary + is not defined for \"Date\" objects")
body:     if (inherits(e1, "difftime")) 
body:         e1 <- coerceTimeUnit(e1)
body:     if (inherits(e2, "difftime")) 
body:         e2 <- coerceTimeUnit(e2)
body:     structure(unclass(e1) + unclass(e2), class = "Date")
body: }
args: list(NULL)
retn: NULL

func: quote(f)
body: function (e1, e2) 
body: {
body:     coerceTimeUnit <- function(x) as.vector(round(switch(attr(x, "units"), secs = x/86400, mins = x/1440, hours = x/24, days = x, weeks = 7 * x)))
body:     if (nargs() == 1) 
body:         return(e1)
body:     if (inherits(e1, "Date") && inherits(e2, "Date")) 
body:         stop("binary + is not defined for \"Date\" objects")
body:     if (inherits(e1, "difftime")) 
body:         e1 <- coerceTimeUnit(e1)
body:     if (inherits(e2, "difftime")) 
body:         e2 <- coerceTimeUnit(e2)
body:     structure(unclass(e1) + unclass(e2), class = "Date")
body: }
args: list(list())
retn: list()

func: quote(f)
body: function (e1, e2) 
body: {
body:     coerceTimeUnit <- function(x) as.vector(round(switch(attr(x, "units"), secs = x/86400, mins = x/1440, hours = x/24, days = x, weeks = 7 * x)))
body:     if (nargs() == 1) 
body:         return(e1)
body:     if (inherits(e1, "Date") && inherits(e2, "Date")) 
body:         stop("binary + is not defined for \"Date\" objects")
body:     if (inherits(e1, "difftime")) 
body:         e1 <- coerceTimeUnit(e1)
body:     if (inherits(e2, "difftime")) 
body:         e2 <- coerceTimeUnit(e2)
body:     structure(unclass(e1) + unclass(e2), class = "Date")
body: }
args: list(logical(0))
retn: logical(0)

func: quote(f)
body: function (e1, e2) 
body: {
body:     coerceTimeUnit <- function(x) as.vector(round(switch(attr(x, "units"), secs = x/86400, mins = x/1440, hours = x/24, days = x, weeks = 7 * x)))
body:     if (nargs() == 1) 
body:         return(e1)
body:     if (inherits(e1, "Date") && inherits(e2, "Date")) 
body:         stop("binary + is not defined for \"Date\" objects")
body:     if (inherits(e1, "difftime")) 
body:         e1 <- coerceTimeUnit(e1)
body:     if (inherits(e2, "difftime")) 
body:         e2 <- coerceTimeUnit(e2)
body:     structure(unclass(e1) + unclass(e2), class = "Date")
body: }
args: list(structure(numeric(0), .Dim = c(0L, 0L)))
retn: structure(numeric(0), .Dim = c(0L, 0L))

func: quote(f)
body: function (e1, e2) 
body: {
body:     coerceTimeUnit <- function(x) as.vector(round(switch(attr(x, "units"), secs = x/86400, mins = x/1440, hours = x/24, days = x, weeks = 7 * x)))
body:     if (nargs() == 1) 
body:         return(e1)
body:     if (inherits(e1, "Date") && inherits(e2, "Date")) 
body:         stop("binary + is not defined for \"Date\" objects")
body:     if (inherits(e1, "difftime")) 
body:         e1 <- coerceTimeUnit(e1)
body:     if (inherits(e2, "difftime")) 
body:         e2 <- coerceTimeUnit(e2)
body:     structure(unclass(e1) + unclass(e2), class = "Date")
body: }
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame"))
retn: structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame")

func: quote(f)
body: function (e1, e2) 
body: {
body:     coerceTimeUnit <- function(x) as.vector(round(switch(attr(x, "units"), secs = x/86400, mins = x/1440, hours = x/24, days = x, weeks = 7 * x)))
body:     if (nargs() == 1) 
body:         return(e1)
body:     if (inherits(e1, "Date") && inherits(e2, "Date")) 
body:         stop("binary + is not defined for \"Date\" objects")
body:     if (inherits(e1, "difftime")) 
body:         e1 <- coerceTimeUnit(e1)
body:     if (inherits(e2, "difftime")) 
body:         e2 <- coerceTimeUnit(e2)
body:     structure(unclass(e1) + unclass(e2), class = "Date")
body: }
args: list(FALSE)
retn: FALSE

func: quote(f)
body: function () 
body: .Internal(Cstack_info())
args: NULL
retn: structure(c(NA, NA, 1L, 2L), .Names = c("size", "current", "direction", "eval_depth"))

func: quote(f)
body: function (x, do.NULL = TRUE, prefix = "col") 
body: {
body:     if (is.data.frame(x) && do.NULL) 
body:         return(names(x))
body:     dn <- dimnames(x)
body:     if (!is.null(dn[[2L]])) 
body:         dn[[2L]]
body:     else {
body:         nc <- NCOL(x)
body:         if (do.NULL) 
body:             NULL
body:         else if (nc > 0L) 
body:             paste0(prefix, seq_len(nc))
body:         else character()
body:     }
body: }
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = structure("integer(0)", .Names = "c0")))
retn: NULL

func: quote(f)
body: function (frame, rownames.force = NA) 
body: {
body:     if (!is.data.frame(frame)) 
body:         return(as.matrix(frame))
body:     d <- dim(frame)
body:     rn <- if (rownames.force %in% FALSE) 
body:         NULL
body:     else if (rownames.force %in% TRUE) 
body:         row.names(frame)
body:     else {
body:         if (.row_names_info(frame) <= 0L) 
body:             NULL
body:         else row.names(frame)
body:     }
body:     for (i in seq_len(d[2L])) {
body:         xi <- frame[[i]]
body:         if (is.integer(xi) || is.numeric(xi)) 
body:             next
body:         if (is.logical(xi) || is.factor(xi)) {
body:             frame[[i]] <- as.integer(xi)
body:             next
body:         }
body:         frame[[i]] <- if (isS4(xi)) 
body:             methods::as(xi, "numeric")
body:         else as.numeric(xi)
body:     }
body:     intOK <- all(unlist(lapply(frame, is.integer)))
body:     x <- matrix(if (intOK) 
body:         NA_integer_
body:     else NA_real_, nrow = d[1L], ncol = d[2L], dimnames = list(rn, names(frame)))
body:     for (i in seq_len(d[2L])) x[, i] <- frame[[i]]
body:     x
body: }
args: list(structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = structure("integer(0)", .Names = "c0")), structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = structure("integer(0)", .Names = "c0")))
retn: structure(list(structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = structure("integer(0)", .Names = "c0"), .Dim = c(1L, 1L), .Dimnames = list("c0", NULL))

