func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(character(0), silent = TRUE)
retn: character(0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(complex(0), silent = TRUE)
retn: complex(0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(numeric(0), silent = TRUE)
retn: numeric(0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(integer(0), silent = TRUE)
retn: integer(0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(logical(0), silent = TRUE)
retn: logical(0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(raw(0), silent = TRUE)
retn: raw(0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(NULL, silent = TRUE)
retn: NULL

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list("1", silent = TRUE)
retn: "1"

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(1+0i, silent = TRUE)
retn: 1+0i

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(1, silent = TRUE)
retn: 1

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(<environment>, silent = TRUE)
retn: <environment>

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(1L, silent = TRUE)
retn: 1L

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(TRUE, silent = TRUE)
retn: TRUE

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(01, silent = TRUE)
retn: 01

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list("3.14159265358979", silent = TRUE)
retn: "3.14159265358979"

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(3.14159265358979+0i, silent = TRUE)
retn: 3.14159265358979+0i

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(3.14159265358979, silent = TRUE)
retn: 3.14159265358979

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(3L, silent = TRUE)
retn: 3L

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(03, silent = TRUE)
retn: 03

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list("1.3", silent = TRUE)
retn: "1.3"

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(1.3+0i, silent = TRUE)
retn: 1.3+0i

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(1.3, silent = TRUE)
retn: 1.3

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(NA, silent = TRUE)
retn: NA

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(quote(1()), silent = TRUE)
retn: quote(1())

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(quote(integer(0)()), silent = TRUE)
retn: quote(integer(0)())

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list("integer(0)", silent = TRUE)
retn: "integer(0)"

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(NA_complex_, silent = TRUE)
retn: NA_complex_

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(NA_real_, silent = TRUE)
retn: NA_real_

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(NA_integer_, silent = TRUE)
retn: NA_integer_

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(00, silent = TRUE)
retn: 00

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), .Dim = 0L), silent = TRUE)
retn: structure(integer(0), .Dim = 0L)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(x = integer(0)), .Names = "x", row.names = character(0), class = "data.frame"), silent = TRUE)
retn: structure(list(x = integer(0)), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(expression(), silent = TRUE)
retn: expression()

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), .Label = character(0), class = "factor"), silent = TRUE)
retn: structure(integer(0), .Label = character(0), class = "factor")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(list(), silent = TRUE)
retn: list()

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), .Dim = 0:1), silent = TRUE)
retn: structure(integer(0), .Dim = 0:1)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(), class = "numeric_version"), silent = TRUE)
retn: structure(list(), class = "numeric_version")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), .Label = character(0), class = c("ordered", "factor")), silent = TRUE)
retn: structure(integer(0), .Label = character(0), class = c("ordered", "factor"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(), class = c("package_version", "numeric_version")), silent = TRUE)
retn: structure(list(), class = c("package_version", "numeric_version"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), class = "hexmode"), silent = TRUE)
retn: structure(integer(0), class = "hexmode")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), class = "octmode"), silent = TRUE)
retn: structure(integer(0), class = "octmode")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(numeric(0), Csingle = TRUE), silent = TRUE)
retn: structure(numeric(0), Csingle = TRUE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), Size = 0L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE), silent = TRUE)
retn: structure(integer(0), Size = 0L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame"), silent = TRUE)
retn: structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(expression(NULL), silent = TRUE)
retn: expression(NULL)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(), .Dim = 0L), silent = TRUE)
retn: structure(list(), .Dim = 0L)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(), .Dim = 0:1), silent = TRUE)
retn: structure(list(), .Dim = 0:1)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(numeric(0), Size = 0L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE), silent = TRUE)
retn: structure(numeric(0), Size = 0L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Dim = 1L), silent = TRUE)
retn: structure(1L, .Dim = 1L)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(x = 1L), .Names = "x", row.names = c(NA, -1L), class = "data.frame"), silent = TRUE)
retn: structure(list(x = 1L), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(expression(1L), silent = TRUE)
retn: expression(1L)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Label = "1", class = "factor"), silent = TRUE)
retn: structure(1L, .Label = "1", class = "factor")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(list(1L), silent = TRUE)
retn: list(1L)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Dim = c(1L, 1L)), silent = TRUE)
retn: structure(1L, .Dim = c(1L, 1L))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(quote(`1`), silent = TRUE)
retn: quote(`1`)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(1L), class = "numeric_version"), silent = TRUE)
retn: structure(list(1L), class = "numeric_version")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Label = "1", class = c("ordered", "factor")), silent = TRUE)
retn: structure(1L, .Label = "1", class = c("ordered", "factor"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Dim = 1L, .Dimnames = list("A"), class = "table"), silent = TRUE)
retn: structure(1L, .Dim = 1L, .Dimnames = list("A"), class = "table")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Tsp = c(1, 1, 1), class = "ts"), silent = TRUE)
retn: structure(1L, .Tsp = c(1, 1, 1), class = "ts")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, class = "hexmode"), silent = TRUE)
retn: structure(1L, class = "hexmode")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, class = "octmode"), silent = TRUE)
retn: structure(1L, class = "octmode")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1, Csingle = TRUE), silent = TRUE)
retn: structure(1, Csingle = TRUE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(integer(0), Size = 1L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE), silent = TRUE)
retn: structure(integer(0), Size = 1L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(3.14159265358979, .Dim = 1L), silent = TRUE)
retn: structure(3.14159265358979, .Dim = 1L)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(x = 3.14159265358979), .Names = "x", row.names = c(NA, -1L), class = "data.frame"), silent = TRUE)
retn: structure(list(x = 3.14159265358979), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(expression(3.14159265358979), silent = TRUE)
retn: expression(3.14159265358979)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Label = "3.14159265358979", class = "factor"), silent = TRUE)
retn: structure(1L, .Label = "3.14159265358979", class = "factor")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(list(3.14159265358979), silent = TRUE)
retn: list(3.14159265358979)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(3.14159265358979, .Dim = c(1L, 1L)), silent = TRUE)
retn: structure(3.14159265358979, .Dim = c(1L, 1L))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(quote(`3.141593`), silent = TRUE)
retn: quote(`3.141593`)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(c(3L, 2147483647L)), class = "numeric_version"), silent = TRUE)
retn: structure(list(c(3L, 2147483647L)), class = "numeric_version")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Label = "3.14159265358979", class = c("ordered", "factor")), silent = TRUE)
retn: structure(1L, .Label = "3.14159265358979", class = c("ordered", "factor"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(c(3L, 2147483647L)), class = c("package_version", "numeric_version")), silent = TRUE)
retn: structure(list(c(3L, 2147483647L)), class = c("package_version", "numeric_version"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(3.14159265358979, .Dim = 1L, .Dimnames = list("A"), class = "table"), silent = TRUE)
retn: structure(3.14159265358979, .Dim = 1L, .Dimnames = list("A"), class = "table")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(3.14159265358979, .Tsp = c(1, 1, 1), class = "ts"), silent = TRUE)
retn: structure(3.14159265358979, .Tsp = c(1, 1, 1), class = "ts")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(3.14159265358979, Csingle = TRUE), silent = TRUE)
retn: structure(3.14159265358979, Csingle = TRUE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(numeric(0), Size = 1L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE), silent = TRUE)
retn: structure(numeric(0), Size = 1L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure("1.3", .Dim = 1L), silent = TRUE)
retn: structure("1.3", .Dim = 1L)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(x = structure(1L, .Label = "1.3", class = "factor")), .Names = "x", row.names = c(NA, -1L), class = "data.frame"), silent = TRUE)
retn: structure(list(x = structure(1L, .Label = "1.3", class = "factor")), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(expression("1.3"), silent = TRUE)
retn: expression("1.3")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Label = "1.3", class = "factor"), silent = TRUE)
retn: structure(1L, .Label = "1.3", class = "factor")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(list("1.3"), silent = TRUE)
retn: list("1.3")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure("1.3", .Dim = c(1L, 1L)), silent = TRUE)
retn: structure("1.3", .Dim = c(1L, 1L))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(quote(`1.3`), silent = TRUE)
retn: quote(`1.3`)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(c(1L, 3L)), class = "numeric_version"), silent = TRUE)
retn: structure(list(c(1L, 3L)), class = "numeric_version")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1L, .Label = "1.3", class = c("ordered", "factor")), silent = TRUE)
retn: structure(1L, .Label = "1.3", class = c("ordered", "factor"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(c(1L, 3L)), class = c("package_version", "numeric_version")), silent = TRUE)
retn: structure(list(c(1L, 3L)), class = c("package_version", "numeric_version"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure("1.3", .Tsp = c(1, 1, 1), class = "ts"), silent = TRUE)
retn: structure("1.3", .Tsp = c(1, 1, 1), class = "ts")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(NA_real_, tzone = "", units = "secs", class = "difftime"), silent = TRUE)
retn: structure(NA_real_, tzone = "", units = "secs", class = "difftime")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(1.3, Csingle = TRUE), silent = TRUE)
retn: structure(1.3, Csingle = TRUE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(a = 1), .Dim = 1L, .Dimnames = list("a")), silent = TRUE)
retn: structure(list(a = 1), .Dim = 1L, .Dimnames = list("a"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(a = 1), .Names = "a", row.names = c(NA, -1L), class = "data.frame"), silent = TRUE)
retn: structure(list(a = 1), .Names = "a", row.names = c(NA, -1L), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(expression(a = 1), .Names = "a"), silent = TRUE)
retn: structure(expression(a = 1), .Names = "a")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(function () 
args: 1, silent = TRUE)
retn: function () 
retn: 1

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(a = 1), .Names = "a"), silent = TRUE)
retn: structure(list(a = 1), .Names = "a")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(1), .Dim = c(1L, 1L), .Dimnames = list("a", NULL)), silent = TRUE)
retn: structure(list(1), .Dim = c(1L, 1L), .Dimnames = list("a", NULL))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(a = 1L), .Names = "a", class = "numeric_version"), silent = TRUE)
retn: structure(list(a = 1L), .Names = "a", class = "numeric_version")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(list(a = 1), silent = TRUE)
retn: list(a = 1)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(a = 1), .Names = "a", .Tsp = c(1, 1, 1), class = "ts"), silent = TRUE)
retn: structure(list(a = 1), .Names = "a", .Tsp = c(1, 1, 1), class = "ts")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(numeric(0), Labels = "a", Size = 1L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE), silent = TRUE)
retn: structure(numeric(0), Labels = "a", Size = 1L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), silent = TRUE)
retn: structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(expression(`character(0)` = integer(0)), .Names = "character(0)", row.names = character(0), class = "data.frame"), silent = TRUE)
retn: structure(expression(`character(0)` = integer(0)), .Names = "character(0)", row.names = character(0), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(function () 
args: integer(0), silent = TRUE)
retn: function () 
retn: integer(0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)"), silent = TRUE)
retn: structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(logical(0), .Dim = 0:1, .Dimnames = list(NULL, "character(0)")), silent = TRUE)
retn: structure(logical(0), .Dim = 0:1, .Dimnames = list(NULL, "character(0)"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame"), silent = TRUE)
retn: structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(NA_real_, Csingle = TRUE), silent = TRUE)
retn: structure(NA_real_, Csingle = TRUE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(numeric(0), Labels = "character(0)", Size = 0L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE), silent = TRUE)
retn: structure(numeric(0), Labels = "character(0)", Size = 0L, call = quote(as.dist.default(m = x)), class = "dist", Diag = FALSE, Upper = FALSE)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(quote(~`character(0)`), silent = TRUE)
retn: quote(~`character(0)`)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(9.86960440108936, .Dim = c(1L, 1L)), silent = TRUE)
retn: structure(9.86960440108936, .Dim = c(1L, 1L))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(class = "testit"), .Names = "class"), silent = TRUE)
retn: structure(list(class = "testit"), .Names = "class")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list("testit", silent = TRUE)
retn: "testit"

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(3.14159265358979, class = structure("3.14159265358979", class = "testit")), silent = TRUE)
retn: structure(3.14159265358979, class = structure("3.14159265358979", class = "testit"))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(expression(x), silent = TRUE)
retn: expression(x)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(c(0, 0, 0, 0, 0), silent = TRUE)
retn: c(0, 0, 0, 0, 0)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(FALSE, silent = TRUE)
retn: FALSE

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(list(structure(3.14159265358979, class = structure("3.14159265358979", class = "testit"))), silent = TRUE)
retn: list(structure(3.14159265358979, class = structure("3.14159265358979", class = "testit")))

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure("3.14159265358979", class = "testit"), silent = TRUE)
retn: structure("3.14159265358979", class = "testit")

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(quote(x), silent = TRUE)
retn: quote(x)

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(1:3, silent = TRUE)
retn: 1:3

func: quote(try)
body: function (expr, silent = FALSE) 
body: {
body:     tryCatch(expr, error = function(e) {
body:         call <- conditionCall(e)
body:         if (!is.null(call)) {
body:             if (identical(call[[1L]], quote(doTryCatch))) 
body:                 call <- sys.call(-4L)
body:             dcall <- deparse(call)[1L]
body:             prefix <- paste("Error in", dcall, ": ")
body:             LONG <- 75L
body:             msg <- conditionMessage(e)
body:             sm <- strsplit(msg, "\n")[[1L]]
body:             w <- 14L + nchar(dcall, type = "w") + nchar(sm[1L], type = "w")
body:             if (is.na(w)) 
body:                 w <- 14L + nchar(dcall, type = "b") + nchar(sm[1L], type = "b")
body:             if (w > LONG) 
body:                 prefix <- paste0(prefix, "\n  ")
body:         }
body:         else prefix <- "Error : "
body:         msg <- paste0(prefix, conditionMessage(e), "\n")
body:         .Internal(seterrmessage(msg[1L]))
body:         if (!silent && identical(getOption("show.error.messages"), TRUE)) {
body:             cat(msg, file = stderr())
body:             .Internal(printDeferredWarnings())
body:         }
body:         invisible(structure(msg, class = "try-error", condition = e))
body:     })
body: }
args: list(structure(list(), class = "formula", .Environment = <environment>), silent = TRUE)
retn: structure(list(), class = "formula", .Environment = <environment>)

