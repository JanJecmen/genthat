func: quote(array)
body: function (data = NA, dim = length(data), dimnames = NULL) 
body: {
body:     if (is.atomic(data) && !is.object(data)) 
body:         return(.Internal(array(data, dim, dimnames)))
body:     data <- as.vector(data)
body:     if (is.object(data)) {
body:         dim <- as.integer(dim)
body:         if (!length(dim)) 
body:             stop("'dims' cannot be of length 0")
body:         vl <- prod(dim)
body:         if (length(data) != vl) {
body:             if (vl > .Machine$integer.max) 
body:                 stop("'dim' specifies too large an array")
body:             data <- rep(data, length.out = vl)
body:         }
body:         if (length(dim)) 
body:             dim(data) <- dim
body:         if (is.list(dimnames) && length(dimnames)) 
body:             dimnames(data) <- dimnames
body:         data
body:     }
body:     else .Internal(array(data, dim, dimnames))
body: }
args: list(1:20, dim = c(4, 5))
retn: structure(1:20, .Dim = 4:5)

func: quote(array)
body: function (data = NA, dim = length(data), dimnames = NULL) 
body: {
body:     if (is.atomic(data) && !is.object(data)) 
body:         return(.Internal(array(data, dim, dimnames)))
body:     data <- as.vector(data)
body:     if (is.object(data)) {
body:         dim <- as.integer(dim)
body:         if (!length(dim)) 
body:             stop("'dims' cannot be of length 0")
body:         vl <- prod(dim)
body:         if (length(data) != vl) {
body:             if (vl > .Machine$integer.max) 
body:                 stop("'dim' specifies too large an array")
body:             data <- rep(data, length.out = vl)
body:         }
body:         if (length(dim)) 
body:             dim(data) <- dim
body:         if (is.list(dimnames) && length(dimnames)) 
body:             dimnames(data) <- dimnames
body:         data
body:     }
body:     else .Internal(array(data, dim, dimnames))
body: }
args: list(c(1L, 2L, 3L, 3L, 2L, 1L), dim = c(3, 2))
retn: structure(c(1L, 2L, 3L, 3L, 2L, 1L), .Dim = c(3L, 2L))

func: quote(array)
body: function (data = NA, dim = length(data), dimnames = NULL) 
body: {
body:     if (is.atomic(data) && !is.object(data)) 
body:         return(.Internal(array(data, dim, dimnames)))
body:     data <- as.vector(data)
body:     if (is.object(data)) {
body:         dim <- as.integer(dim)
body:         if (!length(dim)) 
body:             stop("'dims' cannot be of length 0")
body:         vl <- prod(dim)
body:         if (length(data) != vl) {
body:             if (vl > .Machine$integer.max) 
body:                 stop("'dim' specifies too large an array")
body:             data <- rep(data, length.out = vl)
body:         }
body:         if (length(dim)) 
body:             dim(data) <- dim
body:         if (is.list(dimnames) && length(dimnames)) 
body:             dimnames(data) <- dimnames
body:         data
body:     }
body:     else .Internal(array(data, dim, dimnames))
body: }
args: list(1:17, dim = c(3, 4, 2))
retn: structure(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 1L, 2L, 3L, 4L, 5L, 6L, 7L), .Dim = c(3L, 4L, 2L))

func: quote(array)
body: function (data = NA, dim = length(data), dimnames = NULL) 
body: {
body:     if (is.atomic(data) && !is.object(data)) 
body:         return(.Internal(array(data, dim, dimnames)))
body:     data <- as.vector(data)
body:     if (is.object(data)) {
body:         dim <- as.integer(dim)
body:         if (!length(dim)) 
body:             stop("'dims' cannot be of length 0")
body:         vl <- prod(dim)
body:         if (length(data) != vl) {
body:             if (vl > .Machine$integer.max) 
body:                 stop("'dim' specifies too large an array")
body:             data <- rep(data, length.out = vl)
body:         }
body:         if (length(dim)) 
body:             dim(data) <- dim
body:         if (is.list(dimnames) && length(dimnames)) 
body:             dimnames(data) <- dimnames
body:         data
body:     }
body:     else .Internal(array(data, dim, dimnames))
body: }
args: list(0, c(3, 4, 2))
retn: structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(3L, 4L, 2L))

