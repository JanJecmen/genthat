func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "ef", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè")
retn: "«Latin-1 accented chars»: ef øØ å<Å æ<Æ é ef"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "ef", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", useBytes = TRUE)
retn: "«Latin-1 accented chars»: ef øØ å<Å æ<Æ é ef"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "ef", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE)
retn: "«Latin-1 accented chars»: ef øØ å<Å æ<Æ é ef"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "ef", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE, useBytes = TRUE)
retn: "«Latin-1 accented chars»: ef øØ å<Å æ<Æ é ef"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "ef", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE)
retn: "«Latin-1 accented chars»: ef øØ å<Å æ<Æ é ef"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "ef", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE, useBytes = TRUE)
retn: "«Latin-1 accented chars»: ef øØ å<Å æ<Æ é ef"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("é", "gh", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè")
retn: "«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("é", "gh", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", useBytes = TRUE)
retn: "«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("é", "gh", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE)
retn: "«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("é", "gh", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE, useBytes = TRUE)
retn: "«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("é", "gh", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE)
retn: "«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("é", "gh", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE, useBytes = TRUE)
retn: "«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("a*", "x", "baaac")
retn: "xbxcx"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("\\b", "|", "The quick brown èé", perl = TRUE)
retn: "|The| |quick| |brown| èé"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("\\b", "|", "The quick brown fox", perl = TRUE)
retn: "|The| |quick| |brown| |fox|"

func: quote(gsub)
body: function (pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- as.character(x)
body:     .Internal(gsub(as.character(pattern), as.character(replacement), x, ignore.case, perl, fixed, useBytes))
body: }
args: list("\\b", "|", "The quick brown fox")
retn: "|T|h|e| |q|u|i|c|k| |b|r|o|w|n| |f|o|x|"

