func: quote(lsfit)
body: function (x, y, wt = NULL, intercept = TRUE, tolerance = 1e-07, yname = NULL) 
body: {
body:     x <- as.matrix(x)
body:     y <- as.matrix(y)
body:     xnames <- colnames(x)
body:     if (is.null(xnames)) {
body:         if (ncol(x) == 1L) 
body:             xnames <- "X"
body:         else xnames <- paste0("X", 1L:ncol(x))
body:     }
body:     if (intercept) {
body:         x <- cbind(1, x)
body:         xnames <- c("Intercept", xnames)
body:     }
body:     if (is.null(yname) && ncol(y) > 1) 
body:         yname <- paste0("Y", 1L:ncol(y))
body:     good <- complete.cases(x, y, wt)
body:     dimy <- dim(as.matrix(y))
body:     if (any(!good)) {
body:         warning(sprintf(ngettext(sum(!good), "%d missing value deleted", "%d missing values deleted"), sum(!good)), domain = NA)
body:         x <- as.matrix(x)[good, ]
body:         y <- as.matrix(y)[good, ]
body:         wt <- wt[good]
body:     }
body:     nrx <- NROW(x)
body:     ncx <- NCOL(x)
body:     nry <- NROW(y)
body:     ncy <- NCOL(y)
body:     nwts <- length(wt)
body:     if (nry != nrx) 
body:         stop(sprintf(paste0(ngettext(nrx, "'X' matrix has %d case (row)", "'X' matrix has %d cases (rows)"), ", ", ngettext(nry, "'Y' has %d case (row)", "'Y' has %d cases (rows)"), nrx, nry)), domain = NA)
body:     if (nry < ncx) 
body:         stop(sprintf(paste0(ngettext(nry, "only %d case", "only %d cases"), ", ", ngettext(ncx, "but %d variable", "but %d variables")), nry, ncx), domain = NA)
body:     if (!is.null(wt)) {
body:         if (any(wt < 0)) 
body:             stop("negative weights not allowed")
body:         if (nwts != nry) 
body:             stop(gettextf("number of weights = %d should equal %d (number of responses)", nwts, nry), domain = NA)
body:         wtmult <- wt^0.5
body:         if (any(wt == 0)) {
body:             xzero <- as.matrix(x)[wt == 0, ]
body:             yzero <- as.matrix(y)[wt == 0, ]
body:         }
body:         x <- x * wtmult
body:         y <- y * wtmult
body:         invmult <- 1/ifelse(wt == 0, 1, wtmult)
body:     }
body:     z <- .Call(C_Cdqrls, x, y, tolerance)
body:     resids <- array(NA, dim = dimy)
body:     dim(z$residuals) <- c(nry, ncy)
body:     if (!is.null(wt)) {
body:         if (any(wt == 0)) {
body:             if (ncx == 1L) 
body:                 fitted.zeros <- xzero * z$coefficients
body:             else fitted.zeros <- xzero %*% z$coefficients
body:             z$residuals[wt == 0, ] <- yzero - fitted.zeros
body:         }
body:         z$residuals <- z$residuals * invmult
body:     }
body:     resids[good, ] <- z$residuals
body:     if (dimy[2L] == 1 && is.null(yname)) {
body:         resids <- drop(resids)
body:         names(z$coefficients) <- xnames
body:     }
body:     else {
body:         colnames(resids) <- yname
body:         colnames(z$effects) <- yname
body:         dim(z$coefficients) <- c(ncx, ncy)
body:         dimnames(z$coefficients) <- list(xnames, yname)
body:     }
body:     z$qr <- as.matrix(z$qr)
body:     colnames(z$qr) <- xnames
body:     output <- list(coefficients = z$coefficients, residuals = resids)
body:     if (z$rank != ncx) {
body:         xnames <- xnames[z$pivot]
body:         dimnames(z$qr) <- list(NULL, xnames)
body:         warning("'X' matrix was collinear")
body:     }
body:     if (!is.null(wt)) {
body:         weights <- rep.int(NA, dimy[1L])
body:         weights[good] <- wt
body:         output <- c(output, list(wt = weights))
body:     }
body:     rqr <- list(qt = drop(z$effects), qr = z$qr, qraux = z$qraux, rank = z$rank, pivot = z$pivot, tol = z$tol)
body:     oldClass(rqr) <- "qr"
body:     output <- c(output, list(intercept = intercept, qr = rqr))
body:     return(output)
body: }
args: list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 2.25, 1, 0.25, 0, 0.25, 1, 2.25, 4), .Dim = c(9L, 2L)), c(1L, 2L, 3L, 4L, 2L, 3L, 4L, 5L, 6L))
retn: structure(list(coefficients = structure(c(0.616883116883117, 0.5, 0.12987012987013), .Names = c("Intercept", "X1", "X2")), residuals = c(-0.636363636363637, 0.0909090909090914, 0.753246753246753, 1.35064935064935, -1.11688311688312, -0.649350649350649, -0.246753246753247, 0.0909090909090909, 0.363636363636364), intercept = TRUE, qr = structure(list(qt = c(-10, 3.87298334620742, 0.56980288229819, 1.19517216183674, -1.28602968091395, -0.753524564123837, -0.207312487792907, 0.352606548078837, 0.926232543491394
retn: ), qr = structure(c(-3, 0.333333333333333, 0.333333333333333, 0.333333333333333, 0.333333333333333, 0.333333333333333, 0.333333333333333, 0.333333333333333, 0.333333333333333, -15, 7.74596669241483, 0.129099444873581, 0, -0.129099444873581, -0.258198889747161, -0.387298334620742, -0.516397779494322, -0.645497224367903, -5, 4.44089209850063e-16, 4.38748219369606, 0.455842305838552, 0.512822594068371, 0.455842305838552, 0.284901441149095, -1.01217324708037e-16, -0.398862017608733), .Dim = c(9L, 3L), .Dimnames = list(
retn:     NULL, c("Intercept", "X1", "X2"))), qraux = c(1.33333333333333, 1.25819888974716, 1.28490144114909), rank = 3L, pivot = 1:3, tol = 1e-07), .Names = c("qt", "qr", "qraux", "rank", "pivot", "tol"), class = "qr")), .Names = c("coefficients", "residuals", "intercept", "qr"))

