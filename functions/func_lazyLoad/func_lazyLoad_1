func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/utils/R/utils", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/methods/R/methods", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/grDevices/R/grDevices", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/graphics/R/graphics", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/stats/R/stats", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/tools/R/tools", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/compiler/R/compiler", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/KernSmooth/R/KernSmooth", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/grid/R/grid", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/splines/R/splines", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

func: quote(lazyLoad)
body: function (filebase, envir = parent.frame(), filter) 
body: {
body:     fun <- function(db) {
body:         vals <- db$vals
body:         vars <- db$vars
body:         expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:         .Internal(makeLazy(vars, vals, expr, db, envir))
body:     }
body:     lazyLoadDBexec(filebase, fun, filter)
body: }
args: list("/home/roman/r-instrumented/library/stats4/R/stats4", <environment>, filter = function (n) 
args: n != ".__NAMESPACE__.")
retn: NULL

