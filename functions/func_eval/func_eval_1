func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote({
args:     routines <- getDLLRegisteredRoutines("base")
args:     for (i in c("dchdc", "dqrcf", "dqrdc2", "dqrqty", "dqrqy", "dqrrsd", "dqrxb", "dtrco")) assign(paste0(".F_", i), routines[[3]][[i]], envir = .BaseNamespaceEnv)
args:     for (i in 1:2) lapply(routines[[i]], function(sym) assign(paste0(".C_", sym$name), sym, envir = .BaseNamespaceEnv))
args: }), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote({
args:     dp <- Sys.getenv("R_DEFAULT_PACKAGES")
args:     if (identical(dp, "")) dp <- c("datasets", "utils", "grDevices", "graphics", "stats", "methods") else if (identical(dp, "NULL")) dp <- character(0) else dp <- strsplit(dp, ",")[[1]]
args:     dp <- sub("[[:blank:]]*([[:alnum:]]+)", "\\1", dp)
args:     options(defaultPackages = dp)
args: }), <environment>)
retn: structure(list(defaultPackages = NULL), .Names = "defaultPackages")

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote({
args:     popath <- Sys.getenv("R_TRANSLATIONS", "")
args:     if (!nzchar(popath)) {
args:         paths <- file.path(.libPaths(), "translations", "DESCRIPTION")
args:         popath <- dirname(paths[file.exists(paths)][1])
args:     }
args:     bindtextdomain("R", popath)
args:     bindtextdomain("R-base", popath)
args:     assign(".popath", popath, .BaseNamespaceEnv)
args: }), <environment>)
retn: "/home/roman/r-instrumented/library/translations"

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote({
args:     papersize <- Sys.getenv("R_PAPERSIZE_USER")
args:     if (!nchar(papersize)) {
args:         lcpaper <- Sys.getlocale("LC_PAPER")
args:         papersize <- if (nchar(lcpaper)) if (length(grep("(_US|_CA)", lcpaper))) "letter" else "a4" else Sys.getenv("R_PAPERSIZE")
args:     }
args:     options(papersize = papersize, printcmd = Sys.getenv("R_PRINTCMD"), dvipscmd = Sys.getenv("DVIPS", "dvips"), texi2dvi = Sys.getenv("R_TEXI2DVICMD"), browser = Sys.getenv("R_BROWSER"), pager = file.path(R.home(), "bin", "pager"), pdfviewer = Sys.getenv("R_PDFVIEWER"), useFancyQuotes = TRUE)
args: }), <environment>)
retn: structure(list(papersize = NULL, printcmd = NULL, dvipscmd = NULL, texi2dvi = NULL, browser = NULL, pager = NULL, pdfviewer = NULL, useFancyQuotes = NULL), .Names = c("papersize", "printcmd", "dvipscmd", "texi2dvi", "browser", "pager", "pdfviewer", "useFancyQuotes"))

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote({
args:     tests_startup <- Sys.getenv("R_TESTS")
args:     if (nzchar(tests_startup)) source(tests_startup)
args: }), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote({
args:     info <- loadingNamespaceInfo()
args:     pkg <- info$pkgname
args:     ns <- .getNamespace(as.name(pkg))
args:     if (is.null(ns)) stop("cannot find namespace environment for ", pkg, domain = NA)
args:     dbbase <- file.path(info$libname, pkg, "R", pkg)
args:     lazyLoad(dbbase, ns, filter = function(n) n != ".__NAMESPACE__.")
args: }), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(sin(omega * x * y)), <environment>)
retn: c(0.909297426825682, -0.756802495307928, -0.279415498198926, 0.989358246623382, -0.54402111088937)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rbinom))
retn: function (n, size, prob) 
retn: .External(C_rbinom, n, size, prob)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pbinom))
retn: function (q, size, prob, lower.tail = TRUE, log.p = FALSE) 
retn: .External(C_pbinom, q, size, prob, lower.tail, log.p)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rpois))
retn: function (n, lambda) 
retn: .External(C_rpois, n, lambda)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(ppois))
retn: function (q, lambda, lower.tail = TRUE, log.p = FALSE) 
retn: .External(C_ppois, q, lambda, lower.tail, log.p)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rnbinom))
retn: function (n, size, prob, mu) 
retn: {
retn:     if (!missing(mu)) {
retn:         if (!missing(prob)) 
retn:             stop("'prob' and 'mu' both specified")
retn:         .External(C_rnbinom_mu, n, size, mu)
retn:     }
retn:     else .External(C_rnbinom, n, size, prob)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pnbinom))
retn: function (q, size, prob, mu, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     if (!missing(mu)) {
retn:         if (!missing(prob)) 
retn:             stop("'prob' and 'mu' both specified")
retn:         .External(C_pnbinom_mu, q, size, mu, lower.tail, log.p)
retn:     }
retn:     else .External(C_pnbinom, q, size, prob, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rnorm))
retn: function (n, mean = 0, sd = 1) 
retn: .External(C_rnorm, n, mean, sd)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pnorm))
retn: function (q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) 
retn: .External(C_pnorm, q, mean, sd, lower.tail, log.p)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rgamma))
retn: function (n, shape, rate = 1, scale = 1/rate) 
retn: {
retn:     if (!missing(rate) && !missing(scale)) {
retn:         if (abs(rate * scale - 1) < 1e-15) 
retn:             warning("specify 'rate' or 'scale' but not both")
retn:         else stop("specify 'rate' or 'scale' but not both")
retn:     }
retn:     .External(C_rgamma, n, shape, scale)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pgamma))
retn: function (q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     if (!missing(rate) && !missing(scale)) {
retn:         if (abs(rate * scale - 1) < 1e-15) 
retn:             warning("specify 'rate' or 'scale' but not both")
retn:         else stop("specify 'rate' or 'scale' but not both")
retn:     }
retn:     .External(C_pgamma, q, shape, scale, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rhyper))
retn: function (nn, m, n, k) 
retn: .External(C_rhyper, nn, m, n, k)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(phyper))
retn: function (q, m, n, k, lower.tail = TRUE, log.p = FALSE) 
retn: .External(C_phyper, q, m, n, k, lower.tail, log.p)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rsignrank))
retn: function (nn, n) 
retn: .External(C_rsignrank, nn, n)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(psignrank))
retn: function (q, n, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     on.exit(.External(C_signrank_free))
retn:     .External(C_psignrank, q, n, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rwilcox))
retn: function (nn, m, n) 
retn: .External(C_rwilcox, nn, m, n)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pwilcox))
retn: function (q, m, n, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     on.exit(.External(C_wilcox_free))
retn:     .External(C_pwilcox, q, m, n, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rchisq))
retn: function (n, df, ncp = 0) 
retn: {
retn:     if (missing(ncp)) 
retn:         .External(C_rchisq, n, df)
retn:     else .External(C_rnchisq, n, df, ncp)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pchisq))
retn: function (q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     if (missing(ncp)) 
retn:         .External(C_pchisq, q, df, lower.tail, log.p)
retn:     else .External(C_pnchisq, q, df, ncp, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rlogis))
retn: function (n, location = 0, scale = 1) 
retn: .External(C_rlogis, n, location, scale)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(plogis))
retn: function (q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) 
retn: .External(C_plogis, q, location, scale, lower.tail, log.p)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rt))
retn: function (n, df, ncp) 
retn: {
retn:     if (missing(ncp)) 
retn:         .External(C_rt, n, df)
retn:     else rnorm(n, ncp)/sqrt(rchisq(n, df)/df)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pt))
retn: function (q, df, ncp, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     if (missing(ncp)) 
retn:         .External(C_pt, q, df, lower.tail, log.p)
retn:     else .External(C_pnt, q, df, ncp, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rbeta))
retn: function (n, shape1, shape2, ncp = 0) 
retn: {
retn:     if (ncp == 0) 
retn:         .External(C_rbeta, n, shape1, shape2)
retn:     else {
retn:         X <- rchisq(n, 2 * shape1, ncp = ncp)
retn:         X/(X + rchisq(n, 2 * shape2))
retn:     }
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pbeta))
retn: function (q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     if (missing(ncp)) 
retn:         .External(C_pbeta, q, shape1, shape2, lower.tail, log.p)
retn:     else .External(C_pnbeta, q, shape1, shape2, ncp, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rcauchy))
retn: function (n, location = 0, scale = 1) 
retn: .External(C_rcauchy, n, location, scale)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pcauchy))
retn: function (q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) 
retn: .External(C_pcauchy, q, location, scale, lower.tail, log.p)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rf))
retn: function (n, df1, df2, ncp) 
retn: {
retn:     if (missing(ncp)) 
retn:         .External(C_rf, n, df1, df2)
retn:     else (rchisq(n, df1, ncp = ncp)/df1)/(rchisq(n, df2)/df2)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pf))
retn: function (q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE) 
retn: {
retn:     if (missing(ncp)) 
retn:         .External(C_pf, q, df1, df2, lower.tail, log.p)
retn:     else .External(C_pnf, q, df1, df2, ncp, lower.tail, log.p)
retn: }

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(rweibull))
retn: function (n, shape, scale = 1) 
retn: .External(C_rweibull, n, shape, scale)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(pweibull))
retn: function (q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE) 
retn: .External(C_pweibull, q, shape, scale, lower.tail, log.p)

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(!x))
retn: structure("OK", class = "testOK")

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(NULL, <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(), NULL)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(NULL, NULL)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(list()), <environment>)
retn: list()

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(l0), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(c0), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(m0), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(df0), <environment>)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(FALSE, <environment>)
retn: FALSE

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(list()), list())
retn: list()

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(l0), NULL)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(c0), NULL)
retn: NULL

func: quote(eval)
body: function (expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) 
body: .Internal(eval(expr, envir, enclos))
args: list(quote(df0), NULL)
retn: NULL

