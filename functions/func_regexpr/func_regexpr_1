func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("en", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE)
retn: structure(13L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("en", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE, useBytes = TRUE)
retn: structure(14L, match.length = 2L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("en", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè")
retn: structure(13L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("en", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", useBytes = TRUE)
retn: structure(14L, match.length = 2L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("en", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE)
retn: structure(13L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("en", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE, useBytes = TRUE)
retn: structure(14L, match.length = 2L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("EN", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE)
retn: structure(13L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("EN", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, useBytes = TRUE)
retn: structure(14L, match.length = 2L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("EN", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE)
retn: structure(13L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("EN", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE, useBytes = TRUE)
retn: structure(14L, match.length = 2L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE)
retn: structure(27L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE, useBytes = TRUE)
retn: structure(29L, match.length = 4L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè")
retn: structure(27L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", useBytes = TRUE)
retn: structure(29L, match.length = 4L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE)
retn: structure(27L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE, useBytes = TRUE)
retn: structure(29L, match.length = 4L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE)
retn: structure(27L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, useBytes = TRUE)
retn: structure(29L, match.length = 4L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE)
retn: structure(27L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE, useBytes = TRUE)
retn: structure(29L, match.length = 4L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("ÉÈ", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE)
retn: structure(27L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("ÉÈ", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE)
retn: structure(27L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list("ÉÈ", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE, useBytes = TRUE)
retn: structure(-1L, match.length = -1L, useBytes = TRUE)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list(" ", "façile a ")
retn: structure(7L, match.length = 1L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list(" ", "façile a ", fixed = TRUE)
retn: structure(7L, match.length = 1L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list(" a", "façile a ")
retn: structure(7L, match.length = 2L)

func: quote(regexpr)
body: function (pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 
body: {
body:     if (!is.character(text)) 
body:         text <- as.character(text)
body:     .Internal(regexpr(as.character(pattern), text, ignore.case, perl, fixed, useBytes))
body: }
args: list(" a", "façile a ", fixed = TRUE)
retn: structure(7L, match.length = 2L)

