func: quote(require)
body: function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE) 
body: {
body:     if (!character.only) 
body:         package <- as.character(substitute(package))
body:     loaded <- paste("package", package, sep = ":") %in% search()
body:     if (!loaded) {
body:         if (!quietly) 
body:             packageStartupMessage(gettextf("Loading required package: %s", package), domain = NA)
body:         value <- tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts, quietly = quietly), error = function(e) e)
body:         if (inherits(value, "error")) {
body:             if (!quietly) {
body:                 msg <- conditionMessage(value)
body:                 cat("Failed with error:  ", sQuote(msg), "\n", file = stderr(), sep = "")
body:                 .Internal(printDeferredWarnings())
body:             }
body:             return(invisible(FALSE))
body:         }
body:         if (!value) 
body:             return(invisible(FALSE))
body:     }
body:     else value <- TRUE
body:     invisible(value)
body: }
args: list("methods", quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
retn: TRUE

func: quote(require)
body: function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE) 
body: {
body:     if (!character.only) 
body:         package <- as.character(substitute(package))
body:     loaded <- paste("package", package, sep = ":") %in% search()
body:     if (!loaded) {
body:         if (!quietly) 
body:             packageStartupMessage(gettextf("Loading required package: %s", package), domain = NA)
body:         value <- tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts, quietly = quietly), error = function(e) e)
body:         if (inherits(value, "error")) {
body:             if (!quietly) {
body:                 msg <- conditionMessage(value)
body:                 cat("Failed with error:  ", sQuote(msg), "\n", file = stderr(), sep = "")
body:                 .Internal(printDeferredWarnings())
body:             }
body:             return(invisible(FALSE))
body:         }
body:         if (!value) 
body:             return(invisible(FALSE))
body:     }
body:     else value <- TRUE
body:     invisible(value)
body: }
args: list("datasets", quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
retn: TRUE

func: quote(require)
body: function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE) 
body: {
body:     if (!character.only) 
body:         package <- as.character(substitute(package))
body:     loaded <- paste("package", package, sep = ":") %in% search()
body:     if (!loaded) {
body:         if (!quietly) 
body:             packageStartupMessage(gettextf("Loading required package: %s", package), domain = NA)
body:         value <- tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts, quietly = quietly), error = function(e) e)
body:         if (inherits(value, "error")) {
body:             if (!quietly) {
body:                 msg <- conditionMessage(value)
body:                 cat("Failed with error:  ", sQuote(msg), "\n", file = stderr(), sep = "")
body:                 .Internal(printDeferredWarnings())
body:             }
body:             return(invisible(FALSE))
body:         }
body:         if (!value) 
body:             return(invisible(FALSE))
body:     }
body:     else value <- TRUE
body:     invisible(value)
body: }
args: list("utils", quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
retn: TRUE

func: quote(require)
body: function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE) 
body: {
body:     if (!character.only) 
body:         package <- as.character(substitute(package))
body:     loaded <- paste("package", package, sep = ":") %in% search()
body:     if (!loaded) {
body:         if (!quietly) 
body:             packageStartupMessage(gettextf("Loading required package: %s", package), domain = NA)
body:         value <- tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts, quietly = quietly), error = function(e) e)
body:         if (inherits(value, "error")) {
body:             if (!quietly) {
body:                 msg <- conditionMessage(value)
body:                 cat("Failed with error:  ", sQuote(msg), "\n", file = stderr(), sep = "")
body:                 .Internal(printDeferredWarnings())
body:             }
body:             return(invisible(FALSE))
body:         }
body:         if (!value) 
body:             return(invisible(FALSE))
body:     }
body:     else value <- TRUE
body:     invisible(value)
body: }
args: list("grDevices", quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
retn: TRUE

func: quote(require)
body: function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE) 
body: {
body:     if (!character.only) 
body:         package <- as.character(substitute(package))
body:     loaded <- paste("package", package, sep = ":") %in% search()
body:     if (!loaded) {
body:         if (!quietly) 
body:             packageStartupMessage(gettextf("Loading required package: %s", package), domain = NA)
body:         value <- tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts, quietly = quietly), error = function(e) e)
body:         if (inherits(value, "error")) {
body:             if (!quietly) {
body:                 msg <- conditionMessage(value)
body:                 cat("Failed with error:  ", sQuote(msg), "\n", file = stderr(), sep = "")
body:                 .Internal(printDeferredWarnings())
body:             }
body:             return(invisible(FALSE))
body:         }
body:         if (!value) 
body:             return(invisible(FALSE))
body:     }
body:     else value <- TRUE
body:     invisible(value)
body: }
args: list("graphics", quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
retn: TRUE

func: quote(require)
body: function (package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE) 
body: {
body:     if (!character.only) 
body:         package <- as.character(substitute(package))
body:     loaded <- paste("package", package, sep = ":") %in% search()
body:     if (!loaded) {
body:         if (!quietly) 
body:             packageStartupMessage(gettextf("Loading required package: %s", package), domain = NA)
body:         value <- tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, warn.conflicts = warn.conflicts, quietly = quietly), error = function(e) e)
body:         if (inherits(value, "error")) {
body:             if (!quietly) {
body:                 msg <- conditionMessage(value)
body:                 cat("Failed with error:  ", sQuote(msg), "\n", file = stderr(), sep = "")
body:                 .Internal(printDeferredWarnings())
body:             }
body:             return(invisible(FALSE))
body:         }
body:         if (!value) 
body:             return(invisible(FALSE))
body:     }
body:     else value <- TRUE
body:     invisible(value)
body: }
args: list("stats", quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
retn: TRUE

