func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x + y), 1, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x - y), 2, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x * y), 3, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x/y), 4, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %+-% y), 5, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x%/%y), 6, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %*% y), 7, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %.% y), 8, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(-x), 9, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(+x), 10, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x[i]), 12, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x^2), 13, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x * y), 15, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(paste(x, y, z)), 16, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(sqrt(x)), 18, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(sqrt(x, y)), 19, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(list(x, y, z)), 21, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x == y), 23, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x != y), 24, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x < y), 25, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x <= y), 26, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x > y), 27, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x >= y), 28, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %~~% y), 29, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %=~% y), 30, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %==% y), 31, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %prop% y), 32, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %~% y), 33, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(plain(x)), 35, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(italic(x)), 36, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(bold(x)), 37, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(bolditalic(x)), 38, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(underline(x)), 39, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(list(x[1], ..., x[n])), 1, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x[1] + ... + x[n]), 2, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(list(x[1], cdots, x[n])), 3, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x[1] + ldots + x[n]), 4, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %subset% y), 6, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %subseteq% y), 7, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %supset% y), 8, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %supseteq% y), 9, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %notsubset% y), 10, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %in% y), 11, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %notin% y), 12, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(hat(x)), 14, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(tilde(x)), 15, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(ring(x)), 16, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(bar(xy)), 17, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(widehat(xy)), 18, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(widetilde(xy)), 19, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %<->% y), 21, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %->% y), 22, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %<-% y), 23, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %up% y), 24, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %down% y), 25, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %<=>% y), 26, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %=>% y), 27, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %<=% y), 28, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %dblup% y), 29, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x %dbldown% y), 30, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(Alpha - Omega), 32, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(alpha - omega), 33, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(phi1 + sigma1), 34, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(Upsilon1), 35, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(infinity), 36, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(32 * degree), 37, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(60 * minute), 38, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(30 * second), 39, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(displaystyle(x)), 1, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(textstyle(x)), 2, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(scriptstyle(x)), 3, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(scriptscriptstyle(x)), 4, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x ~ ~y), 6, 20)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x + phantom(0) + y), 4, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x + over(1, phantom(0))), 5, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(frac(x, y)), 7, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(over(x, y)), 8, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(atop(x, y)), 9, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(sum(x[i], i = 1, n)), 1, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(prod(plain(P)(X == x), x)), 2, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(integral(f(x) * dx, a, b)), 3, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(union(A[i], i == 1, n)), 4, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(intersect(A[i], i == 1, n)), 5, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(lim(f(x), x %->% 0)), 6, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(min(g(x), x >= 0)), 7, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(inf(S)), 8, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(sup(S)), 9, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression((x + y) * z), 1, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x^y + z), 2, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x^(y + z)), 3, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(x^{
args:     y + z
args: }), 4, 10, string = "x^{y + z}")
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(group("(", list(a, b), "]")), 5, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(bgroup("(", atop(x, y), ")")), 6, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(group(lceil, x, rceil)), 7, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(group(lfloor, x, rfloor)), 8, 10)
retn: NULL

func: quote(draw.plotmath.cell)
body: function (expr, i, nr, string = NULL) 
body: {
body:     r <- get.r(i, nr)
body:     c <- get.c(i, nr)
body:     if (is.null(string)) {
body:         string <- deparse(expr)
body:         string <- substr(string, 12, nchar(string) - 1)
body:     }
body:     text((2 * (c - 1) + 1), -r, string, col = "grey")
body:     text((2 * c), -r, expr, adj = c(0.5, 0.5))
body:     rect((2 * (c - 1) + 0.5), -(r - 0.5), (2 * c + 0.5), -(r + 0.5), border = "grey")
body: }
args: list(expression(group("|", x, "|")), 9, 10)
retn: NULL

