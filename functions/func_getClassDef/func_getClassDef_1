func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list(structure("MethodWithNext", package = "methods"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list(structure("derivedDefaultMethod", package = "methods"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list(structure("MethodDefinition", package = "methods"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list(c("POSIXct", "POSIXt"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list(structure("ObjectsWithPackage", package = "methods"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list("NULL")
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list("list")
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClassDef)
body: function (Class, where = topenv(parent.frame()), package = packageSlot(Class), inherits = TRUE) 
body: {
body:     if (inherits) 
body:         value <- .getClassFromCache(Class, where)
body:     else value <- NULL
body:     if (is.null(value)) {
body:         cname <- classMetaName(if (length(Class) > 1L) 
body:             Class[[1L]]
body:         else Class)
body:         if (identical(nzchar(package), TRUE)) {
body:             whereP <- .requirePackage(package)
body:             if (exists(cname, whereP, inherits = inherits)) 
body:                 value <- get(cname, whereP)
body:         }
body:         if (is.null(value) && exists(cname, where, inherits = inherits)) 
body:             value <- get(cname, where)
body:     }
body:     value
body: }
args: list("logical")
retn: <S4 object of class structure("classRepresentation", package = "methods")>

