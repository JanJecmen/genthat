func: quote(..lazyLoad)
body: function (filebase, envir = parent.frame()) 
body: {
body:     glue <- function(..., sep = " ", collapse = NULL) .Internal(paste(list(...), sep, collapse))
body:     readRDS <- function(file) {
body:         halt <- function(message) .Internal(stop(TRUE, message))
body:         gzfile <- function(description, open) .Internal(gzfile(description, open, "", 6))
body:         close <- function(con) .Internal(close(con, "rw"))
body:         if (!is.character(file)) 
body:             halt("bad file name")
body:         con <- gzfile(file, "rb")
body:         on.exit(close(con))
body:         .Internal(unserializeFromConn(con, baseenv()))
body:     }
body:     `parent.env<-` <- function(env, value) .Internal(`parent.env<-`(env, value))
body:     existsInFrame <- function(x, env) .Internal(exists(x, env, "any", FALSE))
body:     getFromFrame <- function(x, env) .Internal(get(x, env, "any", FALSE))
body:     set <- function(x, value, env) .Internal(assign(x, value, env, FALSE))
body:     environment <- function() .Internal(environment(NULL))
body:     mkenv <- function() .Internal(new.env(TRUE, baseenv(), 29L))
body:     mapfile <- glue(filebase, "rdx", sep = ".")
body:     datafile <- glue(filebase, "rdb", sep = ".")
body:     env <- mkenv()
body:     map <- readRDS(mapfile)
body:     vars <- names(map$variables)
body:     rvars <- names(map$references)
body:     compressed <- map$compressed
body:     for (i in seq_along(rvars)) set(rvars[i], map$references[[i]], env)
body:     envenv <- mkenv()
body:     envhook <- function(n) {
body:         if (existsInFrame(n, envenv)) 
body:             getFromFrame(n, envenv)
body:         else {
body:             e <- mkenv()
body:             set(n, e, envenv)
body:             key <- getFromFrame(n, env)
body:             data <- lazyLoadDBfetch(key, datafile, compressed, envhook)
body:             if (is.null(data$enclos)) 
body:                 parent.env(e) <- emptyenv()
body:             else parent.env(e) <- data$enclos
body:             vars <- names(data$bindings)
body:             for (i in seq_along(vars)) set(vars[i], data$bindings[[i]], e)
body:             if (!is.null(data$attributes)) 
body:                 attributes(e) <- data$attributes
body:             if (!is.null(data$locked) && data$locked) 
body:                 .Internal(lockEnvironment(e, FALSE))
body:             e
body:         }
body:     }
body:     expr <- quote(lazyLoadDBfetch(key, datafile, compressed, envhook))
body:     this <- environment()
body:     .Internal(makeLazy(vars, map$variables, expr, this, envir))
body:     map <- NULL
body:     vars <- NULL
body:     rvars <- NULL
body:     mapfile <- NULL
body:     readRDS <- NULL
body: }
args: list("/home/roman/r-instrumented/library/base/R/base", <environment>)
retn: NULL

