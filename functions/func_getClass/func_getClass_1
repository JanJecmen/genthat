func: quote(getClass)
body: function (Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()), FALSE)) 
body: {
body:     value <- .getClassFromCache(Class, where)
body:     if (is.null(value)) {
body:         value <- getClassDef(Class, where)
body:         if (is.null(value)) {
body:             if (!.Force) 
body:                 stop(gettextf("%s is not a defined class", dQuote(Class)), domain = NA)
body:             else value <- makeClassRepresentation(Class, package = "base", virtual = TRUE, where = where)
body:         }
body:     }
body:     value
body: }
args: list(structure("MethodDefinition", package = "methods"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClass)
body: function (Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()), FALSE)) 
body: {
body:     value <- .getClassFromCache(Class, where)
body:     if (is.null(value)) {
body:         value <- getClassDef(Class, where)
body:         if (is.null(value)) {
body:             if (!.Force) 
body:                 stop(gettextf("%s is not a defined class", dQuote(Class)), domain = NA)
body:             else value <- makeClassRepresentation(Class, package = "base", virtual = TRUE, where = where)
body:         }
body:     }
body:     value
body: }
args: list(structure("MethodWithNext", package = "methods"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClass)
body: function (Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()), FALSE)) 
body: {
body:     value <- .getClassFromCache(Class, where)
body:     if (is.null(value)) {
body:         value <- getClassDef(Class, where)
body:         if (is.null(value)) {
body:             if (!.Force) 
body:                 stop(gettextf("%s is not a defined class", dQuote(Class)), domain = NA)
body:             else value <- makeClassRepresentation(Class, package = "base", virtual = TRUE, where = where)
body:         }
body:     }
body:     value
body: }
args: list("NULL")
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClass)
body: function (Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()), FALSE)) 
body: {
body:     value <- .getClassFromCache(Class, where)
body:     if (is.null(value)) {
body:         value <- getClassDef(Class, where)
body:         if (is.null(value)) {
body:             if (!.Force) 
body:                 stop(gettextf("%s is not a defined class", dQuote(Class)), domain = NA)
body:             else value <- makeClassRepresentation(Class, package = "base", virtual = TRUE, where = where)
body:         }
body:     }
body:     value
body: }
args: list("list")
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClass)
body: function (Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()), FALSE)) 
body: {
body:     value <- .getClassFromCache(Class, where)
body:     if (is.null(value)) {
body:         value <- getClassDef(Class, where)
body:         if (is.null(value)) {
body:             if (!.Force) 
body:                 stop(gettextf("%s is not a defined class", dQuote(Class)), domain = NA)
body:             else value <- makeClassRepresentation(Class, package = "base", virtual = TRUE, where = where)
body:         }
body:     }
body:     value
body: }
args: list("logical")
retn: <S4 object of class structure("classRepresentation", package = "methods")>

func: quote(getClass)
body: function (Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()), FALSE)) 
body: {
body:     value <- .getClassFromCache(Class, where)
body:     if (is.null(value)) {
body:         value <- getClassDef(Class, where)
body:         if (is.null(value)) {
body:             if (!.Force) 
body:                 stop(gettextf("%s is not a defined class", dQuote(Class)), domain = NA)
body:             else value <- makeClassRepresentation(Class, package = "base", virtual = TRUE, where = where)
body:         }
body:     }
body:     value
body: }
args: list(structure("ObjectsWithPackage", package = "methods"))
retn: <S4 object of class structure("classRepresentation", package = "methods")>

