func: quote(sort.list)
body: function (x, partial = NULL, na.last = TRUE, decreasing = FALSE, method = c("shell", "quick", "radix")) 
body: {
body:     if (missing(method) && is.factor(x) && nlevels(x) < 1e+05) 
body:         method <- "radix"
body:     method <- match.arg(method)
body:     if (!is.atomic(x)) 
body:         stop("'x' must be atomic for 'sort.list'\nHave you called 'sort' on a list?")
body:     if (!is.null(partial)) 
body:         .NotYetUsed("partial != NULL")
body:     if (method == "quick") {
body:         if (is.factor(x)) 
body:             x <- as.integer(x)
body:         if (is.numeric(x)) 
body:             return(sort(x, na.last = na.last, decreasing = decreasing, method = "quick", index.return = TRUE)$ix)
body:         else stop("method = \"quick\" is only for numeric 'x'")
body:     }
body:     if (method == "radix") {
body:         if (!typeof(x) == "integer") 
body:             stop("method = \"radix\" is only for integer 'x'")
body:         if (is.na(na.last)) 
body:             return(.Internal(radixsort(x[!is.na(x)], TRUE, decreasing)))
body:         else return(.Internal(radixsort(x, na.last, decreasing)))
body:     }
body:     if (is.na(na.last)) 
body:         .Internal(order(TRUE, decreasing, x[!is.na(x)]))
body:     else .Internal(order(na.last, decreasing, x))
body: }
args: list(character(0))
retn: integer(0)

