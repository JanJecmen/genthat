func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(integer(0))
retn: structure(list(), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(structure(list(), class = "numeric_version"))
retn: structure(list(), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(NULL)
retn: structure(list(), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(list())
retn: structure(list(), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(1L)
retn: structure(list(1L), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(structure(list(1L), class = "numeric_version"))
retn: structure(list(1L), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(3.14159265358979)
retn: structure(list(c(3L, 2147483647L)), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(structure(list(c(3L, 2147483647L)), class = "numeric_version"))
retn: structure(list(c(3L, 2147483647L)), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list("1.3")
retn: structure(list(c(1L, 3L)), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(structure(list(c(1L, 3L)), class = "numeric_version"))
retn: structure(list(c(1L, 3L)), class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(structure(list(a = 1), .Names = "a"))
retn: structure(list(a = 1L), .Names = "a", class = "numeric_version")

func: quote(as.numeric_version)
body: function (x) 
body: {
body:     if (is.numeric_version(x)) 
body:         x
body:     else if (is.package_version(x)) {
body:         structure(x, class = c(class(x), "numeric_version"))
body:     }
body:     else numeric_version(x)
body: }
args: list(structure(list(a = 1L), .Names = "a", class = "numeric_version"))
retn: structure(list(a = 1L), .Names = "a", class = "numeric_version")

