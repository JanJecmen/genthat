func: quote(sink)
body: function (file = NULL, append = FALSE, type = c("output", "message"), split = FALSE) 
body: {
body:     type <- match.arg(type)
body:     if (type == "message") {
body:         if (is.null(file)) 
body:             file <- stderr()
body:         else if (!inherits(file, "connection") || !isOpen(file)) 
body:             stop("'file' must be NULL or an already open connection")
body:         if (split) 
body:             stop("cannot split the message connection")
body:         .Internal(sink(file, FALSE, TRUE, FALSE))
body:     }
body:     else {
body:         closeOnExit <- FALSE
body:         if (is.null(file)) 
body:             file <- -1L
body:         else if (is.character(file)) {
body:             file <- file(file, ifelse(append, "a", "w"))
body:             closeOnExit <- TRUE
body:         }
body:         else if (!inherits(file, "connection")) 
body:             stop("'file' must be NULL, a connection or a character string")
body:         .Internal(sink(file, closeOnExit, FALSE, split))
body:     }
body: }
args: list("isas-tests.R")
retn: NULL

func: quote(sink)
body: function (file = NULL, append = FALSE, type = c("output", "message"), split = FALSE) 
body: {
body:     type <- match.arg(type)
body:     if (type == "message") {
body:         if (is.null(file)) 
body:             file <- stderr()
body:         else if (!inherits(file, "connection") || !isOpen(file)) 
body:             stop("'file' must be NULL or an already open connection")
body:         if (split) 
body:             stop("cannot split the message connection")
body:         .Internal(sink(file, FALSE, TRUE, FALSE))
body:     }
body:     else {
body:         closeOnExit <- FALSE
body:         if (is.null(file)) 
body:             file <- -1L
body:         else if (is.character(file)) {
body:             file <- file(file, ifelse(append, "a", "w"))
body:             closeOnExit <- TRUE
body:         }
body:         else if (!inherits(file, "connection")) 
body:             stop("'file' must be NULL, a connection or a character string")
body:         .Internal(sink(file, closeOnExit, FALSE, split))
body:     }
body: }
args: NULL
retn: NULL

