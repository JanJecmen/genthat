func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(keep.source = FALSE)
retn: structure(list(keep.source = TRUE), .Names = "keep.source")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(warn = 0)
retn: structure(list(warn = NULL), .Names = "warn")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(timeout = 60)
retn: structure(list(timeout = NULL), .Names = "timeout")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(encoding = "native.enc")
retn: structure(list(encoding = NULL), .Names = "encoding")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(show.error.messages = TRUE)
retn: structure(list(show.error.messages = NULL), .Names = "show.error.messages")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(scipen = 0)
retn: structure(list(scipen = NULL), .Names = "scipen")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(max.print = 99999)
retn: structure(list(max.print = NULL), .Names = "max.print")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(add.smooth = TRUE)
retn: structure(list(add.smooth = NULL), .Names = "add.smooth")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(stringsAsFactors = TRUE)
retn: structure(list(stringsAsFactors = NULL), .Names = "stringsAsFactors")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(showErrorCalls = TRUE)
retn: structure(list(showErrorCalls = NULL), .Names = "showErrorCalls")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(defaultPackages = c("datasets", "utils", "grDevices", "graphics", "stats", "methods"))
retn: structure(list(defaultPackages = NULL), .Names = "defaultPackages")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(papersize = "a4", printcmd = "lpr", dvipscmd = "dvips", texi2dvi = "texi2dvi", browser = "/usr/bin/firefox", pager = "/home/roman/r-instrumented/bin/pager", pdfviewer = "/usr/bin/xdg-open", useFancyQuotes = TRUE)
retn: structure(list(papersize = NULL, printcmd = NULL, dvipscmd = NULL, texi2dvi = NULL, browser = NULL, pager = NULL, pdfviewer = NULL, useFancyQuotes = NULL), .Names = c("papersize", "printcmd", "dvipscmd", "texi2dvi", "browser", "pager", "pdfviewer", "useFancyQuotes"))

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(structure(list(keep.source = TRUE, topLevelEnvironment = NULL), .Names = c("keep.source", "topLevelEnvironment")))
retn: structure(list(keep.source = TRUE, topLevelEnvironment = TRUE), .Names = c("keep.source", "topLevelEnvironment"))

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(digits = 5, width = 65)
retn: structure(list(digits = 7L, width = 80L), .Names = c("digits", "width"))

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(useFancyQuotes = FALSE)
retn: structure(list(useFancyQuotes = TRUE), .Names = "useFancyQuotes")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(structure(list(digits = 3L), .Names = "digits"))
retn: structure(list(digits = 3L), .Names = "digits")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(structure(list(digits = 5L), .Names = "digits"))
retn: structure(list(digits = 3L), .Names = "digits")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(error = expression(NULL))
retn: structure(list(error = NULL), .Names = "error")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(keep.source = TRUE, useFancyQuotes = FALSE, warn = 1)
retn: structure(list(keep.source = TRUE, useFancyQuotes = TRUE, warn = 0), .Names = c("keep.source", "useFancyQuotes", "warn"))

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(structure(list(warn = 1), .Names = "warn"))
retn: structure(list(warn = -1), .Names = "warn")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(structure(list(digits = 7L), .Names = "digits"))
retn: structure(list(digits = 3L), .Names = "digits")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(structure(list(device.ask.default = FALSE), .Names = "device.ask.default"))
retn: structure(list(device.ask.default = FALSE), .Names = "device.ask.default")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(structure(list(warn = 0), .Names = "warn"))
retn: structure(list(warn = -1), .Names = "warn")

func: quote(options)
body: function (...) 
body: .Internal(options(...))
args: list(pager = "cat")
retn: structure(list(pager = "/home/roman/r-instrumented/bin/pager"), .Names = "pager")

