func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(4L)
retn: <arguments too long, ignored>

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(8L)
retn: <arguments too long, ignored>

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(7L)
retn: <arguments too long, ignored>

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(11L)
retn: <arguments too long, ignored>

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(15L)
retn: <arguments too long, ignored>

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(0L)
retn: function (fun = sys.function(sys.parent())) 
retn: {
retn:     if (is.character(fun)) 
retn:         fun <- get(fun, mode = "function", envir = parent.frame())
retn:     .Internal(body(fun))
retn: }

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(-1)
retn: NULL

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(1L)
retn: function (m, ties.method = c("random", "first", "last")) 
retn: {
retn:     ties.method <- match.arg(ties.method)
retn:     tieM <- which(ties.method == eval(formals()[["ties.method"]]))
retn:     .Internal(max.col(as.matrix(m), tieM))
retn: }

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(5L)
retn: <arguments too long, ignored>

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(3L)
retn: <arguments too long, ignored>

func: quote(sys.function)
body: function (which = 0L) 
body: .Internal(sys.function(which))
args: list(2L)
retn: <arguments too long, ignored>

