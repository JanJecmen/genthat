func: quote(qr.coef)
body: function (qr, y) 
body: {
body:     if (!is.qr(qr)) 
body:         stop("first argument must be a QR decomposition")
body:     n <- as.integer(nrow(qr$qr))
body:     if (is.na(n)) 
body:         stop("invalid nrow(qr$qr)")
body:     p <- as.integer(ncol(qr$qr))
body:     if (is.na(p)) 
body:         stop("invalid ncol(qr$qr)")
body:     k <- as.integer(qr$rank)
body:     if (is.na(k)) 
body:         stop("invalid ncol(qr$rank)")
body:     im <- is.matrix(y)
body:     if (!im) 
body:         y <- as.matrix(y)
body:     ny <- as.integer(ncol(y))
body:     if (is.na(ny)) 
body:         stop("invalid ncol(y)")
body:     if (p == 0L) 
body:         return(if (im) matrix(0, p, ny) else numeric())
body:     ix <- if (p > n) 
body:         c(seq_len(n), rep(NA, p - n))
body:     else seq_len(p)
body:     if (is.complex(qr$qr)) {
body:         coef <- matrix(NA_complex_, nrow = p, ncol = ny)
body:         coef[qr$pivot, ] <- .Internal(qr_coef_cmplx(qr, y))[ix, ]
body:         return(if (im) coef else c(coef))
body:     }
body:     if (isTRUE(attr(qr, "useLAPACK"))) {
body:         coef <- matrix(NA_real_, nrow = p, ncol = ny)
body:         coef[qr$pivot, ] <- .Internal(qr_coef_real(qr, y))[ix, ]
body:         return(if (im) coef else c(coef))
body:     }
body:     if (k == 0L) 
body:         return(if (im) matrix(NA, p, ny) else rep.int(NA, p))
body:     storage.mode(y) <- "double"
body:     if (nrow(y) != n) 
body:         stop("'qr' and 'y' must have the same number of rows")
body:     z <- .Fortran(.F_dqrcf, as.double(qr$qr), n, k, as.double(qr$qraux), y, ny, coef = matrix(0, nrow = k, ncol = ny), info = integer(1L), NAOK = TRUE)[c("coef", "info")]
body:     if (z$info) 
body:         stop("exact singularity in 'qr.coef'")
body:     if (k < p) {
body:         coef <- matrix(NA_real_, nrow = p, ncol = ny)
body:         coef[qr$pivot[seq_len(k)], ] <- z$coef
body:     }
body:     else coef <- z$coef
body:     if (!is.null(nam <- colnames(qr$qr))) 
body:         if (k < p) 
body:             rownames(coef)[qr$pivot] <- nam
body:         else rownames(coef) <- nam
body:     if (im && !is.null(nam <- colnames(y))) 
body:         colnames(coef) <- nam
body:     if (im) 
body:         coef
body:     else drop(coef)
body: }
args: list(structure(list(qr = structure(c(-16.8819430161341, 0.118469775551818, 0.177704663327728, 0.236939551103637, 0.296174438879546, 0.355409326655455, 0.414644214431365, 0.473879102207274, 0.533113989983183, -4.44261658319319, -4.95107643798163, -0.0841014055619644, -0.330942843877119, -0.476796142287121, -0.521661300791968, -0.465538319391661, -0.3084271980862, -0.0503279368755851), .Dim = c(9L, 2L)), rank = 2L, qraux = c(1.05923488777591, 1.26372817265834), pivot = 1:2), .Names = c("qr", "rank", 
args: "qraux", "pivot"), class = "qr"), c(1L, 2L, 3L, 4L, 2L, 3L, 4L, 5L, 6L))
retn: c(0.576489533011272, 0.209339774557166)

