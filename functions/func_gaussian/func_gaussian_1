func: quote(gaussian)
body: function (link = "identity") 
body: {
body:     linktemp <- substitute(link)
body:     if (!is.character(linktemp)) 
body:         linktemp <- deparse(linktemp)
body:     okLinks <- c("inverse", "log", "identity")
body:     if (linktemp %in% okLinks) 
body:         stats <- make.link(linktemp)
body:     else if (is.character(link)) {
body:         stats <- make.link(link)
body:         linktemp <- link
body:     }
body:     else {
body:         if (inherits(link, "link-glm")) {
body:             stats <- link
body:             if (!is.null(stats$name)) 
body:                 linktemp <- stats$name
body:         }
body:         else {
body:             stop(gettextf("link \"%s\" not available for gaussian family; available links are %s", linktemp, paste(sQuote(okLinks), collapse = ", ")), domain = NA)
body:         }
body:     }
body:     structure(list(family = "gaussian", link = linktemp, linkfun = stats$linkfun, linkinv = stats$linkinv, variance = function(mu) rep.int(1, length(mu)), dev.resids = function(y, mu, wt) wt * ((y - mu)^2), aic = function(y, n, mu, wt, dev) {
body:         nobs <- length(y)
body:         nobs * (log(dev/nobs * 2 * pi) + 1) + 2 - sum(log(wt))
body:     }, mu.eta = stats$mu.eta, initialize = expression({
body:         n <- rep.int(1, nobs)
body:         if (is.null(etastart) && is.null(start) && is.null(mustart) && ((family$link == "inverse" && any(y == 0)) || (family$link == "log" && any(y <= 0)))) stop("cannot find valid starting values: please specify some")
body:         mustart <- y
body:     }), validmu = function(mu) TRUE, valideta = stats$valideta), class = "family")
body: }
args: NULL
retn: <arguments too long, ignored>

