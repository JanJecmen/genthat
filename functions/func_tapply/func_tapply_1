func: quote(tapply)
body: function (X, INDEX, FUN = NULL, ..., simplify = TRUE) 
body: {
body:     FUN <- if (!is.null(FUN)) 
body:         match.fun(FUN)
body:     if (!is.list(INDEX)) 
body:         INDEX <- list(INDEX)
body:     nI <- length(INDEX)
body:     if (!nI) 
body:         stop("'INDEX' is of length zero")
body:     namelist <- vector("list", nI)
body:     names(namelist) <- names(INDEX)
body:     extent <- integer(nI)
body:     nx <- length(X)
body:     one <- 1L
body:     group <- rep.int(one, nx)
body:     ngroup <- one
body:     for (i in seq_along(INDEX)) {
body:         index <- as.factor(INDEX[[i]])
body:         if (length(index) != nx) 
body:             stop("arguments must have same length")
body:         namelist[[i]] <- levels(index)
body:         extent[i] <- nlevels(index)
body:         group <- group + ngroup * (as.integer(index) - one)
body:         ngroup <- ngroup * nlevels(index)
body:     }
body:     if (is.null(FUN)) 
body:         return(group)
body:     ans <- lapply(X = split(X, group), FUN = FUN, ...)
body:     index <- as.integer(names(ans))
body:     if (simplify && all(unlist(lapply(ans, length)) == 1L)) {
body:         ansmat <- array(dim = extent, dimnames = namelist)
body:         ans <- unlist(ans, recursive = FALSE)
body:     }
body:     else {
body:         ansmat <- array(vector("list", prod(extent)), dim = extent, dimnames = namelist)
body:     }
body:     if (length(index)) {
body:         names(ans) <- NULL
body:         ansmat[index] <- ans
body:     }
body:     ansmat
body: }
args: list(c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43), structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"), function (x, ...) 
args: UseMethod("mean"))
retn: structure(c(44.5, 57.3333333333333, 55.5, 53.6, 55, 60.5, 56, 52.25), .Dim = 8L, .Dimnames = list(c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")))

func: quote(tapply)
body: function (X, INDEX, FUN = NULL, ..., simplify = TRUE) 
body: {
body:     FUN <- if (!is.null(FUN)) 
body:         match.fun(FUN)
body:     if (!is.list(INDEX)) 
body:         INDEX <- list(INDEX)
body:     nI <- length(INDEX)
body:     if (!nI) 
body:         stop("'INDEX' is of length zero")
body:     namelist <- vector("list", nI)
body:     names(namelist) <- names(INDEX)
body:     extent <- integer(nI)
body:     nx <- length(X)
body:     one <- 1L
body:     group <- rep.int(one, nx)
body:     ngroup <- one
body:     for (i in seq_along(INDEX)) {
body:         index <- as.factor(INDEX[[i]])
body:         if (length(index) != nx) 
body:             stop("arguments must have same length")
body:         namelist[[i]] <- levels(index)
body:         extent[i] <- nlevels(index)
body:         group <- group + ngroup * (as.integer(index) - one)
body:         ngroup <- ngroup * nlevels(index)
body:     }
body:     if (is.null(FUN)) 
body:         return(group)
body:     ans <- lapply(X = split(X, group), FUN = FUN, ...)
body:     index <- as.integer(names(ans))
body:     if (simplify && all(unlist(lapply(ans, length)) == 1L)) {
body:         ansmat <- array(dim = extent, dimnames = namelist)
body:         ans <- unlist(ans, recursive = FALSE)
body:     }
body:     else {
body:         ansmat <- array(vector("list", prod(extent)), dim = extent, dimnames = namelist)
body:     }
body:     if (length(index)) {
body:         names(ans) <- NULL
body:         ansmat[index] <- ans
body:     }
body:     ansmat
body: }
args: list(c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43), structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"), function (x) 
args: sqrt(var(x)/length(x)))
retn: structure(c(1.5, 4.31019463339856, 4.5, 4.10609303352956, 2.73861278752583, 0.5, 5.24404424085076, 2.65753645318366), .Dim = 8L, .Dimnames = list(c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")))

func: quote(tapply)
body: function (X, INDEX, FUN = NULL, ..., simplify = TRUE) 
body: {
body:     FUN <- if (!is.null(FUN)) 
body:         match.fun(FUN)
body:     if (!is.list(INDEX)) 
body:         INDEX <- list(INDEX)
body:     nI <- length(INDEX)
body:     if (!nI) 
body:         stop("'INDEX' is of length zero")
body:     namelist <- vector("list", nI)
body:     names(namelist) <- names(INDEX)
body:     extent <- integer(nI)
body:     nx <- length(X)
body:     one <- 1L
body:     group <- rep.int(one, nx)
body:     ngroup <- one
body:     for (i in seq_along(INDEX)) {
body:         index <- as.factor(INDEX[[i]])
body:         if (length(index) != nx) 
body:             stop("arguments must have same length")
body:         namelist[[i]] <- levels(index)
body:         extent[i] <- nlevels(index)
body:         group <- group + ngroup * (as.integer(index) - one)
body:         ngroup <- ngroup * nlevels(index)
body:     }
body:     if (is.null(FUN)) 
body:         return(group)
body:     ans <- lapply(X = split(X, group), FUN = FUN, ...)
body:     index <- as.integer(names(ans))
body:     if (simplify && all(unlist(lapply(ans, length)) == 1L)) {
body:         ansmat <- array(dim = extent, dimnames = namelist)
body:         ans <- unlist(ans, recursive = FALSE)
body:     }
body:     else {
body:         ansmat <- array(vector("list", prod(extent)), dim = extent, dimnames = namelist)
body:     }
body:     if (length(index)) {
body:         names(ans) <- NULL
body:         ansmat[index] <- ans
body:     }
body:     ansmat
body: }
args: list(structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"), structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"), .Primitive("length"))
retn: structure(c(2L, 6L, 2L, 5L, 4L, 2L, 5L, 4L), .Dim = 8L, .Dimnames = list(c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")))

func: quote(tapply)
body: function (X, INDEX, FUN = NULL, ..., simplify = TRUE) 
body: {
body:     FUN <- if (!is.null(FUN)) 
body:         match.fun(FUN)
body:     if (!is.list(INDEX)) 
body:         INDEX <- list(INDEX)
body:     nI <- length(INDEX)
body:     if (!nI) 
body:         stop("'INDEX' is of length zero")
body:     namelist <- vector("list", nI)
body:     names(namelist) <- names(INDEX)
body:     extent <- integer(nI)
body:     nx <- length(X)
body:     one <- 1L
body:     group <- rep.int(one, nx)
body:     ngroup <- one
body:     for (i in seq_along(INDEX)) {
body:         index <- as.factor(INDEX[[i]])
body:         if (length(index) != nx) 
body:             stop("arguments must have same length")
body:         namelist[[i]] <- levels(index)
body:         extent[i] <- nlevels(index)
body:         group <- group + ngroup * (as.integer(index) - one)
body:         ngroup <- ngroup * nlevels(index)
body:     }
body:     if (is.null(FUN)) 
body:         return(group)
body:     ans <- lapply(X = split(X, group), FUN = FUN, ...)
body:     index <- as.integer(names(ans))
body:     if (simplify && all(unlist(lapply(ans, length)) == 1L)) {
body:         ansmat <- array(dim = extent, dimnames = namelist)
body:         ans <- unlist(ans, recursive = FALSE)
body:     }
body:     else {
body:         ansmat <- array(vector("list", prod(extent)), dim = extent, dimnames = namelist)
body:     }
body:     if (length(index)) {
body:         names(ans) <- NULL
body:         ansmat[index] <- ans
body:     }
body:     ansmat
body: }
args: list(integer(0), structure(list(l0 = logical(0)), .Names = "l0"), function (x) 
args: FUN(dd[x, ], ...), simplify = TRUE)
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(l0 = NULL), .Names = "l0"))

func: quote(tapply)
body: function (X, INDEX, FUN = NULL, ..., simplify = TRUE) 
body: {
body:     FUN <- if (!is.null(FUN)) 
body:         match.fun(FUN)
body:     if (!is.list(INDEX)) 
body:         INDEX <- list(INDEX)
body:     nI <- length(INDEX)
body:     if (!nI) 
body:         stop("'INDEX' is of length zero")
body:     namelist <- vector("list", nI)
body:     names(namelist) <- names(INDEX)
body:     extent <- integer(nI)
body:     nx <- length(X)
body:     one <- 1L
body:     group <- rep.int(one, nx)
body:     ngroup <- one
body:     for (i in seq_along(INDEX)) {
body:         index <- as.factor(INDEX[[i]])
body:         if (length(index) != nx) 
body:             stop("arguments must have same length")
body:         namelist[[i]] <- levels(index)
body:         extent[i] <- nlevels(index)
body:         group <- group + ngroup * (as.integer(index) - one)
body:         ngroup <- ngroup * nlevels(index)
body:     }
body:     if (is.null(FUN)) 
body:         return(group)
body:     ans <- lapply(X = split(X, group), FUN = FUN, ...)
body:     index <- as.integer(names(ans))
body:     if (simplify && all(unlist(lapply(ans, length)) == 1L)) {
body:         ansmat <- array(dim = extent, dimnames = namelist)
body:         ans <- unlist(ans, recursive = FALSE)
body:     }
body:     else {
body:         ansmat <- array(vector("list", prod(extent)), dim = extent, dimnames = namelist)
body:     }
body:     if (length(index)) {
body:         names(ans) <- NULL
body:         ansmat[index] <- ans
body:     }
body:     ansmat
body: }
args: list(integer(0), structure(list(c0 = character(0)), .Names = "c0"), function (x) 
args: FUN(dd[x, ], ...), simplify = TRUE)
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"))

func: quote(tapply)
body: function (X, INDEX, FUN = NULL, ..., simplify = TRUE) 
body: {
body:     FUN <- if (!is.null(FUN)) 
body:         match.fun(FUN)
body:     if (!is.list(INDEX)) 
body:         INDEX <- list(INDEX)
body:     nI <- length(INDEX)
body:     if (!nI) 
body:         stop("'INDEX' is of length zero")
body:     namelist <- vector("list", nI)
body:     names(namelist) <- names(INDEX)
body:     extent <- integer(nI)
body:     nx <- length(X)
body:     one <- 1L
body:     group <- rep.int(one, nx)
body:     ngroup <- one
body:     for (i in seq_along(INDEX)) {
body:         index <- as.factor(INDEX[[i]])
body:         if (length(index) != nx) 
body:             stop("arguments must have same length")
body:         namelist[[i]] <- levels(index)
body:         extent[i] <- nlevels(index)
body:         group <- group + ngroup * (as.integer(index) - one)
body:         ngroup <- ngroup * nlevels(index)
body:     }
body:     if (is.null(FUN)) 
body:         return(group)
body:     ans <- lapply(X = split(X, group), FUN = FUN, ...)
body:     index <- as.integer(names(ans))
body:     if (simplify && all(unlist(lapply(ans, length)) == 1L)) {
body:         ansmat <- array(dim = extent, dimnames = namelist)
body:         ans <- unlist(ans, recursive = FALSE)
body:     }
body:     else {
body:         ansmat <- array(vector("list", prod(extent)), dim = extent, dimnames = namelist)
body:     }
body:     if (length(index)) {
body:         names(ans) <- NULL
body:         ansmat[index] <- ans
body:     }
body:     ansmat
body: }
args: list(integer(0), structure(list(c0 = structure(integer(0), .Label = character(0), class = "factor")), .Names = "c0", row.names = character(0), class = "data.frame"), function (x) 
args: FUN(data[x, , drop = FALSE], ...), simplify = TRUE)
retn: structure(logical(0), .Dim = 0L, .Dimnames = structure(list(c0 = NULL), .Names = "c0"))

