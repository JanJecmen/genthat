func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("(_US|_CA)", "C")
retn: integer(0)

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("<-$", "!")
retn: integer(0)

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè")
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", useBytes = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, useBytes = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", fixed = TRUE, useBytes = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", perl = TRUE, useBytes = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("éè", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE, useBytes = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("ÉÈ", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("ÉÈ", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE)
retn: 1L

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("ÉÈ", "«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè", ignore.case = TRUE, perl = TRUE, useBytes = TRUE)
retn: integer(0)

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("[gu]", c("The", "licenses", "for", "most", "software", "are", "designed", "to", "take", "away", "your", "freedom", "to", "share", "and", "change", "it.", "", "By", "contrast,", "the", "GNU", "General", "Public", "License", "is", "intended", "to", "guarantee", "your", "freedom", "to", "share", "and", "change", "free", "software", "--", "to", "make", "sure", "the", "software", "is", "free", "for", "all", "its", "users"), perl = TRUE)
retn: c(7L, 11L, 16L, 24L, 29L, 30L, 35L, 41L, 49L)

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: list("[gu]", c("The", "licenses", "for", "most", "software", "are", "designed", "to", "take", "away", "your", "freedom", "to", "share", "and", "change", "it.", "", "By", "contrast,", "the", "GNU", "General", "Public", "License", "is", "intended", "to", "guarantee", "your", "freedom", "to", "share", "and", "change", "free", "software", "--", "to", "make", "sure", "the", "software", "is", "free", "for", "all", "its", "users"))
retn: c(7L, 11L, 16L, 24L, 29L, 30L, 35L, 41L, 49L)

func: quote(grep)
body: function (pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) 
body: {
body:     if (!is.character(x)) 
body:         x <- structure(as.character(x), names = names(x))
body:     .Internal(grep(as.character(pattern), x, ignore.case, value, perl, fixed, useBytes, invert))
body: }
args: <arguments too long, ignored>
retn: integer(0)

