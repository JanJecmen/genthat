func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), structure(integer(0), .Dim = 0L))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), character(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), complex(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), structure(list(x = integer(0)), .Names = "x", row.names = character(0), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), numeric(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), expression())
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), structure(integer(0), .Label = character(0), class = "factor"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), list())
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), logical(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), structure(integer(0), .Dim = 0:1))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), NULL)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), structure(list(), class = "numeric_version"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), structure(integer(0), .Label = character(0), class = c("ordered", "factor")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), structure(list(), class = c("package_version", "numeric_version")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), raw(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(integer(0), integer(0))
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, NULL)
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, character(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, complex(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, numeric(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, expression(NULL))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, structure(integer(0), .Label = character(0), class = "factor"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, integer(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, list())
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, logical(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, structure(list(), class = "numeric_version"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, structure(integer(0), .Label = character(0), class = c("ordered", "factor")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, structure(list(), class = c("package_version", "numeric_version")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(NULL, raw(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), structure(list(), .Dim = 0L))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), character(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), complex(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), numeric(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), expression())
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), integer(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), logical(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), structure(list(), .Dim = 0:1))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), NULL)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), structure(list(), class = "numeric_version"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), structure(list(), class = c("package_version", "numeric_version")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), raw(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(list(), list())
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(1L, .Dim = 1L))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, "1")
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, 1+0i)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(list(x = 1L), .Names = "x", row.names = c(NA, -1L), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, 1)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, <environment>)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, expression(1L))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(1L, .Label = "1", class = "factor"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, list(1L))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, TRUE)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(1L, .Dim = c(1L, 1L)))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, quote(`1`))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, NULL)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(list(1L), class = "numeric_version"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(1L, .Label = "1", class = c("ordered", "factor")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, 01)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(1L, .Dim = 1L, .Dimnames = list("A"), class = "table"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, 1L)
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(1L, structure(1L, .Tsp = c(1, 1, 1), class = "ts"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(3.14159265358979, .Dim = 1L))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, "3.14159265358979")
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, 3.14159265358979+0i)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(list(x = 3.14159265358979), .Names = "x", row.names = c(NA, -1L), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, <environment>)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, expression(3.14159265358979))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(1L, .Label = "3.14159265358979", class = "factor"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, 3L)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, list(3.14159265358979))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, TRUE)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(3.14159265358979, .Dim = c(1L, 1L)))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, quote(`3.141593`))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, NULL)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(list(c(3L, 2147483647L)), class = "numeric_version"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(1L, .Label = "3.14159265358979", class = c("ordered", "factor")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(list(c(3L, 2147483647L)), class = c("package_version", "numeric_version")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, 03)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(3.14159265358979, .Dim = 1L, .Dimnames = list("A"), class = "table"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, 3.14159265358979)
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(3.14159265358979, structure(3.14159265358979, .Tsp = c(1, 1, 1), class = "ts"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure("1.3", .Dim = 1L))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", 1.3+0i)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure(list(x = structure(1L, .Label = "1.3", class = "factor")), .Names = "x", row.names = c(NA, -1L), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", 1.3)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", expression("1.3"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure(1L, .Label = "1.3", class = "factor"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", 1L)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", list("1.3"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", NA)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure("1.3", .Dim = c(1L, 1L)))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", quote(`1.3`))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", NULL)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure(list(c(1L, 3L)), class = "numeric_version"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure(1L, .Label = "1.3", class = c("ordered", "factor")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure(list(c(1L, 3L)), class = c("package_version", "numeric_version")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", 01)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", "1.3")
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list("1.3", structure("1.3", .Tsp = c(1, 1, 1), class = "ts"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), structure(list(a = 1), .Dim = 1L, .Dimnames = list("a")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), quote(1()))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), "1")
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), 1+0i)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), structure(list(a = 1), .Names = "a", row.names = c(NA, -1L), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), 1)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), <environment>)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), structure(expression(a = 1), .Names = "a"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), function () 
args: 1)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), 1L)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), TRUE)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), structure(list(1), .Dim = c(1L, 1L), .Dimnames = list("a", NULL)))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), NULL)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), structure(list(a = 1L), .Names = "a", class = "numeric_version"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), list(a = 1))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), 01)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), structure(list(a = 1), .Names = "a"))
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(a = 1), .Names = "a"), structure(list(a = 1), .Names = "a", .Tsp = c(1, 1, 1), class = "ts"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"))
retn: TRUE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), quote(integer(0)()))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), "integer(0)")
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), NA_complex_)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), NA_real_)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), <environment>)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), structure(expression(`character(0)` = integer(0)), .Names = "character(0)", row.names = character(0), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), function () 
args: integer(0))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), NA_integer_)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), NA)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), structure(logical(0), .Dim = 0:1, .Dimnames = list(NULL, "character(0)")))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), NULL)
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), row.names = character(0), class = "data.frame"))
retn: FALSE

func: quote(isall.equal)
body: function (x, y) 
body: typeof(x) == typeof(y) && is.logical(r <- all.equal(x, y, tol = 0)) && r
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"), 00)
retn: FALSE

