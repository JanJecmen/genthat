func: quote(qr.resid)
body: function (qr, y) 
body: {
body:     if (!is.qr(qr)) 
body:         stop("argument is not a QR decomposition")
body:     if (is.complex(qr$qr)) 
body:         stop("not implemented for complex 'qr'")
body:     if (isTRUE(attr(qr, "useLAPACK"))) 
body:         stop("not supported for LAPACK QR")
body:     k <- as.integer(qr$rank)
body:     if (k == 0) 
body:         return(y)
body:     n <- as.integer(nrow(qr$qr))
body:     if (is.na(n)) 
body:         stop("invalid nrow(qr$qr)")
body:     ny <- as.integer(NCOL(y))
body:     if (is.na(ny)) 
body:         stop("invalid NCOL(y)")
body:     if (NROW(y) != n) 
body:         stop("'qr' and 'y' must have the same number of rows")
body:     storage.mode(y) <- "double"
body:     .Fortran(.F_dqrrsd, as.double(qr$qr), n, k, as.double(qr$qraux), y, ny, rsd = y)$rsd
body: }
args: list(structure(list(qr = structure(c(-16.8819430161341, 0.118469775551818, 0.177704663327728, 0.236939551103637, 0.296174438879546, 0.355409326655455, 0.414644214431365, 0.473879102207274, 0.533113989983183, -4.44261658319319, -4.95107643798163, -0.0841014055619644, -0.330942843877119, -0.476796142287121, -0.521661300791968, -0.465538319391661, -0.3084271980862, -0.0503279368755851), .Dim = c(9L, 2L)), rank = 2L, qraux = c(1.05923488777591, 1.26372817265834), pivot = 1:2), .Names = c("qr", "rank", 
args: "qraux", "pivot"), class = "qr"), c(1L, 2L, 3L, 4L, 2L, 3L, 4L, 5L, 6L))
retn: c(-0.413848631239936, 0.376006441223833, 1.06119162640902, 1.64170692431562, -0.882447665056361, -0.511272141706925, -0.244766505636071, -0.0829307568437999, -0.0257648953301131)

