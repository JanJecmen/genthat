func: quote(environment)
body: function () 
body: .Internal(environment(NULL))
args: NULL
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(function (x) 
args: UseMethod("!"))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(list(), class = "formula", .Environment = <environment>))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (e1, e2) 
args: standardGeneric("Arith"), generic = structure("Arith", package = "base"), package = "base", group = list("Ops"), valueClass = character(0), signature = c("e1", "e2"), default = quote(`\001NULL\001`), skeleton = quote((function (e1, e2) 
args: stop("invalid call in method dispatch to 'Arith' (no default method)", domain = NA))(e1, e2)), groupMembers = list("+", "-", "*", "^", "%%", "%/%", "/"), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (e1, e2) 
args: standardGeneric("Ops"), generic = structure("Ops", package = "base"), package = "base", group = list(), valueClass = character(0), signature = c("e1", "e2"), default = quote(`\001NULL\001`), skeleton = quote((function (e1, e2) 
args: stop("invalid call in method dispatch to 'Ops' (no default method)", domain = NA))(e1, e2)), groupMembers = list("Arith", "Compare", "Logic"), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (e1, e2) 
args: standardGeneric("Compare"), generic = structure("Compare", package = "methods"), package = "methods", group = list("Ops"), valueClass = character(0), signature = c("e1", "e2"), default = quote(`\001NULL\001`), skeleton = quote((function (e1, e2) 
args: stop("invalid call in method dispatch to 'Compare' (no default method)", domain = NA))(e1, e2)), groupMembers = list("==", ">", "<", "!=", "<=", ">="), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (z) 
args: standardGeneric("Complex"), generic = structure("Complex", package = "base"), package = "base", group = list(), valueClass = character(0), signature = "z", default = quote(`\001NULL\001`), skeleton = quote((function (z) 
args: stop("invalid call in method dispatch to 'Complex' (no default method)", domain = NA))(z)), groupMembers = list("Arg", "Conj", "Im", "Mod", "Re"), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (e1, e2) 
args: standardGeneric("Logic"), generic = structure("Logic", package = "base"), package = "base", group = list("Ops"), valueClass = character(0), signature = c("e1", "e2"), default = quote(`\001NULL\001`), skeleton = quote((function (e1, e2) 
args: stop("invalid call in method dispatch to 'Logic' (no default method)", domain = NA))(e1, e2)), groupMembers = list("&", "|"), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (x) 
args: standardGeneric("Math"), generic = structure("Math", package = "base"), package = "base", group = list(), valueClass = character(0), signature = "x", default = quote(`\001NULL\001`), skeleton = quote((function (x) 
args: stop("invalid call in method dispatch to 'Math' (no default method)", domain = NA))(x)), groupMembers = list("abs", "sign", "sqrt", "ceiling", "floor", "trunc", "cummax", "cummin", "cumprod", "cumsum", "exp", "expm1", "log", "log10", "log2", "log1p", "cos", "cosh", "sin", "sinh", "tan", "tanh", "acos", "acosh", "asin", "asinh", "atan", "atanh", "gamma", "lgamma", "digamma", "trigamma"), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (x, digits) 
args: standardGeneric("Math2"), generic = structure("Math2", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("x", "digits"), default = quote(`\001NULL\001`), skeleton = quote((function (x, digits) 
args: stop("invalid call in method dispatch to 'Math2' (no default method)", domain = NA))(x, digits)), groupMembers = list("round", "signif"), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: <arguments too long, ignored>
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (method, fname, envir) 
args: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
args: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
args: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (x, ..., na.rm = FALSE) 
args: standardGeneric("Summary"), generic = structure("Summary", package = "base"), package = "base", group = list(), valueClass = character(0), signature = c("x", "na.rm"), default = quote(`\001NULL\001`), skeleton = quote((function (x, ..., na.rm = FALSE) 
args: stop("invalid call in method dispatch to 'Summary' (no default method)", domain = NA))(x, ..., na.rm = na.rm)), groupMembers = list("max", "min", "range", "prod", "sum", "any", "all"), class = structure("groupGenericFunction", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (method, f = "<unknown>", mlist, optional = FALSE, envir) 
args: standardGeneric("addNextMethod"), generic = structure("addNextMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "f", "mlist", "optional", "envir"), default = quote(`\001NULL\001`), skeleton = quote((function (method, f = "<unknown>", mlist, optional = FALSE, envir) 
args: stop("invalid call in method dispatch to 'addNextMethod' (no default method)", domain = NA))(method, f, mlist, optional, envir)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (x, y, ...) 
args: standardGeneric("cbind2"), generic = structure("cbind2", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("x", "y"), default = quote(`\001NULL\001`), skeleton = quote((function (x, y, ...) 
args: stop("invalid call in method dispatch to 'cbind2' (no default method)", domain = NA))(x, y, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (x, y, ...) 
args: standardGeneric("rbind2"), generic = structure("rbind2", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("x", "y"), default = quote(`\001NULL\001`), skeleton = quote((function (x, y, ...) 
args: stop("invalid call in method dispatch to 'rbind2' (no default method)", domain = NA))(x, y, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object) 
args: standardGeneric("show"), generic = structure("show", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = structure("object", simpleOnly = TRUE), default = structure(function (object) 
args: showDefault(object, FALSE), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object) 
args: showDefault(object, FALSE))(object)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(NULL)
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(list())
retn: NULL

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(FALSE)
retn: NULL

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object) 
args: standardGeneric("slotsFromS3"), generic = structure("slotsFromS3", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = "object", default = structure(function (object) 
args: {
args:     list()
args: }, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object) 
args: {
args:     list()
args: })(object)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ..., k = 2) 
args: UseMethod("AIC"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ..., k = 2) 
args: standardGeneric("AIC"), generic = structure("AIC", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = c("object", "k"), default = structure(function (object, ..., k = 2) 
args: UseMethod("AIC"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ..., k = 2) 
args: UseMethod("AIC"))(object, ..., k = k)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: UseMethod("BIC"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: standardGeneric("BIC"), generic = structure("BIC", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = "object", default = structure(function (object, ...) 
args: UseMethod("BIC"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ...) 
args: UseMethod("BIC"))(object, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: UseMethod("coef"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: standardGeneric("coef"), generic = structure("coef", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = "object", default = structure(function (object, ...) 
args: UseMethod("coef"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ...) 
args: UseMethod("coef"))(object, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, parm, level = 0.95, ...) 
args: UseMethod("confint"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, parm, level = 0.95, ...) 
args: standardGeneric("confint"), generic = structure("confint", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = c("object", "parm", "level"), default = structure(function (object, parm, level = 0.95, ...) 
args: UseMethod("confint"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, parm, level = 0.95, ...) 
args: UseMethod("confint"))(object, parm, level, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: UseMethod("logLik"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: standardGeneric("logLik"), generic = structure("logLik", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = "object", default = structure(function (object, ...) 
args: UseMethod("logLik"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ...) 
args: UseMethod("logLik"))(object, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: UseMethod("nobs"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: standardGeneric("nobs"), generic = structure("nobs", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = "object", default = structure(function (object, ...) 
args: UseMethod("nobs"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ...) 
args: UseMethod("nobs"))(object, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "x", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "x", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (x, y, ...) 
args: standardGeneric("plot"), generic = structure("plot", package = "graphics"), package = "graphics", group = list(), valueClass = character(0), signature = c("x", "y"), default = structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "x", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "x", package = "methods"), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (x, y, ...) 
args: UseMethod("plot"))(x, y, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (fitted, ...) 
args: UseMethod("profile"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (fitted, ...) 
args: standardGeneric("profile"), generic = structure("profile", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = "fitted", default = structure(function (fitted, ...) 
args: UseMethod("profile"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (fitted, ...) 
args: UseMethod("profile"))(fitted, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: UseMethod("summary"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: standardGeneric("summary"), generic = structure("summary", package = "base"), package = "base", group = list(), valueClass = character(0), signature = "object", default = structure(function (object, ...) 
args: UseMethod("summary"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ...) 
args: UseMethod("summary"))(object, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: UseMethod("update"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: standardGeneric("update"), generic = structure("update", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = "object", default = structure(function (object, ...) 
args: UseMethod("update"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ...) 
args: UseMethod("update"))(object, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: UseMethod("vcov"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = character(0), class = structure("derivedDefaultMethod", package = "methods")))
retn: <environment>

func: quote(environment)
body: function (fun = NULL) 
body: .Internal(environment(fun))
args: list(structure(function (object, ...) 
args: standardGeneric("vcov"), generic = structure("vcov", package = "stats"), package = "stats", group = list(), valueClass = character(0), signature = "object", default = structure(function (object, ...) 
args: UseMethod("vcov"), target = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (object, ...) 
args: UseMethod("vcov"))(object, ...)), class = structure("standardGeneric", package = "methods")))
retn: <environment>

