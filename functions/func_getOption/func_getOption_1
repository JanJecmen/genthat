func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("showErrorCalls")
retn: NULL

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("defaultPackages")
retn: c("datasets", "utils", "grDevices", "graphics", "stats", "methods")

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("verbose")
retn: FALSE

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("encoding")
retn: "native.enc"

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("keep.source.pkgs")
retn: TRUE

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("width")
retn: 65L

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("digits")
retn: 5L

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("topLevelEnvironment")
retn: NULL

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("keep.source")
retn: TRUE

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("demo.ask")
retn: "default"

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("prompt")
retn: "> "

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("continue")
retn: "+ "

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("pager")
retn: "cat"

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("deparse.max.lines")
retn: NULL

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("warn")
retn: 0

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("ts.eps")
retn: 1e-05

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("pkgType")
retn: "source"

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("repos")
retn: structure("@CRAN@", .Names = "CRAN")

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("help_type")
retn: NULL

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("help.try.all.packages")
retn: FALSE

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("SweaveSyntax")
retn: NULL

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("citation.bibtex.max", 1)
retn: 1

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("mailer")
retn: "mailto"

func: quote(getOption)
body: function (x, default = NULL) 
body: {
body:     if (missing(default)) 
body:         return(options(x)[[1L]])
body:     if (x %in% names(options())) 
body:         options(x)[[1L]]
body:     else default
body: }
args: list("example.ask")
retn: "default"

