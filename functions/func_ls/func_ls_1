func: quote(ls)
body: function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern) 
body: {
body:     if (!missing(name)) {
body:         nameValue <- try(name, silent = TRUE)
body:         if (identical(class(nameValue), "try-error")) {
body:             name <- substitute(name)
body:             if (!is.character(name)) 
body:                 name <- deparse(name)
body:             warning(gettextf("%s converted to character string", sQuote(name)), domain = NA)
body:             pos <- name
body:         }
body:         else pos <- nameValue
body:     }
body:     all.names <- .Internal(ls(envir, all.names))
body:     if (!missing(pattern)) {
body:         if ((ll <- length(grep("[", pattern, fixed = TRUE))) && ll != length(grep("]", pattern, fixed = TRUE))) {
body:             if (pattern == "[") {
body:                 pattern <- "\\["
body:                 warning("replaced regular expression pattern '[' by  '\\\\['")
body:             }
body:             else if (length(grep("[^\\\\]\\[<-", pattern))) {
body:                 pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
body:                 warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
body:             }
body:         }
body:         grep(pattern, all.names, value = TRUE)
body:     }
body:     else all.names
body: }
args: list("package:base")
retn: <arguments too long, ignored>

func: quote(ls)
body: function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern) 
body: {
body:     if (!missing(name)) {
body:         nameValue <- try(name, silent = TRUE)
body:         if (identical(class(nameValue), "try-error")) {
body:             name <- substitute(name)
body:             if (!is.character(name)) 
body:                 name <- deparse(name)
body:             warning(gettextf("%s converted to character string", sQuote(name)), domain = NA)
body:             pos <- name
body:         }
body:         else pos <- nameValue
body:     }
body:     all.names <- .Internal(ls(envir, all.names))
body:     if (!missing(pattern)) {
body:         if ((ll <- length(grep("[", pattern, fixed = TRUE))) && ll != length(grep("]", pattern, fixed = TRUE))) {
body:             if (pattern == "[") {
body:                 pattern <- "\\["
body:                 warning("replaced regular expression pattern '[' by  '\\\\['")
body:             }
body:             else if (length(grep("[^\\\\]\\[<-", pattern))) {
body:                 pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
body:                 warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
body:             }
body:         }
body:         grep(pattern, all.names, value = TRUE)
body:     }
body:     else all.names
body: }
args: list("package:stats")
retn: <arguments too long, ignored>

func: quote(ls)
body: function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern) 
body: {
body:     if (!missing(name)) {
body:         nameValue <- try(name, silent = TRUE)
body:         if (identical(class(nameValue), "try-error")) {
body:             name <- substitute(name)
body:             if (!is.character(name)) 
body:                 name <- deparse(name)
body:             warning(gettextf("%s converted to character string", sQuote(name)), domain = NA)
body:             pos <- name
body:         }
body:         else pos <- nameValue
body:     }
body:     all.names <- .Internal(ls(envir, all.names))
body:     if (!missing(pattern)) {
body:         if ((ll <- length(grep("[", pattern, fixed = TRUE))) && ll != length(grep("]", pattern, fixed = TRUE))) {
body:             if (pattern == "[") {
body:                 pattern <- "\\["
body:                 warning("replaced regular expression pattern '[' by  '\\\\['")
body:             }
body:             else if (length(grep("[^\\\\]\\[<-", pattern))) {
body:                 pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
body:                 warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
body:             }
body:         }
body:         grep(pattern, all.names, value = TRUE)
body:     }
body:     else all.names
body: }
args: list(<environment>, all.names = TRUE)
retn: c("!", "!=", "%%", "%/%", "&", "*", "+", "-", "/", "<", "<=", "==", ">", ">=", "Arg", "Conj", "Im", "Mod", "Re", "^", "abs", "acos", "acosh", "all", "any", "as.character", "as.complex", "as.double", "as.environment", "as.integer", "as.logical", "as.numeric", "as.raw", "asin", "asinh", "atan", "atanh", "c", "ceiling", "cos", "cosh", "cummax", "cummin", "cumprod", "cumsum", "digamma", "dim", "dim<-", "dimnames", "dimnames<-", "exp", "expm1", "floor", "gamma", "is.array", "is.finite", "is.infinite", 
retn: "is.matrix", "is.na", "is.nan", "is.numeric", "length", "length<-", "levels<-", "lgamma", "log", "log10", "log1p", "log2", "max", "min", "names", "names<-", "prod", "range", "rep", "round", "seq.int", "sign", "signif", "sin", "sinh", "sqrt", "sum", "tan", "tanh", "trigamma", "trunc", "xtfrm", "|")

