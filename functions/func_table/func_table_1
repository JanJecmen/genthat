func: quote(table)
body: function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", "ifany", "always"), dnn = list.names(...), deparse.level = 1) 
body: {
body:     list.names <- function(...) {
body:         l <- as.list(substitute(list(...)))[-1L]
body:         nm <- names(l)
body:         fixup <- if (is.null(nm)) 
body:             seq_along(l)
body:         else nm == ""
body:         dep <- vapply(l[fixup], function(x) switch(deparse.level + 1, "", if (is.symbol(x)) as.character(x) else "", deparse(x, nlines = 1)[1L]), "")
body:         if (is.null(nm)) 
body:             dep
body:         else {
body:             nm[fixup] <- dep
body:             nm
body:         }
body:     }
body:     if (!missing(exclude) && is.null(exclude)) 
body:         useNA <- "always"
body:     useNA <- match.arg(useNA)
body:     args <- list(...)
body:     if (!length(args)) 
body:         stop("nothing to tabulate")
body:     if (length(args) == 1L && is.list(args[[1L]])) {
body:         args <- args[[1L]]
body:         if (length(dnn) != length(args)) 
body:             dnn <- if (!is.null(argn <- names(args))) 
body:                 argn
body:             else paste(dnn[1L], seq_along(args), sep = ".")
body:     }
body:     bin <- 0L
body:     lens <- NULL
body:     dims <- integer()
body:     pd <- 1L
body:     dn <- NULL
body:     for (a in args) {
body:         if (is.null(lens)) 
body:             lens <- length(a)
body:         else if (length(a) != lens) 
body:             stop("all arguments must have the same length")
body:         cat <- if (is.factor(a)) {
body:             if (any(is.na(levels(a)))) 
body:                 a
body:             else {
body:                 if (is.null(exclude) && useNA != "no") 
body:                   addNA(a, ifany = (useNA == "ifany"))
body:                 else {
body:                   if (useNA != "no") 
body:                     a <- addNA(a, ifany = (useNA == "ifany"))
body:                   ll <- levels(a)
body:                   a <- factor(a, levels = ll[!(ll %in% exclude)], exclude = if (useNA == "no") 
body:                     NA)
body:                 }
body:             }
body:         }
body:         else {
body:             a <- factor(a, exclude = exclude)
body:             if (useNA != "no") 
body:                 addNA(a, ifany = (useNA == "ifany"))
body:             else a
body:         }
body:         nl <- length(ll <- levels(cat))
body:         dims <- c(dims, nl)
body:         if (prod(dims) > .Machine$integer.max) 
body:             stop("attempt to make a table with >= 2^31 elements")
body:         dn <- c(dn, list(ll))
body:         bin <- bin + pd * (as.integer(cat) - 1L)
body:         pd <- pd * nl
body:     }
body:     names(dn) <- dnn
body:     bin <- bin[!is.na(bin)]
body:     if (length(bin)) 
body:         bin <- bin + 1L
body:     y <- array(tabulate(bin, pd), dims, dimnames = dn)
body:     class(y) <- "table"
body:     y
body: }
args: list(c(1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c("1", 
args: "2", "3", "4", "5", "6"), class = "factor"))
retn: structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Dim = 5:6, .Dimnames = structure(list(blocks = c("1", "2", "3", "4", "5"), varieties = c("1", "2", "3", "4", "5", "6")), .Names = c("blocks", "varieties")), class = "table")

func: quote(table)
body: function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", "ifany", "always"), dnn = list.names(...), deparse.level = 1) 
body: {
body:     list.names <- function(...) {
body:         l <- as.list(substitute(list(...)))[-1L]
body:         nm <- names(l)
body:         fixup <- if (is.null(nm)) 
body:             seq_along(l)
body:         else nm == ""
body:         dep <- vapply(l[fixup], function(x) switch(deparse.level + 1, "", if (is.symbol(x)) as.character(x) else "", deparse(x, nlines = 1)[1L]), "")
body:         if (is.null(nm)) 
body:             dep
body:         else {
body:             nm[fixup] <- dep
body:             nm
body:         }
body:     }
body:     if (!missing(exclude) && is.null(exclude)) 
body:         useNA <- "always"
body:     useNA <- match.arg(useNA)
body:     args <- list(...)
body:     if (!length(args)) 
body:         stop("nothing to tabulate")
body:     if (length(args) == 1L && is.list(args[[1L]])) {
body:         args <- args[[1L]]
body:         if (length(dnn) != length(args)) 
body:             dnn <- if (!is.null(argn <- names(args))) 
body:                 argn
body:             else paste(dnn[1L], seq_along(args), sep = ".")
body:     }
body:     bin <- 0L
body:     lens <- NULL
body:     dims <- integer()
body:     pd <- 1L
body:     dn <- NULL
body:     for (a in args) {
body:         if (is.null(lens)) 
body:             lens <- length(a)
body:         else if (length(a) != lens) 
body:             stop("all arguments must have the same length")
body:         cat <- if (is.factor(a)) {
body:             if (any(is.na(levels(a)))) 
body:                 a
body:             else {
body:                 if (is.null(exclude) && useNA != "no") 
body:                   addNA(a, ifany = (useNA == "ifany"))
body:                 else {
body:                   if (useNA != "no") 
body:                     a <- addNA(a, ifany = (useNA == "ifany"))
body:                   ll <- levels(a)
body:                   a <- factor(a, levels = ll[!(ll %in% exclude)], exclude = if (useNA == "no") 
body:                     NA)
body:                 }
body:             }
body:         }
body:         else {
body:             a <- factor(a, exclude = exclude)
body:             if (useNA != "no") 
body:                 addNA(a, ifany = (useNA == "ifany"))
body:             else a
body:         }
body:         nl <- length(ll <- levels(cat))
body:         dims <- c(dims, nl)
body:         if (prod(dims) > .Machine$integer.max) 
body:             stop("attempt to make a table with >= 2^31 elements")
body:         dn <- c(dn, list(ll))
body:         bin <- bin + pd * (as.integer(cat) - 1L)
body:         pd <- pd * nl
body:     }
body:     names(dn) <- dnn
body:     bin <- bin[!is.na(bin)]
body:     if (length(bin)) 
body:         bin <- bin + 1L
body:     y <- array(tabulate(bin, pd), dims, dimnames = dn)
body:     class(y) <- "table"
body:     y
body: }
args: <arguments too long, ignored>
retn: structure(c(19L, 1L, 2L, 2L, 3L, 2L, 4L, 2L, 4L, 41L, 4L, 4L, 8L, 6L, 6L, 10L, 7L, 27L, 49L, 8L, 8L, 17L, 8L, 12L, 18L, 53L, 13L, 60L, 12L, 18L, 22L, 16L, 35L, 70L, 22L, 24L, 66L, 28L, 18L, 72L, 22L, 75L, 37L, 34L, 26L, 111L, 63L, 36L, 45L, 84L, 34L, 94L, 36L, 93L, 97L, 50L, 53L, 156L, 42L, 60L, 103L, 107L, 50L, 168L, 51L, 140L, 112L, 116L, 59L, 191L, 65L, 126L, 156L, 185L, 115L, 206L, 117L, 179L, 153L, 156L, 111L, 570L, 111L, 156L, 153L, 179L, 117L, 206L, 115L, 185L, 156L, 126L, 65L, 191L, 59L, 
retn: 116L, 112L, 140L, 51L, 168L, 50L, 107L, 103L, 60L, 42L, 156L, 53L, 50L, 97L, 93L, 36L, 94L, 34L, 84L, 45L, 36L, 63L, 111L, 26L, 34L, 37L, 75L, 22L, 72L, 18L, 28L, 66L, 24L, 22L, 70L, 35L, 16L, 22L, 18L, 12L, 60L, 13L, 53L, 18L, 12L, 8L, 17L, 8L, 8L, 49L, 27L, 7L, 10L, 6L, 6L, 8L, 4L, 4L, 41L, 4L, 2L, 4L, 2L, 3L, 2L, 2L, 1L, 19L), .Dim = 163L, .Dimnames = structure(list(c("-81", "-80", "-79", "-78", "-77", "-76", "-75", "-74", "-73", "-72", "-71", "-70", "-69", "-68", "-67", "-66", "-65", "-64", "-63", 
retn: "-62", "-61", "-60", "-59", "-58", "-57", "-56", "-55", "-54", "-53", "-52", "-51", "-50", "-49", "-48", "-47", "-46", "-45", "-44", "-43", "-42", "-41", "-40", "-39", "-38", "-37", "-36", "-35", "-34", "-33", "-32", "-31", "-30", "-29", "-28", "-27", "-26", "-25", "-24", "-23", "-22", "-21", "-20", "-19", "-18", "-17", "-16", "-15", "-14", "-13", "-12", "-11", "-10", "-9", "-8", "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", 
retn: "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81")), .Names = ""), class = "table")

func: quote(table)
body: function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", "ifany", "always"), dnn = list.names(...), deparse.level = 1) 
body: {
body:     list.names <- function(...) {
body:         l <- as.list(substitute(list(...)))[-1L]
body:         nm <- names(l)
body:         fixup <- if (is.null(nm)) 
body:             seq_along(l)
body:         else nm == ""
body:         dep <- vapply(l[fixup], function(x) switch(deparse.level + 1, "", if (is.symbol(x)) as.character(x) else "", deparse(x, nlines = 1)[1L]), "")
body:         if (is.null(nm)) 
body:             dep
body:         else {
body:             nm[fixup] <- dep
body:             nm
body:         }
body:     }
body:     if (!missing(exclude) && is.null(exclude)) 
body:         useNA <- "always"
body:     useNA <- match.arg(useNA)
body:     args <- list(...)
body:     if (!length(args)) 
body:         stop("nothing to tabulate")
body:     if (length(args) == 1L && is.list(args[[1L]])) {
body:         args <- args[[1L]]
body:         if (length(dnn) != length(args)) 
body:             dnn <- if (!is.null(argn <- names(args))) 
body:                 argn
body:             else paste(dnn[1L], seq_along(args), sep = ".")
body:     }
body:     bin <- 0L
body:     lens <- NULL
body:     dims <- integer()
body:     pd <- 1L
body:     dn <- NULL
body:     for (a in args) {
body:         if (is.null(lens)) 
body:             lens <- length(a)
body:         else if (length(a) != lens) 
body:             stop("all arguments must have the same length")
body:         cat <- if (is.factor(a)) {
body:             if (any(is.na(levels(a)))) 
body:                 a
body:             else {
body:                 if (is.null(exclude) && useNA != "no") 
body:                   addNA(a, ifany = (useNA == "ifany"))
body:                 else {
body:                   if (useNA != "no") 
body:                     a <- addNA(a, ifany = (useNA == "ifany"))
body:                   ll <- levels(a)
body:                   a <- factor(a, levels = ll[!(ll %in% exclude)], exclude = if (useNA == "no") 
body:                     NA)
body:                 }
body:             }
body:         }
body:         else {
body:             a <- factor(a, exclude = exclude)
body:             if (useNA != "no") 
body:                 addNA(a, ifany = (useNA == "ifany"))
body:             else a
body:         }
body:         nl <- length(ll <- levels(cat))
body:         dims <- c(dims, nl)
body:         if (prod(dims) > .Machine$integer.max) 
body:             stop("attempt to make a table with >= 2^31 elements")
body:         dn <- c(dn, list(ll))
body:         bin <- bin + pd * (as.integer(cat) - 1L)
body:         pd <- pd * nl
body:     }
body:     names(dn) <- dnn
body:     bin <- bin[!is.na(bin)]
body:     if (length(bin)) 
body:         bin <- bin + 1L
body:     y <- array(tabulate(bin, pd), dims, dimnames = dn)
body:     class(y) <- "table"
body:     y
body: }
args: list(structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"))
retn: structure(c(2L, 6L, 2L, 5L, 4L, 2L, 5L, 4L), .Dim = 8L, .Dimnames = structure(list(statef = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")), .Names = "statef"), class = "table")

func: quote(table)
body: function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no", "ifany", "always"), dnn = list.names(...), deparse.level = 1) 
body: {
body:     list.names <- function(...) {
body:         l <- as.list(substitute(list(...)))[-1L]
body:         nm <- names(l)
body:         fixup <- if (is.null(nm)) 
body:             seq_along(l)
body:         else nm == ""
body:         dep <- vapply(l[fixup], function(x) switch(deparse.level + 1, "", if (is.symbol(x)) as.character(x) else "", deparse(x, nlines = 1)[1L]), "")
body:         if (is.null(nm)) 
body:             dep
body:         else {
body:             nm[fixup] <- dep
body:             nm
body:         }
body:     }
body:     if (!missing(exclude) && is.null(exclude)) 
body:         useNA <- "always"
body:     useNA <- match.arg(useNA)
body:     args <- list(...)
body:     if (!length(args)) 
body:         stop("nothing to tabulate")
body:     if (length(args) == 1L && is.list(args[[1L]])) {
body:         args <- args[[1L]]
body:         if (length(dnn) != length(args)) 
body:             dnn <- if (!is.null(argn <- names(args))) 
body:                 argn
body:             else paste(dnn[1L], seq_along(args), sep = ".")
body:     }
body:     bin <- 0L
body:     lens <- NULL
body:     dims <- integer()
body:     pd <- 1L
body:     dn <- NULL
body:     for (a in args) {
body:         if (is.null(lens)) 
body:             lens <- length(a)
body:         else if (length(a) != lens) 
body:             stop("all arguments must have the same length")
body:         cat <- if (is.factor(a)) {
body:             if (any(is.na(levels(a)))) 
body:                 a
body:             else {
body:                 if (is.null(exclude) && useNA != "no") 
body:                   addNA(a, ifany = (useNA == "ifany"))
body:                 else {
body:                   if (useNA != "no") 
body:                     a <- addNA(a, ifany = (useNA == "ifany"))
body:                   ll <- levels(a)
body:                   a <- factor(a, levels = ll[!(ll %in% exclude)], exclude = if (useNA == "no") 
body:                     NA)
body:                 }
body:             }
body:         }
body:         else {
body:             a <- factor(a, exclude = exclude)
body:             if (useNA != "no") 
body:                 addNA(a, ifany = (useNA == "ifany"))
body:             else a
body:         }
body:         nl <- length(ll <- levels(cat))
body:         dims <- c(dims, nl)
body:         if (prod(dims) > .Machine$integer.max) 
body:             stop("attempt to make a table with >= 2^31 elements")
body:         dn <- c(dn, list(ll))
body:         bin <- bin + pd * (as.integer(cat) - 1L)
body:         pd <- pd * nl
body:     }
body:     names(dn) <- dnn
body:     bin <- bin[!is.na(bin)]
body:     if (length(bin)) 
body:         bin <- bin + 1L
body:     y <- array(tabulate(bin, pd), dims, dimnames = dn)
body:     class(y) <- "table"
body:     y
body: }
args: list(structure(c(3L, 2L, 1L, 3L, 3L, 3L, 3L, 2L, 3L, 4L, 4L, 1L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 2L, 1L, 2L, 2L, 2L, 3L, 2L, 3L, 1L), .Label = c("(35,45]", "(45,55]", "(55,65]", "(65,75]"), class = "factor"), structure(c(6L, 5L, 4L, 2L, 2L, 3L, 8L, 8L, 4L, 7L, 2L, 7L, 4L, 4L, 5L, 6L, 5L, 3L, 8L, 7L, 4L, 2L, 2L, 8L, 5L, 1L, 2L, 7L, 7L, 1L), .Label = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa"), class = "factor"))
retn: structure(c(1L, 1L, 0L, 0L, 1L, 1L, 3L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 3L, 0L, 0L, 2L, 2L, 0L, 0L, 0L, 2L, 0L, 1L, 1L, 2L, 1L, 0L, 3L, 1L, 0L), .Dim = c(4L, 8L), .Dimnames = structure(list(incomef = c("(35,45]", "(45,55]", "(55,65]", "(65,75]"), statef = c("act", "nsw", "nt", "qld", "sa", "tas", "vic", "wa")), .Names = c("incomef", "statef")), class = "table")

