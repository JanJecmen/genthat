func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(integer(0))
retn: structure(list(x = integer(0)), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(x = integer(0)), .Names = "x", row.names = character(0), class = "data.frame"))
retn: structure(list(x = integer(0)), .Names = "x", row.names = character(0), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(NULL)
retn: structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame"))
retn: structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(list())
retn: structure(list(), .Names = character(0), row.names = integer(0), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(1L)
retn: structure(list(x = 1L), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(x = 1L), .Names = "x", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(x = 1L), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(3.14159265358979)
retn: structure(list(x = 3.14159265358979), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(x = 3.14159265358979), .Names = "x", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(x = 3.14159265358979), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list("1.3")
retn: structure(list(x = structure(1L, .Label = "1.3", class = "factor")), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(x = structure(1L, .Label = "1.3", class = "factor")), .Names = "x", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(x = structure(1L, .Label = "1.3", class = "factor")), .Names = "x", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(a = 1), .Names = "a"))
retn: structure(list(a = 1), .Names = "a", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(a = 1), .Names = "a", row.names = c(NA, -1L), class = "data.frame"))
retn: structure(list(a = 1), .Names = "a", row.names = c(NA, -1L), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(character(0))
retn: structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame")

func: quote(as.data.frame)
body: function (x, row.names = NULL, optional = FALSE, ...) 
body: {
body:     if (is.null(x)) 
body:         return(as.data.frame(list()))
body:     UseMethod("as.data.frame")
body: }
args: list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame"))
retn: structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = "factor")), .Names = "character(0)", row.names = character(0), class = "data.frame")

