func: quote(coplot)
body: function (formula, data, given.values, panel = points, rows, columns, show.given = TRUE, col = par("fg"), pch = par("pch"), bar.bg = c(num = gray(0.8), fac = gray(0.95)), xlab = c(x.name, paste("Given :", a.name)), ylab = c(y.name, paste("Given :", b.name)), subscripts = FALSE, axlabels = function(f) abbreviate(levels(f)), number = 6, overlap = 0.5, xlim, ylim, ...) 
body: {
body:     deparen <- function(expr) {
body:         while (is.language(expr) && !is.name(expr) && deparse(expr[[1L]])[1L] == "(") expr <- expr[[2L]]
body:         expr
body:     }
body:     bad.formula <- function() stop("invalid conditioning formula")
body:     bad.lengths <- function() stop("incompatible variable lengths")
body:     getOp <- function(call) deparse(call[[1L]], backtick = FALSE)[[1L]]
body:     formula <- deparen(formula)
body:     if (!inherits(formula, "formula")) 
body:         bad.formula()
body:     y <- deparen(formula[[2L]])
body:     rhs <- deparen(formula[[3L]])
body:     if (getOp(rhs) != "|") 
body:         bad.formula()
body:     x <- deparen(rhs[[2L]])
body:     rhs <- deparen(rhs[[3L]])
body:     if (is.language(rhs) && !is.name(rhs) && getOp(rhs) %in% c("*", "+")) {
body:         have.b <- TRUE
body:         a <- deparen(rhs[[2L]])
body:         b <- deparen(rhs[[3L]])
body:     }
body:     else {
body:         have.b <- FALSE
body:         a <- rhs
body:     }
body:     if (missing(data)) 
body:         data <- parent.frame()
body:     x.name <- deparse(x)
body:     x <- eval(x, data, parent.frame())
body:     nobs <- length(x)
body:     y.name <- deparse(y)
body:     y <- eval(y, data, parent.frame())
body:     if (length(y) != nobs) 
body:         bad.lengths()
body:     a.name <- deparse(a)
body:     a <- eval(a, data, parent.frame())
body:     if (length(a) != nobs) 
body:         bad.lengths()
body:     if (is.character(a)) 
body:         a <- as.factor(a)
body:     a.is.fac <- is.factor(a)
body:     if (have.b) {
body:         b.name <- deparse(b)
body:         b <- eval(b, data, parent.frame())
body:         if (length(b) != nobs) 
body:             bad.lengths()
body:         if (is.character(b)) 
body:             b <- as.factor(b)
body:         b.is.fac <- is.factor(b)
body:         missingrows <- which(is.na(x) | is.na(y) | is.na(a) | is.na(b))
body:     }
body:     else {
body:         missingrows <- which(is.na(x) | is.na(y) | is.na(a))
body:         b <- NULL
body:         b.name <- ""
body:     }
body:     number <- as.integer(number)
body:     if (length(number) == 0L || any(number < 1)) 
body:         stop("'number' must be integer >= 1")
body:     if (any(overlap >= 1)) 
body:         stop("'overlap' must be < 1 (and typically >= 0).")
body:     bad.givens <- function() stop("invalid 'given.values'")
body:     if (missing(given.values)) {
body:         a.intervals <- if (a.is.fac) {
body:             i <- seq_along(a.levels <- levels(a))
body:             a <- as.numeric(a)
body:             cbind(i - 0.5, i + 0.5)
body:         }
body:         else co.intervals(unclass(a), number = number[1L], overlap = overlap[1L])
body:         b.intervals <- if (have.b) {
body:             if (b.is.fac) {
body:                 i <- seq_along(b.levels <- levels(b))
body:                 b <- as.numeric(b)
body:                 cbind(i - 0.5, i + 0.5)
body:             }
body:             else {
body:                 if (length(number) == 1L) 
body:                   number <- rep.int(number, 2)
body:                 if (length(overlap) == 1L) 
body:                   overlap <- rep.int(overlap, 2)
body:                 co.intervals(unclass(b), number = number[2L], overlap = overlap[2L])
body:             }
body:         }
body:     }
body:     else {
body:         if (!is.list(given.values)) 
body:             given.values <- list(given.values)
body:         if (length(given.values) != (if (have.b) 
body:             2L
body:         else 1L)) 
body:             bad.givens()
body:         a.intervals <- given.values[[1L]]
body:         if (a.is.fac) {
body:             a.levels <- levels(a)
body:             if (is.character(a.intervals)) 
body:                 a.intervals <- match(a.intervals, a.levels)
body:             a.intervals <- cbind(a.intervals - 0.5, a.intervals + 0.5)
body:             a <- as.numeric(a)
body:         }
body:         else if (is.numeric(a)) {
body:             if (!is.numeric(a.intervals)) 
body:                 bad.givens()
body:             if (!is.matrix(a.intervals) || ncol(a.intervals) != 2) 
body:                 a.intervals <- cbind(a.intervals - 0.5, a.intervals + 0.5)
body:         }
body:         if (have.b) {
body:             b.intervals <- given.values[[2L]]
body:             if (b.is.fac) {
body:                 b.levels <- levels(b)
body:                 if (is.character(b.intervals)) 
body:                   b.intervals <- match(b.intervals, b.levels)
body:                 b.intervals <- cbind(b.intervals - 0.5, b.intervals + 0.5)
body:                 b <- as.numeric(b)
body:             }
body:             else if (is.numeric(b)) {
body:                 if (!is.numeric(b.intervals)) 
body:                   bad.givens()
body:                 if (!is.matrix(b.intervals) || ncol(b.intervals) != 2) 
body:                   b.intervals <- cbind(b.intervals - 0.5, b.intervals + 0.5)
body:             }
body:         }
body:     }
body:     if (any(is.na(a.intervals)) || (have.b && any(is.na(b.intervals)))) 
body:         bad.givens()
body:     if (have.b) {
body:         rows <- nrow(b.intervals)
body:         columns <- nrow(a.intervals)
body:         nplots <- rows * columns
body:         if (length(show.given) < 2L) 
body:             show.given <- rep.int(show.given, 2L)
body:     }
body:     else {
body:         nplots <- nrow(a.intervals)
body:         if (missing(rows)) {
body:             if (missing(columns)) {
body:                 rows <- ceiling(round(sqrt(nplots)))
body:                 columns <- ceiling(nplots/rows)
body:             }
body:             else rows <- ceiling(nplots/columns)
body:         }
body:         else if (missing(columns)) 
body:             columns <- ceiling(nplots/rows)
body:         if (rows * columns < nplots) 
body:             stop("rows * columns too small")
body:     }
body:     total.columns <- columns
body:     total.rows <- rows
body:     f.col <- f.row <- 1
body:     if (show.given[1L]) {
body:         total.rows <- rows + 1
body:         f.row <- rows/total.rows
body:     }
body:     if (have.b && show.given[2L]) {
body:         total.columns <- columns + 1
body:         f.col <- columns/total.columns
body:     }
body:     mar <- if (have.b) 
body:         rep.int(0, 4)
body:     else c(0.5, 0, 0.5, 0)
body:     oma <- c(5, 6, 5, 4)
body:     if (have.b) {
body:         oma[2L] <- 5
body:         if (!b.is.fac) 
body:             oma[4L] <- 5
body:     }
body:     if (a.is.fac && show.given[1L]) 
body:         oma[3L] <- oma[3L] - 1
body:     opar <- par(mfrow = c(total.rows, total.columns), oma = oma, mar = mar, xaxs = "r", yaxs = "r")
body:     on.exit(par(opar))
body:     dev.hold()
body:     on.exit(dev.flush(), add = TRUE)
body:     plot.new()
body:     if (missing(xlim)) 
body:         xlim <- range(as.numeric(x), finite = TRUE)
body:     if (missing(ylim)) 
body:         ylim <- range(as.numeric(y), finite = TRUE)
body:     pch <- rep_len(pch, nobs)
body:     col <- rep_len(col, nobs)
body:     do.panel <- function(index, subscripts = FALSE, id) {
body:         Paxis <- function(side, x) {
body:             if (nlevels(x)) {
body:                 lab <- axlabels(x)
body:                 axis(side, labels = lab, at = seq(lab), xpd = NA)
body:             }
body:             else Axis(x, side = side, xpd = NA)
body:         }
body:         istart <- (total.rows - rows) + 1
body:         i <- total.rows - ((index - 1)%/%columns)
body:         j <- (index - 1)%%columns + 1
body:         par(mfg = c(i, j, total.rows, total.columns))
body:         plot.new()
body:         plot.window(xlim, ylim)
body:         if (any(is.na(id))) 
body:             id[is.na(id)] <- FALSE
body:         if (any(id)) {
body:             grid(lty = "solid")
body:             if (subscripts) 
body:                 panel(x[id], y[id], subscripts = id, col = col[id], pch = pch[id], ...)
body:             else panel(x[id], y[id], col = col[id], pch = pch[id], ...)
body:         }
body:         if ((i == total.rows) && (j%%2 == 0)) 
body:             Paxis(1, x)
body:         else if ((i == istart || index + columns > nplots) && (j%%2 == 1)) 
body:             Paxis(3, x)
body:         if ((j == 1) && ((total.rows - i)%%2 == 0)) 
body:             Paxis(2, y)
body:         else if ((j == columns || index == nplots) && ((total.rows - i)%%2 == 1)) 
body:             Paxis(4, y)
body:         box()
body:     }
body:     if (have.b) {
body:         count <- 1
body:         for (i in 1L:rows) {
body:             for (j in 1L:columns) {
body:                 id <- ((a.intervals[j, 1] <= a) & (a <= a.intervals[j, 2]) & (b.intervals[i, 1] <= b) & (b <= b.intervals[i, 2]))
body:                 do.panel(count, subscripts, id)
body:                 count <- count + 1
body:             }
body:         }
body:     }
body:     else {
body:         for (i in 1L:nplots) {
body:             id <- ((a.intervals[i, 1] <= a) & (a <= a.intervals[i, 2]))
body:             do.panel(i, subscripts, id)
body:         }
body:     }
body:     mtext(xlab[1L], side = 1, at = 0.5 * f.col, outer = TRUE, line = 3.5, xpd = NA, font = par("font.lab"), cex = par("cex.lab"))
body:     mtext(ylab[1L], side = 2, at = 0.5 * f.row, outer = TRUE, line = 3.5, xpd = NA, font = par("font.lab"), cex = par("cex.lab"))
body:     if (length(xlab) == 1L) 
body:         xlab <- c(xlab, paste("Given :", a.name))
body:     if (show.given[1L]) {
body:         par(fig = c(0, f.col, f.row, 1), mar = mar + c(3 + (!a.is.fac), 0, 0, 0), new = TRUE)
body:         plot.new()
body:         nint <- nrow(a.intervals)
body:         a.range <- range(a.intervals, finite = TRUE)
body:         plot.window(a.range + c(0.03, -0.03) * diff(a.range), 0.5 + c(0, nint))
body:         rect(a.intervals[, 1], 1L:nint - 0.3, a.intervals[, 2], 1L:nint + 0.3, col = bar.bg[if (a.is.fac) 
body:             "fac"
body:         else "num"])
body:         if (a.is.fac) {
body:             text(apply(a.intervals, 1L, mean), 1L:nint, a.levels)
body:         }
body:         else {
body:             Axis(a, side = 3, xpd = NA)
body:             axis(1, labels = FALSE)
body:         }
body:         box()
body:         mtext(xlab[2L], 3, line = 3 - a.is.fac, at = mean(par("usr")[1L:2]), xpd = NA, font = par("font.lab"), cex = par("cex.lab"))
body:     }
body:     else {
body:         mtext(xlab[2L], 3, line = 3.25, outer = TRUE, at = 0.5 * f.col, xpd = NA, font = par("font.lab"), cex = par("cex.lab"))
body:     }
body:     if (have.b) {
body:         if (length(ylab) == 1L) 
body:             ylab <- c(ylab, paste("Given :", b.name))
body:         if (show.given[2L]) {
body:             par(fig = c(f.col, 1, 0, f.row), mar = mar + c(0, 3 + (!b.is.fac), 0, 0), new = TRUE)
body:             plot.new()
body:             nint <- nrow(b.intervals)
body:             b.range <- range(b.intervals, finite = TRUE)
body:             plot.window(0.5 + c(0, nint), b.range + c(0.03, -0.03) * diff(b.range))
body:             rect(1L:nint - 0.3, b.intervals[, 1], 1L:nint + 0.3, b.intervals[, 2], col = bar.bg[if (b.is.fac) 
body:                 "fac"
body:             else "num"])
body:             if (b.is.fac) {
body:                 text(1L:nint, apply(b.intervals, 1L, mean), b.levels, srt = 90)
body:             }
body:             else {
body:                 Axis(b, side = 4, xpd = NA)
body:                 axis(2, labels = FALSE)
body:             }
body:             box()
body:             mtext(ylab[2L], 4, line = 3 - b.is.fac, at = mean(par("usr")[3:4]), xpd = NA, font = par("font.lab"), cex = par("cex.lab"))
body:         }
body:         else {
body:             mtext(ylab[2L], 4, line = 3.25, at = 0.5 * f.row, outer = TRUE, xpd = NA, font = par("font.lab"), cex = par("cex.lab"))
body:         }
body:     }
body:     if (length(missingrows)) {
body:         cat("\n", gettextf("Missing rows: %s", paste0(missingrows, collapse = ", ")), "\n")
body:         invisible(missingrows)
body:     }
body:     else invisible()
body: }
args: <arguments too long, ignored>
retn: NULL

