func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::1", c(0L, 138L), <environment>)
retn: c(0L, 138L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::2", c(11137L, 2161L), <environment>)
retn: c(11137L, 2161L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::3", c(15325L, 101L), <environment>)
retn: c(15325L, 101L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::4", c(16139L, 1514L), <environment>)
retn: c(16139L, 1514L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::5", c(24015L, 86L), <environment>)
retn: c(24015L, 86L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::6", c(32201L, 122L), <environment>)
retn: c(32201L, 122L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::7", c(46343L, 132L), <environment>)
retn: c(46343L, 132L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::8", c(55904L, 86L), <environment>)
retn: c(55904L, 86L)

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::1", <environment>, <environment>)
retn: <environment>

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("filename", "/home/roman/r-instrumented/library/base/R/base", <environment>)
retn: "/home/roman/r-instrumented/library/base/R/base"

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::5", <environment>, <environment>)
retn: <environment>

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::7", <environment>, <environment>)
retn: <environment>

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".lib.loc", "/home/roman/r-instrumented/library", <environment>)
retn: "/home/roman/r-instrumented/library"

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::6", <environment>, <environment>)
retn: <environment>

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".Dyn.libs", structure(list(), class = "DLLInfoList"), <environment>)
retn: structure(list(), class = "DLLInfoList")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::8", <environment>, <environment>)
retn: <environment>

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::4", <environment>, <environment>)
retn: <environment>

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("!", function (x) 
args: UseMethod("!"), <environment>)
retn: function (x) 
retn: UseMethod("!")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("!=", function (e1, e2) 
args: UseMethod("!="), <environment>)
retn: function (e1, e2) 
retn: UseMethod("!=")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("%%", function (e1, e2) 
args: UseMethod("%%"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("%%")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("%/%", function (e1, e2) 
args: UseMethod("%/%"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("%/%")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("&", function (e1, e2) 
args: UseMethod("&"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("&")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("*", function (e1, e2) 
args: UseMethod("*"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("*")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("+", function (e1, e2) 
args: UseMethod("+"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("+")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("-", function (e1, e2) 
args: UseMethod("-"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("-")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("/", function (e1, e2) 
args: UseMethod("/"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("/")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("<", function (e1, e2) 
args: UseMethod("<"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("<")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("<=", function (e1, e2) 
args: UseMethod("<="), <environment>)
retn: function (e1, e2) 
retn: UseMethod("<=")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("==", function (e1, e2) 
args: UseMethod("=="), <environment>)
retn: function (e1, e2) 
retn: UseMethod("==")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(">", function (e1, e2) 
args: UseMethod(">"), <environment>)
retn: function (e1, e2) 
retn: UseMethod(">")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(">=", function (e1, e2) 
args: UseMethod(">="), <environment>)
retn: function (e1, e2) 
retn: UseMethod(">=")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("Arg", function (z) 
args: UseMethod("Arg"), <environment>)
retn: function (z) 
retn: UseMethod("Arg")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("Conj", function (z) 
args: UseMethod("Conj"), <environment>)
retn: function (z) 
retn: UseMethod("Conj")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("Im", function (z) 
args: UseMethod("Im"), <environment>)
retn: function (z) 
retn: UseMethod("Im")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("Mod", function (z) 
args: UseMethod("Mod"), <environment>)
retn: function (z) 
retn: UseMethod("Mod")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("Re", function (z) 
args: UseMethod("Re"), <environment>)
retn: function (z) 
retn: UseMethod("Re")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("^", function (e1, e2) 
args: UseMethod("^"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("^")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("abs", function (x) 
args: UseMethod("abs"), <environment>)
retn: function (x) 
retn: UseMethod("abs")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("acos", function (x) 
args: UseMethod("acos"), <environment>)
retn: function (x) 
retn: UseMethod("acos")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("acosh", function (x) 
args: UseMethod("acosh"), <environment>)
retn: function (x) 
retn: UseMethod("acosh")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("all", function (..., na.rm = FALSE) 
args: UseMethod("all"), <environment>)
retn: function (..., na.rm = FALSE) 
retn: UseMethod("all")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("any", function (..., na.rm = FALSE) 
args: UseMethod("any"), <environment>)
retn: function (..., na.rm = FALSE) 
retn: UseMethod("any")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.character", function (x, ...) 
args: UseMethod("as.character"), <environment>)
retn: function (x, ...) 
retn: UseMethod("as.character")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.complex", function (x, ...) 
args: UseMethod("as.complex"), <environment>)
retn: function (x, ...) 
retn: UseMethod("as.complex")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.double", function (x, ...) 
args: UseMethod("as.double"), <environment>)
retn: function (x, ...) 
retn: UseMethod("as.double")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.environment", function (x) 
args: UseMethod("as.environment"), <environment>)
retn: function (x) 
retn: UseMethod("as.environment")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.integer", function (x, ...) 
args: UseMethod("as.integer"), <environment>)
retn: function (x, ...) 
retn: UseMethod("as.integer")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.logical", function (x, ...) 
args: UseMethod("as.logical"), <environment>)
retn: function (x, ...) 
retn: UseMethod("as.logical")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.numeric", function (x, ...) 
args: UseMethod("as.double"), <environment>)
retn: function (x, ...) 
retn: UseMethod("as.double")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.raw", function (x) 
args: UseMethod("as.raw"), <environment>)
retn: function (x) 
retn: UseMethod("as.raw")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("asin", function (x) 
args: UseMethod("asin"), <environment>)
retn: function (x) 
retn: UseMethod("asin")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("asinh", function (x) 
args: UseMethod("asinh"), <environment>)
retn: function (x) 
retn: UseMethod("asinh")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("atan", function (x) 
args: UseMethod("atan"), <environment>)
retn: function (x) 
retn: UseMethod("atan")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("atanh", function (x) 
args: UseMethod("atanh"), <environment>)
retn: function (x) 
retn: UseMethod("atanh")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("c", function (..., recursive = FALSE) 
args: UseMethod("c"), <environment>)
retn: function (..., recursive = FALSE) 
retn: UseMethod("c")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("ceiling", function (x) 
args: UseMethod("ceiling"), <environment>)
retn: function (x) 
retn: UseMethod("ceiling")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("cos", function (x) 
args: UseMethod("cos"), <environment>)
retn: function (x) 
retn: UseMethod("cos")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("cosh", function (x) 
args: UseMethod("cosh"), <environment>)
retn: function (x) 
retn: UseMethod("cosh")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("cummax", function (x) 
args: UseMethod("cummax"), <environment>)
retn: function (x) 
retn: UseMethod("cummax")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("cummin", function (x) 
args: UseMethod("cummin"), <environment>)
retn: function (x) 
retn: UseMethod("cummin")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("cumprod", function (x) 
args: UseMethod("cumprod"), <environment>)
retn: function (x) 
retn: UseMethod("cumprod")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("cumsum", function (x) 
args: UseMethod("cumsum"), <environment>)
retn: function (x) 
retn: UseMethod("cumsum")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("digamma", function (x) 
args: UseMethod("digamma"), <environment>)
retn: function (x) 
retn: UseMethod("digamma")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("dim", function (x) 
args: UseMethod("dim"), <environment>)
retn: function (x) 
retn: UseMethod("dim")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("dim<-", function (x, value) 
args: UseMethod("dim<-"), <environment>)
retn: function (x, value) 
retn: UseMethod("dim<-")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("dimnames", function (x) 
args: UseMethod("dimnames"), <environment>)
retn: function (x) 
retn: UseMethod("dimnames")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("dimnames<-", function (x, value) 
args: UseMethod("dimnames<-"), <environment>)
retn: function (x, value) 
retn: UseMethod("dimnames<-")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("exp", function (x) 
args: UseMethod("exp"), <environment>)
retn: function (x) 
retn: UseMethod("exp")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("expm1", function (x) 
args: UseMethod("expm1"), <environment>)
retn: function (x) 
retn: UseMethod("expm1")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("floor", function (x) 
args: UseMethod("floor"), <environment>)
retn: function (x) 
retn: UseMethod("floor")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("gamma", function (x) 
args: UseMethod("gamma"), <environment>)
retn: function (x) 
retn: UseMethod("gamma")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.array", function (x) 
args: UseMethod("is.array"), <environment>)
retn: function (x) 
retn: UseMethod("is.array")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.finite", function (x) 
args: UseMethod("is.finite"), <environment>)
retn: function (x) 
retn: UseMethod("is.finite")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.infinite", function (x) 
args: UseMethod("is.infinite"), <environment>)
retn: function (x) 
retn: UseMethod("is.infinite")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.matrix", function (x) 
args: UseMethod("is.matrix"), <environment>)
retn: function (x) 
retn: UseMethod("is.matrix")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.na", function (x) 
args: UseMethod("is.na"), <environment>)
retn: function (x) 
retn: UseMethod("is.na")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.nan", function (x) 
args: UseMethod("is.nan"), <environment>)
retn: function (x) 
retn: UseMethod("is.nan")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.numeric", function (x) 
args: UseMethod("is.numeric"), <environment>)
retn: function (x) 
retn: UseMethod("is.numeric")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("length", function (x) 
args: UseMethod("length"), <environment>)
retn: function (x) 
retn: UseMethod("length")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("length<-", function (x, value) 
args: UseMethod("length<-"), <environment>)
retn: function (x, value) 
retn: UseMethod("length<-")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("levels<-", function (x, value) 
args: UseMethod("levels<-"), <environment>)
retn: function (x, value) 
retn: UseMethod("levels<-")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("lgamma", function (x) 
args: UseMethod("lgamma"), <environment>)
retn: function (x) 
retn: UseMethod("lgamma")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("log", function (x, base = exp(1)) 
args: UseMethod("log"), <environment>)
retn: function (x, base = exp(1)) 
retn: UseMethod("log")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("log10", function (x) 
args: UseMethod("log10"), <environment>)
retn: function (x) 
retn: UseMethod("log10")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("log1p", function (x) 
args: UseMethod("log1p"), <environment>)
retn: function (x) 
retn: UseMethod("log1p")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("log2", function (x) 
args: UseMethod("log2"), <environment>)
retn: function (x) 
retn: UseMethod("log2")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("max", function (..., na.rm = FALSE) 
args: UseMethod("max"), <environment>)
retn: function (..., na.rm = FALSE) 
retn: UseMethod("max")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("min", function (..., na.rm = FALSE) 
args: UseMethod("min"), <environment>)
retn: function (..., na.rm = FALSE) 
retn: UseMethod("min")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("names", function (x) 
args: UseMethod("names"), <environment>)
retn: function (x) 
retn: UseMethod("names")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("names<-", function (x, value) 
args: UseMethod("names<-"), <environment>)
retn: function (x, value) 
retn: UseMethod("names<-")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("prod", function (..., na.rm = FALSE) 
args: UseMethod("prod"), <environment>)
retn: function (..., na.rm = FALSE) 
retn: UseMethod("prod")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("range", function (..., na.rm = FALSE) 
args: UseMethod("range"), <environment>)
retn: function (..., na.rm = FALSE) 
retn: UseMethod("range")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("rep", function (x, ...) 
args: UseMethod("rep"), <environment>)
retn: function (x, ...) 
retn: UseMethod("rep")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("round", function (x, digits = 0) 
args: UseMethod("round"), <environment>)
retn: function (x, digits = 0) 
retn: UseMethod("round")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("seq.int", function (from, to, by, length.out, along.with, ...) 
args: UseMethod("seq.int"), <environment>)
retn: function (from, to, by, length.out, along.with, ...) 
retn: UseMethod("seq.int")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("sign", function (x) 
args: UseMethod("sign"), <environment>)
retn: function (x) 
retn: UseMethod("sign")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("signif", function (x, digits = 6) 
args: UseMethod("signif"), <environment>)
retn: function (x, digits = 6) 
retn: UseMethod("signif")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("sin", function (x) 
args: UseMethod("sin"), <environment>)
retn: function (x) 
retn: UseMethod("sin")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("sinh", function (x) 
args: UseMethod("sinh"), <environment>)
retn: function (x) 
retn: UseMethod("sinh")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("sqrt", function (x) 
args: UseMethod("sqrt"), <environment>)
retn: function (x) 
retn: UseMethod("sqrt")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("sum", function (..., na.rm = FALSE) 
args: UseMethod("sum"), <environment>)
retn: function (..., na.rm = FALSE) 
retn: UseMethod("sum")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("tan", function (x) 
args: UseMethod("tan"), <environment>)
retn: function (x) 
retn: UseMethod("tan")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("tanh", function (x) 
args: UseMethod("tanh"), <environment>)
retn: function (x) 
retn: UseMethod("tanh")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("trigamma", function (x) 
args: UseMethod("trigamma"), <environment>)
retn: function (x) 
retn: UseMethod("trigamma")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("trunc", function (x, ...) 
args: UseMethod("trunc"), <environment>)
retn: function (x, ...) 
retn: UseMethod("trunc")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("xtfrm", function (x) 
args: UseMethod("xtfrm"), <environment>)
retn: function (x) 
retn: UseMethod("xtfrm")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("|", function (e1, e2) 
args: UseMethod("|"), <environment>)
retn: function (e1, e2) 
retn: UseMethod("|")

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("env::2", <environment>, <environment>)
retn: <environment>

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("%*%", function (x, y) 
args: NULL, <environment>)
retn: function (x, y) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".C", function (.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING) 
args: NULL, <environment>)
retn: function (.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".Call", function (.NAME, ..., PACKAGE) 
args: NULL, <environment>)
retn: function (.NAME, ..., PACKAGE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".Call.graphics", function (.NAME, ..., PACKAGE) 
args: NULL, <environment>)
retn: function (.NAME, ..., PACKAGE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".External", function (.NAME, ..., PACKAGE) 
args: NULL, <environment>)
retn: function (.NAME, ..., PACKAGE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".External.graphics", function (.NAME, ..., PACKAGE) 
args: NULL, <environment>)
retn: function (.NAME, ..., PACKAGE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".External2", function (.NAME, ..., PACKAGE) 
args: NULL, <environment>)
retn: function (.NAME, ..., PACKAGE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".Fortran", function (.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING) 
args: NULL, <environment>)
retn: function (.NAME, ..., NAOK = FALSE, DUP = TRUE, PACKAGE, ENCODING) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".Internal", function (call) 
args: NULL, <environment>)
retn: function (call) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".Primitive", function (name) 
args: NULL, <environment>)
retn: function (name) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".cache_class", function (class, extends) 
args: NULL, <environment>)
retn: function (class, extends) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".isMethodsDispatchOn", function (x, onOff = NULL) 
args: NULL, <environment>)
retn: function (x, onOff = NULL) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".primTrace", function (obj) 
args: NULL, <environment>)
retn: function (obj) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".primUntrace", function (obj) 
args: NULL, <environment>)
retn: function (obj) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".subset", function (x, ...) 
args: NULL, <environment>)
retn: function (x, ...) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list(".subset2", function (x, ...) 
args: NULL, <environment>)
retn: function (x, ...) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("UseMethod", function (generic, object) 
args: NULL, <environment>)
retn: function (generic, object) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("as.call", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("attr", function (x, which, exact = FALSE) 
args: NULL, <environment>)
retn: function (x, which, exact = FALSE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("attr<-", function (x, which, value) 
args: NULL, <environment>)
retn: function (x, which, value) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("attributes", function (obj) 
args: NULL, <environment>)
retn: function (obj) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("attributes<-", function (obj, value) 
args: NULL, <environment>)
retn: function (obj, value) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("baseenv", function () 
args: NULL, <environment>)
retn: function () 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("browser", function (text = "", condition = NULL, expr = TRUE, skipCalls = 0L) 
args: NULL, <environment>)
retn: function (text = "", condition = NULL, expr = TRUE, skipCalls = 0L) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("call", function (name, ...) 
args: NULL, <environment>)
retn: function (name, ...) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("class", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("class<-", function (x, value) 
args: NULL, <environment>)
retn: function (x, value) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("emptyenv", function () 
args: NULL, <environment>)
retn: function () 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("enc2native", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("enc2utf8", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("environment<-", function (fun, value) 
args: NULL, <environment>)
retn: function (fun, value) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("expression", function (...) 
args: NULL, <environment>)
retn: function (...) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("gc.time", function (on = TRUE) 
args: NULL, <environment>)
retn: function (on = TRUE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("globalenv", function () 
args: NULL, <environment>)
retn: function () 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("interactive", function () 
args: NULL, <environment>)
retn: function () 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("invisible", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.atomic", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.call", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.character", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.complex", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.double", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.environment", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.expression", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.function", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.integer", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.language", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.list", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.logical", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.name", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.null", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.object", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.pairlist", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.raw", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.recursive", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.single", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("is.symbol", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("isS4", function (object) 
args: NULL, <environment>)
retn: function (object) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("lazyLoadDBfetch", function (key, file, compressed, hook) 
args: NULL, <environment>)
retn: function (key, file, compressed, hook) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("list", function (...) 
args: NULL, <environment>)
retn: function (...) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("missing", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("nargs", function () 
args: NULL, <environment>)
retn: function () 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("nzchar", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("oldClass", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("oldClass<-", function (x, value) 
args: NULL, <environment>)
retn: function (x, value) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("on.exit", function (expr = NULL, add = FALSE) 
args: NULL, <environment>)
retn: function (expr = NULL, add = FALSE) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("pos.to.env", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("proc.time", function () 
args: NULL, <environment>)
retn: function () 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("quote", function (expr) 
args: NULL, <environment>)
retn: function (expr) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("retracemem", function (x, previous = NULL) 
args: NULL, <environment>)
retn: function (x, previous = NULL) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("seq_along", function (along.with) 
args: NULL, <environment>)
retn: function (along.with) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("seq_len", function (length.out) 
args: NULL, <environment>)
retn: function (length.out) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("standardGeneric", function (f, fdef) 
args: NULL, <environment>)
retn: function (f, fdef) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("storage.mode<-", function (x, value) 
args: NULL, <environment>)
retn: function (x, value) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("substitute", function (expr, env) 
args: NULL, <environment>)
retn: function (expr, env) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("switch", function (EXPR, ...) 
args: NULL, <environment>)
retn: function (EXPR, ...) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("tracemem", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("unclass", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

func: quote(set)
body: function (x, value, env) 
body: .Internal(assign(x, value, env, FALSE))
args: list("untracemem", function (x) 
args: NULL, <environment>)
retn: function (x) 
retn: NULL

