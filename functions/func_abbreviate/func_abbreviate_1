func: quote(abbreviate)
body: function (names.arg, minlength = 4L, use.classes = TRUE, dot = FALSE, strict = FALSE, method = c("left.kept", "both.sides")) 
body: {
body:     if (minlength <= 0L) 
body:         return(rep.int("", length(names.arg)))
body:     names.arg <- sub("^ +", "", sub(" +$", "", as.character(names.arg)))
body:     dups <- duplicated(names.arg)
body:     old <- names.arg
body:     if (any(dups)) 
body:         names.arg <- names.arg[!dups]
body:     x <- names.arg
body:     if (strict) {
body:         x[] <- .Internal(abbreviate(x, minlength, use.classes))
body:     }
body:     else {
body:         method <- match.arg(method)
body:         if (method == "both.sides") 
body:             chRev <- function(x) sapply(lapply(strsplit(x, NULL), rev), paste, collapse = "")
body:         dup2 <- rep.int(TRUE, length(names.arg))
body:         these <- names.arg
body:         repeat {
body:             ans <- .Internal(abbreviate(these, minlength, use.classes))
body:             x[dup2] <- ans
body:             if (!any(dup2 <- duplicated(x))) 
body:                 break
body:             if (method == "both.sides") {
body:                 x[dup2] <- chRev(.Internal(abbreviate(chRev(names.arg[dup2]), minlength, use.classes)))
body:                 if (!any(dup2 <- duplicated(x))) 
body:                   break
body:             }
body:             minlength <- minlength + 1
body:             dup2 <- dup2 | match(x, x[dup2], 0L)
body:             these <- names.arg[dup2]
body:         }
body:     }
body:     if (any(dups)) 
body:         x <- x[match(old, names.arg)]
body:     if (dot) {
body:         chgd <- x != old
body:         x[chgd] <- paste0(x[chgd], ".")
body:     }
body:     names(x) <- old
body:     x
body: }
args: list("NULL", 6)
retn: structure("NULL", .Names = "NULL")

