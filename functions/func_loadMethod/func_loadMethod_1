func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fun, envir = environment(fun), value) 
args: {
args:     if (is.expression(value)) {
args:         if (length(value) > 1L) warning("using the first element of 'value' of type \"expression\"")
args:         value <- value[[1L]]
args:     }
args:     as.function(c(as.list(formals(fun)), list(value)), envir)
args: }, target = structure("function", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "body<-", <environment>)
retn: structure(function (fun, envir = environment(fun), value) 
retn: {
retn:     if (is.expression(value)) {
retn:         if (length(value) > 1L) 
retn:             warning("using the first element of 'value' of type \"expression\"")
retn:         value <- value[[1L]]
retn:     }
retn:     as.function(c(as.list(formals(fun)), list(value)), envir)
retn: }, target = structure("function", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (.Object, ...) 
args: {
args:     .MlistDeprecated()
args:     callNextMethod()
args: }, target = structure("MethodsList", .Names = ".Object", package = "methods", class = structure("signature", package = "methods")), defined = structure("MethodsList", .Names = ".Object", package = "methods", class = structure("signature", package = "methods")), generic = structure("initialize", package = "methods"), class = structure("MethodDefinition", package = "methods")), "initialize", <environment>)
retn: structure(function (.Object, ...) 
retn: {
retn:     .MlistDeprecated()
retn:     callNextMethod()
retn: }, target = structure("MethodsList", .Names = ".Object", package = "methods", class = structure("signature", package = "methods")), defined = structure("MethodsList", .Names = ".Object", package = "methods", class = structure("signature", package = "methods")), generic = structure("initialize", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (method, f = "<unknown>", mlist, optional = FALSE, envir) 
args: {
args:     .findNextFromTable(method, f, optional, envir)
args: }, target = structure("MethodDefinition", .Names = "method", package = "methods", class = structure("signature", package = "methods")), defined = structure("MethodDefinition", .Names = "method", package = "methods", class = structure("signature", package = "methods")), generic = structure("addNextMethod", package = "methods"), class = structure("MethodDefinition", package = "methods")), "addNextMethod", <environment>)
retn: structure(function (method, f = "<unknown>", mlist, optional = FALSE, envir) 
retn: {
retn:     .findNextFromTable(method, f, optional, envir)
retn: }, target = structure("MethodDefinition", .Names = "method", package = "methods", class = structure("signature", package = "methods")), defined = structure("MethodDefinition", .Names = "method", package = "methods", class = structure("signature", package = "methods")), generic = structure("addNextMethod", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: <arguments too long, ignored>
retn: <arguments too long, ignored>

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (.Object, ...) 
args: {
args:     .local <- function (.Object, functionDef, ...) 
args:     {
args:         if (nargs() < 2) .Object else if (missing(functionDef)) .MakeSignature(.Object, , list(...)) else if (!is(functionDef, "function")) .MakeSignature(.Object, , list(functionDef, ...)) else .MakeSignature(.Object, functionDef, list(...))
args:     }
args:     .local(.Object, ...)
args: }, target = structure("signature", .Names = ".Object", package = "methods", class = structure("signature", package = "methods")), defined = structure("signature", .Names = ".Object", package = "methods", class = structure("signature", package = "methods")), generic = structure("initialize", package = "methods"), class = structure("MethodDefinition", package = "methods")), "initialize", <environment>)
retn: <arguments too long, ignored>

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fun, envir = environment(fun), value) 
args: {
args:     if (is.expression(value)) {
args:         if (length(value) > 1L) warning("using the first element of 'value' of type \"expression\"")
args:         value <- value[[1L]]
args:     }
args:     as.function(c(as.list(formals(fun)), list(value)), envir)
args: }, target = structure("missing", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "body<-", <environment>)
retn: structure(function (fun, envir = environment(fun), value) 
retn: {
retn:     if (is.expression(value)) {
retn:         if (length(value) > 1L) 
retn:             warning("using the first element of 'value' of type \"expression\"")
retn:         value <- value[[1L]]
retn:     }
retn:     as.function(c(as.list(formals(fun)), list(value)), envir)
retn: }, target = structure("missing", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fun, envir = environment(fun), value) 
args: {
args:     if (is.expression(value)) {
args:         if (length(value) > 1L) warning("using the first element of 'value' of type \"expression\"")
args:         value <- value[[1L]]
args:     }
args:     as.function(c(as.list(formals(fun)), list(value)), envir)
args: }, target = structure("NULL", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "body<-", <environment>)
retn: structure(function (fun, envir = environment(fun), value) 
retn: {
retn:     if (is.expression(value)) {
retn:         if (length(value) > 1L) 
retn:             warning("using the first element of 'value' of type \"expression\"")
retn:         value <- value[[1L]]
retn:     }
retn:     as.function(c(as.list(formals(fun)), list(value)), envir)
retn: }, target = structure("NULL", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fun, envir = environment(fun), value) 
args: {
args:     if (is.expression(value)) {
args:         if (length(value) > 1L) warning("using the first element of 'value' of type \"expression\"")
args:         value <- value[[1L]]
args:     }
args:     as.function(c(as.list(formals(fun)), list(value)), envir)
args: }, target = structure("list", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "body<-", <environment>)
retn: structure(function (fun, envir = environment(fun), value) 
retn: {
retn:     if (is.expression(value)) {
retn:         if (length(value) > 1L) 
retn:             warning("using the first element of 'value' of type \"expression\"")
retn:         value <- value[[1L]]
retn:     }
retn:     as.function(c(as.list(formals(fun)), list(value)), envir)
retn: }, target = structure("list", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fun, envir = environment(fun), value) 
args: {
args:     if (is.expression(value)) {
args:         if (length(value) > 1L) warning("using the first element of 'value' of type \"expression\"")
args:         value <- value[[1L]]
args:     }
args:     as.function(c(as.list(formals(fun)), list(value)), envir)
args: }, target = structure("logical", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "body<-", <environment>)
retn: structure(function (fun, envir = environment(fun), value) 
retn: {
retn:     if (is.expression(value)) {
retn:         if (length(value) > 1L) 
retn:             warning("using the first element of 'value' of type \"expression\"")
retn:         value <- value[[1L]]
retn:     }
retn:     as.function(c(as.list(formals(fun)), list(value)), envir)
retn: }, target = structure("logical", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), generic = structure("body<-", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("missing", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("missing", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("NULL", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("NULL", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("missing", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("missing", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("NULL", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("NULL", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("list", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("list", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("logical", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("logical", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("list", "list"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("list", "list"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.cbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("logical", "logical"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "cbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.cbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("logical", "logical"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("cbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("character", "character"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("character", "character"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("matrix", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("matrix", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
args: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("missing", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods")), "kronecker", <environment>)
retn: structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
retn: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("missing", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
args: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods")), "kronecker", <environment>)
retn: structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
retn: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
args: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("list", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods")), "kronecker", <environment>)
retn: structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
retn: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("list", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
args: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("logical", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods")), "kronecker", <environment>)
retn: structure(function (X, Y, FUN = "*", make.dimnames = FALSE, ...) 
retn: .kronecker(X, Y, FUN = FUN, make.dimnames = make.dimnames, ...), target = structure("logical", class = structure("signature", package = "methods"), .Names = "X", package = "methods"), defined = structure("ANY", .Names = "X", package = "methods", class = structure("signature", package = "methods")), generic = structure("kronecker", package = "base"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("MethodsList", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("MethodsList", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: {
args:     if (!.identC(class(object), "classRepresentation")) cat("Extended class definition (", classLabel(class(object)), ")\n")
args:     printClassRepresentation(object)
args: }, target = structure("classRepresentation", .Names = "object", package = "methods", class = structure("signature", package = "methods")), defined = structure("classRepresentation", .Names = "object", package = "methods", class = structure("signature", package = "methods")), generic = structure("show", package = "methods"), class = structure("MethodDefinition", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: {
retn:     if (!.identC(class(object), "classRepresentation")) 
retn:         cat("Extended class definition (", classLabel(class(object)), ")\n")
retn:     printClassRepresentation(object)
retn: }, target = structure("classRepresentation", .Names = "object", package = "methods", class = structure("signature", package = "methods")), defined = structure("classRepresentation", .Names = "object", package = "methods", class = structure("signature", package = "methods")), generic = structure("show", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("classPrototypeDef", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("classPrototypeDef", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("S4", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("S4", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("missing", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("missing", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("NULL", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("NULL", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("missing", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("missing", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("NULL", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("NULL", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("list", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("list", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x)
args:     .local(x, y, ...)
args: }, target = structure(c("logical", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x)
retn:     .local(x, y, ...)
retn: }, target = structure(c("logical", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "missing"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("list", "list"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("list", "list"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: {
args:     .local <- function (x, y) 
args:     .__H__.rbind(deparse.level = 0, x, y)
args:     .local(x, y, ...)
args: }, target = structure(c("logical", "logical"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods")), "rbind2", <environment>)
retn: structure(function (x, y, ...) 
retn: {
retn:     .local <- function (x, y) 
retn:     .__H__.rbind(deparse.level = 0, x, y)
retn:     .local(x, y, ...)
retn: }, target = structure(c("logical", "logical"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("rbind2", package = "methods"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: showDefault(object, FALSE), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "show", <environment>)
retn: structure(function (object) 
retn: showDefault(object, FALSE), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("show", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: {
args:     list()
args: }, target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "slotsFromS3", <environment>)
retn: structure(function (object) 
retn: {
retn:     list()
retn: }, target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: {
args:     list()
args: }, target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "slotsFromS3", <environment>)
retn: structure(function (object) 
retn: {
retn:     list()
retn: }, target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: {
args:     list()
args: }, target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "slotsFromS3", <environment>)
retn: structure(function (object) 
retn: {
retn:     list()
retn: }, target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object) 
args: {
args:     list()
args: }, target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), "slotsFromS3", <environment>)
retn: structure(function (object) 
retn: {
retn:     list()
retn: }, target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("slotsFromS3", package = "methods"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fun, envir = environment(fun), value) 
args: {
args:     ff <- as(fun, "function")
args:     body(ff, envir = envir) <- value
args:     fun@.Data <- ff
args:     fun
args: }, target = structure("derivedDefaultMethod", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("MethodDefinition", .Names = "fun", package = "methods", class = structure("signature", package = "methods")), generic = structure("body<-", package = "base"), class = structure("MethodDefinition", package = "methods")), "body<-", <environment>)
retn: structure(function (fun, envir = environment(fun), value) 
retn: {
retn:     ff <- as(fun, "function")
retn:     body(ff, envir = envir) <- value
retn:     fun@.Data <- ff
retn:     fun
retn: }, target = structure("derivedDefaultMethod", class = structure("signature", package = "methods"), .Names = "fun", package = "methods"), defined = structure("MethodDefinition", .Names = "fun", package = "methods", class = structure("signature", package = "methods")), generic = structure("body<-", package = "base"), class = structure("MethodDefinition", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ..., k = 2) 
args: UseMethod("AIC"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "AIC", <environment>)
retn: structure(function (object, ..., k = 2) 
retn: UseMethod("AIC"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ..., k = 2) 
args: UseMethod("AIC"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "AIC", <environment>)
retn: structure(function (object, ..., k = 2) 
retn: UseMethod("AIC"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("logLik"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "logLik", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("logLik"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ..., k = 2) 
args: UseMethod("AIC"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "AIC", <environment>)
retn: structure(function (object, ..., k = 2) 
retn: UseMethod("AIC"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("logLik"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "logLik", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("logLik"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ..., k = 2) 
args: UseMethod("AIC"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "AIC", <environment>)
retn: structure(function (object, ..., k = 2) 
retn: UseMethod("AIC"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("AIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("logLik"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "logLik", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("logLik"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("BIC"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "BIC", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("BIC"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("BIC"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "BIC", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("BIC"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("BIC"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "BIC", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("BIC"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("BIC"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "BIC", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("BIC"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("BIC", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("coef"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "coef", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("coef"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("coef"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "coef", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("coef"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("coef"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "coef", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("coef"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("coef"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "coef", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("coef"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("coef", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, parm, level = 0.95, ...) 
args: UseMethod("confint"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "confint", <environment>)
retn: structure(function (object, parm, level = 0.95, ...) 
retn: UseMethod("confint"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, parm, level = 0.95, ...) 
args: UseMethod("confint"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "confint", <environment>)
retn: structure(function (object, parm, level = 0.95, ...) 
retn: UseMethod("confint"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, parm, level = 0.95, ...) 
args: UseMethod("confint"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "confint", <environment>)
retn: structure(function (object, parm, level = 0.95, ...) 
retn: UseMethod("confint"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, parm, level = 0.95, ...) 
args: UseMethod("confint"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "confint", <environment>)
retn: structure(function (object, parm, level = 0.95, ...) 
retn: UseMethod("confint"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("confint", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("logLik"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "logLik", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("logLik"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("logLik", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("nobs"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "nobs", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("nobs"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("nobs"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "nobs", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("nobs"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("nobs"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "nobs", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("nobs"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("nobs"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "nobs", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("nobs"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("nobs", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("missing", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("missing", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("NULL", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("NULL", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("missing", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("missing", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("NULL", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("NULL", "NULL"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("list", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("list", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("logical", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("logical", "missing"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("list", "list"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("list", "list"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (x, y, ...) 
args: UseMethod("plot"), target = structure(c("logical", "logical"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods")), "plot", <environment>)
retn: structure(function (x, y, ...) 
retn: UseMethod("plot"), target = structure(c("logical", "logical"), class = structure("signature", package = "methods"), .Names = c("x", "y"), package = c("methods", "methods")), defined = structure(c("ANY", "ANY"), .Names = c("x", "y"), package = c("methods", "methods"), class = structure("signature", package = "methods")), generic = structure("plot", package = "graphics"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fitted, ...) 
args: UseMethod("profile"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "profile", <environment>)
retn: structure(function (fitted, ...) 
retn: UseMethod("profile"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fitted, ...) 
args: UseMethod("profile"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "profile", <environment>)
retn: structure(function (fitted, ...) 
retn: UseMethod("profile"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fitted, ...) 
args: UseMethod("profile"), target = structure("list", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "profile", <environment>)
retn: structure(function (fitted, ...) 
retn: UseMethod("profile"), target = structure("list", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (fitted, ...) 
args: UseMethod("profile"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "profile", <environment>)
retn: structure(function (fitted, ...) 
retn: UseMethod("profile"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "fitted", package = "methods"), generic = structure("profile", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("summary"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "summary", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("summary"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("summary"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "summary", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("summary"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("summary"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "summary", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("summary"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("summary"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods")), "summary", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("summary"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("summary", package = "base"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("update"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "update", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("update"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("update"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "update", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("update"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("update"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "update", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("update"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("update"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "update", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("update"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("update", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("vcov"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "vcov", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("vcov"), target = structure("missing", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("vcov"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "vcov", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("vcov"), target = structure("NULL", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("vcov"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "vcov", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("vcov"), target = structure("list", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

func: quote(loadMethod)
body: structure(function (method, fname, envir) 
body: standardGeneric("loadMethod"), generic = structure("loadMethod", package = "methods"), package = "methods", group = list(), valueClass = character(0), signature = c("method", "fname", "envir"), default = structure(function (method, fname, envir) 
body: method, target = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "method", package = "methods"), generic = structure("loadMethod", package = "methods"), class = structure("derivedDefaultMethod", package = "methods")), skeleton = quote((function (method, fname, envir) 
body: method)(method, fname, envir)), class = structure("standardGeneric", package = "methods"))
args: list(structure(function (object, ...) 
args: UseMethod("vcov"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods")), "vcov", <environment>)
retn: structure(function (object, ...) 
retn: UseMethod("vcov"), target = structure("logical", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), defined = structure("ANY", class = structure("signature", package = "methods"), .Names = "object", package = "methods"), generic = structure("vcov", package = "stats"), class = structure("derivedDefaultMethod", package = "methods"))

