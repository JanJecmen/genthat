func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(integer(0))
retn: structure(integer(0), .Label = character(0), class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(structure(integer(0), .Label = character(0), class = "factor"))
retn: structure(integer(0), .Label = character(0), class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(NULL)
retn: structure(integer(0), .Label = character(0), class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(1L)
retn: structure(1L, .Label = "1", class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(structure(1L, .Label = "1", class = "factor"))
retn: structure(1L, .Label = "1", class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(3.14159265358979)
retn: structure(1L, .Label = "3.14159265358979", class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(structure(1L, .Label = "3.14159265358979", class = "factor"))
retn: structure(1L, .Label = "3.14159265358979", class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list("1.3")
retn: structure(1L, .Label = "1.3", class = "factor")

func: quote(as.factor)
body: function (x) 
body: if (is.factor(x)) x else factor(x)
args: list(structure(1L, .Label = "1.3", class = "factor"))
retn: structure(1L, .Label = "1.3", class = "factor")

