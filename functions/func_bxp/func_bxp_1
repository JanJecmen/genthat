func: quote(bxp)
body: function (z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE, notch.frac = 0.5, log = "", border = par("fg"), pars = NULL, frame.plot = axes, horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL, ...) 
body: {
body:     pars <- c(list(...), pars)
body:     pars <- pars[unique(names(pars))]
body:     bplt <- function(x, wid, stats, out, conf, notch, xlog, i) {
body:         ok <- TRUE
body:         if (!any(is.na(stats))) {
body:             xP <- if (xlog) 
body:                 function(x, w) x * exp(w)
body:             else function(x, w) x + w
body:             wid <- wid/2
body:             if (notch) {
body:                 ok <- stats[2L] <= conf[1L] && conf[2L] <= stats[4L]
body:                 xx <- xP(x, wid * c(-1, 1, 1, notch.frac, 1, 1, -1, -1, -notch.frac, -1))
body:                 yy <- c(stats[c(2, 2)], conf[1L], stats[3L], conf[2L], stats[c(4, 4)], conf[2L], stats[3L], conf[1L])
body:             }
body:             else {
body:                 xx <- xP(x, wid * c(-1, 1, 1, -1))
body:                 yy <- stats[c(2, 2, 4, 4)]
body:             }
body:             if (!notch) 
body:                 notch.frac <- 1
body:             wntch <- notch.frac * wid
body:             xypolygon(xx, yy, lty = "blank", col = boxfill[i])
body:             xysegments(xP(x, -wntch), stats[3L], xP(x, +wntch), stats[3L], lty = medlty[i], lwd = medlwd[i], col = medcol[i], lend = 1)
body:             xypoints(x, stats[3L], pch = medpch[i], cex = medcex[i], col = medcol[i], bg = medbg[i])
body:             xysegments(rep.int(x, 2), stats[c(1, 5)], rep.int(x, 2), stats[c(2, 4)], lty = whisklty[i], lwd = whisklwd[i], col = whiskcol[i])
body:             xysegments(rep.int(xP(x, -wid * staplewex[i]), 2), stats[c(1, 5)], rep.int(xP(x, +wid * staplewex[i]), 2), stats[c(1, 5)], lty = staplelty[i], lwd = staplelwd[i], col = staplecol[i])
body:             xypolygon(xx, yy, lty = boxlty[i], lwd = boxlwd[i], border = boxcol[i])
body:             if ((nout <- length(out))) {
body:                 xysegments(rep(x - wid * outwex, nout), out, rep(x + wid * outwex, nout), out, lty = outlty[i], lwd = outlwd[i], col = outcol[i])
body:                 xypoints(rep.int(x, nout), out, pch = outpch[i], lwd = outlwd[i], cex = outcex[i], col = outcol[i], bg = outbg[i])
body:             }
body:             if (any(inf <- !is.finite(out))) {
body:                 warning(sprintf(ngettext(length(unique(out[inf])), "Outlier (%s) in boxplot %d is not drawn", "Outliers (%s) in boxplot %d are not drawn"), paste(unique(out[inf]), collapse = ", "), i), domain = NA)
body:             }
body:         }
body:         return(ok)
body:     }
body:     if (!is.list(z) || 0L == (n <- length(z$n))) 
body:         stop("invalid first argument")
body:     if (is.null(at)) 
body:         at <- 1L:n
body:     else if (length(at) != n) 
body:         stop(gettextf("'at' must have same length as 'z$n', i.e. %d", n), domain = NA)
body:     if (is.null(z$out)) 
body:         z$out <- numeric()
body:     if (is.null(z$group) || !outline) 
body:         z$group <- integer()
body:     if (is.null(pars$ylim)) 
body:         ylim <- range(z$stats[is.finite(z$stats)], if (outline) z$out[is.finite(z$out)], if (notch) z$conf[is.finite(z$conf)])
body:     else {
body:         ylim <- pars$ylim
body:         pars$ylim <- NULL
body:     }
body:     if (length(border) == 0L) 
body:         border <- par("fg")
body:     dev.hold()
body:     on.exit(dev.flush())
body:     if (!add) {
body:         if (is.null(pars$xlim)) 
body:             xlim <- range(at, finite = TRUE) + c(-0.5, 0.5)
body:         else {
body:             xlim <- pars$xlim
body:             pars$xlim <- NULL
body:         }
body:         plot.new()
body:         if (horizontal) 
body:             plot.window(ylim = xlim, xlim = ylim, log = log, xaxs = pars$yaxs)
body:         else plot.window(xlim = xlim, ylim = ylim, log = log, yaxs = pars$yaxs)
body:     }
body:     xlog <- (par("ylog") && horizontal) || (par("xlog") && !horizontal)
body:     pcycle <- function(p, def1, def2 = NULL) rep(if (length(p)) p else if (length(def1)) def1 else def2, length.out = n)
body:     p <- function(sym) pars[[sym, exact = TRUE]]
body:     boxlty <- pcycle(pars$boxlty, p("lty"), par("lty"))
body:     boxlwd <- pcycle(pars$boxlwd, p("lwd"), par("lwd"))
body:     boxcol <- pcycle(pars$boxcol, border)
body:     boxfill <- pcycle(pars$boxfill, par("bg"))
body:     boxwex <- pcycle(pars$boxwex, 0.8 * {
body:         if (n <= 1) 
body:             1
body:         else stats::quantile(diff(sort(if (xlog) 
body:             log(at)
body:         else at)), 0.1)
body:     })
body:     medlty <- pcycle(pars$medlty, p("lty"), par("lty"))
body:     medlwd <- pcycle(pars$medlwd, 3 * p("lwd"), 3 * par("lwd"))
body:     medpch <- pcycle(pars$medpch, NA_integer_)
body:     medcex <- pcycle(pars$medcex, p("cex"), par("cex"))
body:     medcol <- pcycle(pars$medcol, border)
body:     medbg <- pcycle(pars$medbg, p("bg"), par("bg"))
body:     whisklty <- pcycle(pars$whisklty, p("lty"), "dashed")
body:     whisklwd <- pcycle(pars$whisklwd, p("lwd"), par("lwd"))
body:     whiskcol <- pcycle(pars$whiskcol, border)
body:     staplelty <- pcycle(pars$staplelty, p("lty"), par("lty"))
body:     staplelwd <- pcycle(pars$staplelwd, p("lwd"), par("lwd"))
body:     staplecol <- pcycle(pars$staplecol, border)
body:     staplewex <- pcycle(pars$staplewex, 0.5)
body:     outlty <- pcycle(pars$outlty, "blank")
body:     outlwd <- pcycle(pars$outlwd, p("lwd"), par("lwd"))
body:     outpch <- pcycle(pars$outpch, p("pch"), par("pch"))
body:     outcex <- pcycle(pars$outcex, p("cex"), par("cex"))
body:     outcol <- pcycle(pars$outcol, border)
body:     outbg <- pcycle(pars$outbg, p("bg"), par("bg"))
body:     outwex <- pcycle(pars$outwex, 0.5)
body:     width <- if (!is.null(width)) {
body:         if (length(width) != n | any(is.na(width)) | any(width <= 0)) 
body:             stop("invalid boxplot widths")
body:         boxwex * width/max(width)
body:     }
body:     else if (varwidth) 
body:         boxwex * sqrt(z$n/max(z$n))
body:     else if (n == 1) 
body:         0.5 * boxwex
body:     else rep.int(boxwex, n)
body:     if (horizontal) {
body:         xypoints <- function(x, y, ...) points(y, x, ...)
body:         xypolygon <- function(x, y, ...) polygon(y, x, ...)
body:         xysegments <- function(x0, y0, x1, y1, ...) segments(y0, x0, y1, x1, ...)
body:     }
body:     else {
body:         xypoints <- points
body:         xypolygon <- polygon
body:         xysegments <- segments
body:     }
body:     ok <- TRUE
body:     for (i in 1L:n) ok <- ok & bplt(at[i], wid = width[i], stats = z$stats[, i], out = z$out[z$group == i], conf = z$conf[, i], notch = notch, xlog = xlog, i = i)
body:     if (!ok) 
body:         warning("some notches went outside hinges ('box'): maybe set notch=FALSE")
body:     axes <- is.null(pars$axes)
body:     if (!axes) {
body:         axes <- pars$axes
body:         pars$axes <- NULL
body:     }
body:     if (axes) {
body:         ax.pars <- pars[names(pars) %in% c("xaxt", "yaxt", "xaxp", "yaxp", "las", "cex.axis", "col.axis", "format")]
body:         if (is.null(show.names)) 
body:             show.names <- n > 1
body:         if (show.names) 
body:             do.call("axis", c(list(side = 1 + horizontal, at = at, labels = z$names), ax.pars))
body:         do.call("Axis", c(list(x = z$stats, side = 2 - horizontal), ax.pars))
body:     }
body:     do.call("title", pars[names(pars) %in% c("main", "cex.main", "col.main", "sub", "cex.sub", "col.sub", "xlab", "ylab", "cex.lab", "col.lab")])
body:     if (frame.plot) 
body:         box()
body:     invisible(at)
body: }
args: list(structure(list(stats = structure(c(80, 80.02, 80.03, 80.04, 80.05, 79.94, 79.96, 79.97, 80, 80.03), .Dim = c(5L, 2L)), n = c(13, 8), conf = structure(c(80.0212357368996, 80.0387642631004, 79.9476554257145, 79.9923445742855), .Dim = c(2L, 2L)), out = c(79.98, 79.97), group = c(1, 1), names = c("1", "2")), .Names = c("stats", "n", "conf", "out", "group", "names")), notch = FALSE, width = NULL, varwidth = FALSE, log = "", border = "black", pars = structure(list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5), .Names = c("boxwex", 
args: "staplewex", "outwex")), outline = TRUE, horizontal = FALSE, add = FALSE, at = NULL)
retn: 1:2

func: quote(bxp)
body: function (z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE, notch.frac = 0.5, log = "", border = par("fg"), pars = NULL, frame.plot = axes, horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL, ...) 
body: {
body:     pars <- c(list(...), pars)
body:     pars <- pars[unique(names(pars))]
body:     bplt <- function(x, wid, stats, out, conf, notch, xlog, i) {
body:         ok <- TRUE
body:         if (!any(is.na(stats))) {
body:             xP <- if (xlog) 
body:                 function(x, w) x * exp(w)
body:             else function(x, w) x + w
body:             wid <- wid/2
body:             if (notch) {
body:                 ok <- stats[2L] <= conf[1L] && conf[2L] <= stats[4L]
body:                 xx <- xP(x, wid * c(-1, 1, 1, notch.frac, 1, 1, -1, -1, -notch.frac, -1))
body:                 yy <- c(stats[c(2, 2)], conf[1L], stats[3L], conf[2L], stats[c(4, 4)], conf[2L], stats[3L], conf[1L])
body:             }
body:             else {
body:                 xx <- xP(x, wid * c(-1, 1, 1, -1))
body:                 yy <- stats[c(2, 2, 4, 4)]
body:             }
body:             if (!notch) 
body:                 notch.frac <- 1
body:             wntch <- notch.frac * wid
body:             xypolygon(xx, yy, lty = "blank", col = boxfill[i])
body:             xysegments(xP(x, -wntch), stats[3L], xP(x, +wntch), stats[3L], lty = medlty[i], lwd = medlwd[i], col = medcol[i], lend = 1)
body:             xypoints(x, stats[3L], pch = medpch[i], cex = medcex[i], col = medcol[i], bg = medbg[i])
body:             xysegments(rep.int(x, 2), stats[c(1, 5)], rep.int(x, 2), stats[c(2, 4)], lty = whisklty[i], lwd = whisklwd[i], col = whiskcol[i])
body:             xysegments(rep.int(xP(x, -wid * staplewex[i]), 2), stats[c(1, 5)], rep.int(xP(x, +wid * staplewex[i]), 2), stats[c(1, 5)], lty = staplelty[i], lwd = staplelwd[i], col = staplecol[i])
body:             xypolygon(xx, yy, lty = boxlty[i], lwd = boxlwd[i], border = boxcol[i])
body:             if ((nout <- length(out))) {
body:                 xysegments(rep(x - wid * outwex, nout), out, rep(x + wid * outwex, nout), out, lty = outlty[i], lwd = outlwd[i], col = outcol[i])
body:                 xypoints(rep.int(x, nout), out, pch = outpch[i], lwd = outlwd[i], cex = outcex[i], col = outcol[i], bg = outbg[i])
body:             }
body:             if (any(inf <- !is.finite(out))) {
body:                 warning(sprintf(ngettext(length(unique(out[inf])), "Outlier (%s) in boxplot %d is not drawn", "Outliers (%s) in boxplot %d are not drawn"), paste(unique(out[inf]), collapse = ", "), i), domain = NA)
body:             }
body:         }
body:         return(ok)
body:     }
body:     if (!is.list(z) || 0L == (n <- length(z$n))) 
body:         stop("invalid first argument")
body:     if (is.null(at)) 
body:         at <- 1L:n
body:     else if (length(at) != n) 
body:         stop(gettextf("'at' must have same length as 'z$n', i.e. %d", n), domain = NA)
body:     if (is.null(z$out)) 
body:         z$out <- numeric()
body:     if (is.null(z$group) || !outline) 
body:         z$group <- integer()
body:     if (is.null(pars$ylim)) 
body:         ylim <- range(z$stats[is.finite(z$stats)], if (outline) z$out[is.finite(z$out)], if (notch) z$conf[is.finite(z$conf)])
body:     else {
body:         ylim <- pars$ylim
body:         pars$ylim <- NULL
body:     }
body:     if (length(border) == 0L) 
body:         border <- par("fg")
body:     dev.hold()
body:     on.exit(dev.flush())
body:     if (!add) {
body:         if (is.null(pars$xlim)) 
body:             xlim <- range(at, finite = TRUE) + c(-0.5, 0.5)
body:         else {
body:             xlim <- pars$xlim
body:             pars$xlim <- NULL
body:         }
body:         plot.new()
body:         if (horizontal) 
body:             plot.window(ylim = xlim, xlim = ylim, log = log, xaxs = pars$yaxs)
body:         else plot.window(xlim = xlim, ylim = ylim, log = log, yaxs = pars$yaxs)
body:     }
body:     xlog <- (par("ylog") && horizontal) || (par("xlog") && !horizontal)
body:     pcycle <- function(p, def1, def2 = NULL) rep(if (length(p)) p else if (length(def1)) def1 else def2, length.out = n)
body:     p <- function(sym) pars[[sym, exact = TRUE]]
body:     boxlty <- pcycle(pars$boxlty, p("lty"), par("lty"))
body:     boxlwd <- pcycle(pars$boxlwd, p("lwd"), par("lwd"))
body:     boxcol <- pcycle(pars$boxcol, border)
body:     boxfill <- pcycle(pars$boxfill, par("bg"))
body:     boxwex <- pcycle(pars$boxwex, 0.8 * {
body:         if (n <= 1) 
body:             1
body:         else stats::quantile(diff(sort(if (xlog) 
body:             log(at)
body:         else at)), 0.1)
body:     })
body:     medlty <- pcycle(pars$medlty, p("lty"), par("lty"))
body:     medlwd <- pcycle(pars$medlwd, 3 * p("lwd"), 3 * par("lwd"))
body:     medpch <- pcycle(pars$medpch, NA_integer_)
body:     medcex <- pcycle(pars$medcex, p("cex"), par("cex"))
body:     medcol <- pcycle(pars$medcol, border)
body:     medbg <- pcycle(pars$medbg, p("bg"), par("bg"))
body:     whisklty <- pcycle(pars$whisklty, p("lty"), "dashed")
body:     whisklwd <- pcycle(pars$whisklwd, p("lwd"), par("lwd"))
body:     whiskcol <- pcycle(pars$whiskcol, border)
body:     staplelty <- pcycle(pars$staplelty, p("lty"), par("lty"))
body:     staplelwd <- pcycle(pars$staplelwd, p("lwd"), par("lwd"))
body:     staplecol <- pcycle(pars$staplecol, border)
body:     staplewex <- pcycle(pars$staplewex, 0.5)
body:     outlty <- pcycle(pars$outlty, "blank")
body:     outlwd <- pcycle(pars$outlwd, p("lwd"), par("lwd"))
body:     outpch <- pcycle(pars$outpch, p("pch"), par("pch"))
body:     outcex <- pcycle(pars$outcex, p("cex"), par("cex"))
body:     outcol <- pcycle(pars$outcol, border)
body:     outbg <- pcycle(pars$outbg, p("bg"), par("bg"))
body:     outwex <- pcycle(pars$outwex, 0.5)
body:     width <- if (!is.null(width)) {
body:         if (length(width) != n | any(is.na(width)) | any(width <= 0)) 
body:             stop("invalid boxplot widths")
body:         boxwex * width/max(width)
body:     }
body:     else if (varwidth) 
body:         boxwex * sqrt(z$n/max(z$n))
body:     else if (n == 1) 
body:         0.5 * boxwex
body:     else rep.int(boxwex, n)
body:     if (horizontal) {
body:         xypoints <- function(x, y, ...) points(y, x, ...)
body:         xypolygon <- function(x, y, ...) polygon(y, x, ...)
body:         xysegments <- function(x0, y0, x1, y1, ...) segments(y0, x0, y1, x1, ...)
body:     }
body:     else {
body:         xypoints <- points
body:         xypolygon <- polygon
body:         xysegments <- segments
body:     }
body:     ok <- TRUE
body:     for (i in 1L:n) ok <- ok & bplt(at[i], wid = width[i], stats = z$stats[, i], out = z$out[z$group == i], conf = z$conf[, i], notch = notch, xlog = xlog, i = i)
body:     if (!ok) 
body:         warning("some notches went outside hinges ('box'): maybe set notch=FALSE")
body:     axes <- is.null(pars$axes)
body:     if (!axes) {
body:         axes <- pars$axes
body:         pars$axes <- NULL
body:     }
body:     if (axes) {
body:         ax.pars <- pars[names(pars) %in% c("xaxt", "yaxt", "xaxp", "yaxp", "las", "cex.axis", "col.axis", "format")]
body:         if (is.null(show.names)) 
body:             show.names <- n > 1
body:         if (show.names) 
body:             do.call("axis", c(list(side = 1 + horizontal, at = at, labels = z$names), ax.pars))
body:         do.call("Axis", c(list(x = z$stats, side = 2 - horizontal), ax.pars))
body:     }
body:     do.call("title", pars[names(pars) %in% c("main", "cex.main", "col.main", "sub", "cex.sub", "col.sub", "xlab", "ylab", "cex.lab", "col.lab")])
body:     if (frame.plot) 
body:         box()
body:     invisible(at)
body: }
args: list(structure(list(stats = structure(c(740, 850, 940, 980, 1070, 760, 800, 845, 890, 960, 840, 840, 855, 880, 910, 720, 765, 815, 870, 920, 740, 805, 810, 870, 950), .Dim = c(5L, 5L), class = structure("integer", .Names = "1")), n = c(20, 20, 20, 20, 20), conf = structure(c(894.071163742154, 985.928836257846, 813.203113359953, 876.796886640047, 840.868050382201, 869.131949617799, 777.903632253278, 852.096367746722, 787.035581871077, 832.964418128923), .Dim = c(2L, 5L)), out = c(650, 720, 720, 620, 
args: 970, 950), group = c(1, 3, 3, 3, 3, 3), names = c("1", "2", "3", "4", "5")), .Names = c("stats", "n", "conf", "out", "group", "names")), notch = FALSE, width = NULL, varwidth = FALSE, log = "", border = "black", pars = structure(list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5), .Names = c("boxwex", "staplewex", "outwex")), outline = TRUE, horizontal = FALSE, add = FALSE, at = NULL, main = "Speed of Light Data", xlab = "Experiment No.")
retn: 1:5

func: quote(bxp)
body: function (z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE, notch.frac = 0.5, log = "", border = par("fg"), pars = NULL, frame.plot = axes, horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL, ...) 
body: {
body:     pars <- c(list(...), pars)
body:     pars <- pars[unique(names(pars))]
body:     bplt <- function(x, wid, stats, out, conf, notch, xlog, i) {
body:         ok <- TRUE
body:         if (!any(is.na(stats))) {
body:             xP <- if (xlog) 
body:                 function(x, w) x * exp(w)
body:             else function(x, w) x + w
body:             wid <- wid/2
body:             if (notch) {
body:                 ok <- stats[2L] <= conf[1L] && conf[2L] <= stats[4L]
body:                 xx <- xP(x, wid * c(-1, 1, 1, notch.frac, 1, 1, -1, -1, -notch.frac, -1))
body:                 yy <- c(stats[c(2, 2)], conf[1L], stats[3L], conf[2L], stats[c(4, 4)], conf[2L], stats[3L], conf[1L])
body:             }
body:             else {
body:                 xx <- xP(x, wid * c(-1, 1, 1, -1))
body:                 yy <- stats[c(2, 2, 4, 4)]
body:             }
body:             if (!notch) 
body:                 notch.frac <- 1
body:             wntch <- notch.frac * wid
body:             xypolygon(xx, yy, lty = "blank", col = boxfill[i])
body:             xysegments(xP(x, -wntch), stats[3L], xP(x, +wntch), stats[3L], lty = medlty[i], lwd = medlwd[i], col = medcol[i], lend = 1)
body:             xypoints(x, stats[3L], pch = medpch[i], cex = medcex[i], col = medcol[i], bg = medbg[i])
body:             xysegments(rep.int(x, 2), stats[c(1, 5)], rep.int(x, 2), stats[c(2, 4)], lty = whisklty[i], lwd = whisklwd[i], col = whiskcol[i])
body:             xysegments(rep.int(xP(x, -wid * staplewex[i]), 2), stats[c(1, 5)], rep.int(xP(x, +wid * staplewex[i]), 2), stats[c(1, 5)], lty = staplelty[i], lwd = staplelwd[i], col = staplecol[i])
body:             xypolygon(xx, yy, lty = boxlty[i], lwd = boxlwd[i], border = boxcol[i])
body:             if ((nout <- length(out))) {
body:                 xysegments(rep(x - wid * outwex, nout), out, rep(x + wid * outwex, nout), out, lty = outlty[i], lwd = outlwd[i], col = outcol[i])
body:                 xypoints(rep.int(x, nout), out, pch = outpch[i], lwd = outlwd[i], cex = outcex[i], col = outcol[i], bg = outbg[i])
body:             }
body:             if (any(inf <- !is.finite(out))) {
body:                 warning(sprintf(ngettext(length(unique(out[inf])), "Outlier (%s) in boxplot %d is not drawn", "Outliers (%s) in boxplot %d are not drawn"), paste(unique(out[inf]), collapse = ", "), i), domain = NA)
body:             }
body:         }
body:         return(ok)
body:     }
body:     if (!is.list(z) || 0L == (n <- length(z$n))) 
body:         stop("invalid first argument")
body:     if (is.null(at)) 
body:         at <- 1L:n
body:     else if (length(at) != n) 
body:         stop(gettextf("'at' must have same length as 'z$n', i.e. %d", n), domain = NA)
body:     if (is.null(z$out)) 
body:         z$out <- numeric()
body:     if (is.null(z$group) || !outline) 
body:         z$group <- integer()
body:     if (is.null(pars$ylim)) 
body:         ylim <- range(z$stats[is.finite(z$stats)], if (outline) z$out[is.finite(z$out)], if (notch) z$conf[is.finite(z$conf)])
body:     else {
body:         ylim <- pars$ylim
body:         pars$ylim <- NULL
body:     }
body:     if (length(border) == 0L) 
body:         border <- par("fg")
body:     dev.hold()
body:     on.exit(dev.flush())
body:     if (!add) {
body:         if (is.null(pars$xlim)) 
body:             xlim <- range(at, finite = TRUE) + c(-0.5, 0.5)
body:         else {
body:             xlim <- pars$xlim
body:             pars$xlim <- NULL
body:         }
body:         plot.new()
body:         if (horizontal) 
body:             plot.window(ylim = xlim, xlim = ylim, log = log, xaxs = pars$yaxs)
body:         else plot.window(xlim = xlim, ylim = ylim, log = log, yaxs = pars$yaxs)
body:     }
body:     xlog <- (par("ylog") && horizontal) || (par("xlog") && !horizontal)
body:     pcycle <- function(p, def1, def2 = NULL) rep(if (length(p)) p else if (length(def1)) def1 else def2, length.out = n)
body:     p <- function(sym) pars[[sym, exact = TRUE]]
body:     boxlty <- pcycle(pars$boxlty, p("lty"), par("lty"))
body:     boxlwd <- pcycle(pars$boxlwd, p("lwd"), par("lwd"))
body:     boxcol <- pcycle(pars$boxcol, border)
body:     boxfill <- pcycle(pars$boxfill, par("bg"))
body:     boxwex <- pcycle(pars$boxwex, 0.8 * {
body:         if (n <= 1) 
body:             1
body:         else stats::quantile(diff(sort(if (xlog) 
body:             log(at)
body:         else at)), 0.1)
body:     })
body:     medlty <- pcycle(pars$medlty, p("lty"), par("lty"))
body:     medlwd <- pcycle(pars$medlwd, 3 * p("lwd"), 3 * par("lwd"))
body:     medpch <- pcycle(pars$medpch, NA_integer_)
body:     medcex <- pcycle(pars$medcex, p("cex"), par("cex"))
body:     medcol <- pcycle(pars$medcol, border)
body:     medbg <- pcycle(pars$medbg, p("bg"), par("bg"))
body:     whisklty <- pcycle(pars$whisklty, p("lty"), "dashed")
body:     whisklwd <- pcycle(pars$whisklwd, p("lwd"), par("lwd"))
body:     whiskcol <- pcycle(pars$whiskcol, border)
body:     staplelty <- pcycle(pars$staplelty, p("lty"), par("lty"))
body:     staplelwd <- pcycle(pars$staplelwd, p("lwd"), par("lwd"))
body:     staplecol <- pcycle(pars$staplecol, border)
body:     staplewex <- pcycle(pars$staplewex, 0.5)
body:     outlty <- pcycle(pars$outlty, "blank")
body:     outlwd <- pcycle(pars$outlwd, p("lwd"), par("lwd"))
body:     outpch <- pcycle(pars$outpch, p("pch"), par("pch"))
body:     outcex <- pcycle(pars$outcex, p("cex"), par("cex"))
body:     outcol <- pcycle(pars$outcol, border)
body:     outbg <- pcycle(pars$outbg, p("bg"), par("bg"))
body:     outwex <- pcycle(pars$outwex, 0.5)
body:     width <- if (!is.null(width)) {
body:         if (length(width) != n | any(is.na(width)) | any(width <= 0)) 
body:             stop("invalid boxplot widths")
body:         boxwex * width/max(width)
body:     }
body:     else if (varwidth) 
body:         boxwex * sqrt(z$n/max(z$n))
body:     else if (n == 1) 
body:         0.5 * boxwex
body:     else rep.int(boxwex, n)
body:     if (horizontal) {
body:         xypoints <- function(x, y, ...) points(y, x, ...)
body:         xypolygon <- function(x, y, ...) polygon(y, x, ...)
body:         xysegments <- function(x0, y0, x1, y1, ...) segments(y0, x0, y1, x1, ...)
body:     }
body:     else {
body:         xypoints <- points
body:         xypolygon <- polygon
body:         xysegments <- segments
body:     }
body:     ok <- TRUE
body:     for (i in 1L:n) ok <- ok & bplt(at[i], wid = width[i], stats = z$stats[, i], out = z$out[z$group == i], conf = z$conf[, i], notch = notch, xlog = xlog, i = i)
body:     if (!ok) 
body:         warning("some notches went outside hinges ('box'): maybe set notch=FALSE")
body:     axes <- is.null(pars$axes)
body:     if (!axes) {
body:         axes <- pars$axes
body:         pars$axes <- NULL
body:     }
body:     if (axes) {
body:         ax.pars <- pars[names(pars) %in% c("xaxt", "yaxt", "xaxp", "yaxp", "las", "cex.axis", "col.axis", "format")]
body:         if (is.null(show.names)) 
body:             show.names <- n > 1
body:         if (show.names) 
body:             do.call("axis", c(list(side = 1 + horizontal, at = at, labels = z$names), ax.pars))
body:         do.call("Axis", c(list(x = z$stats, side = 2 - horizontal), ax.pars))
body:     }
body:     do.call("title", pars[names(pars) %in% c("main", "cex.main", "col.main", "sub", "cex.sub", "col.sub", "xlab", "ylab", "cex.lab", "col.lab")])
body:     if (frame.plot) 
body:         box()
body:     invisible(at)
body: }
args: list(structure(list(stats = structure(c(-1.30916887564081, 0.330020740918592, 0.870828015465148, 1.58547692772276, 3.18733299301658, -0.342313833184542, 0.776245886395854, 1.23322507099663, 1.92854058144158, 3.61302391125681, -0.73384738619115, 1.24007544996999, 1.85814238577645, 2.57937883241927, 4.30350895343551, -0.224987696487413, 1.38788534828805, 2.09573489551909, 2.69169964698911, 4.41677335378821, 0.165316906957826, 1.67823178035492, 2.32635855086163, 2.9445727794802, 4.6662946298443, -0.360284936177364, 
args: 1.61698986332286, 2.42781499597232, 3.08240763372062, 4.53620717727632, 0.43511820048897, 2.02409213331472, 2.69222684705081, 3.29887425673744, 5.10381180292987, 0.320509322548936, 2.17975351885258, 2.81338748064102, 3.59430556323454, 5.51328612397299, 1.07485474816288, 2.35641262534055, 3.10227893162058, 3.5759386565289, 5.29961936115444, 0.612934885417947, 2.37777822193498, 3.21710190761691, 3.86304258894349, 5.99450368408389), .Dim = c(5L, 10L)), n = c(100, 100, 100, 100, 100, 100, 100, 100, 100, 
args: 100), conf = structure(c(0.67246593795009, 1.06919009298021, 1.05116250917941, 1.41528763281386, 1.64653245134946, 2.06975232020344, 1.88973223632433, 2.30173755471386, 2.12627667299983, 2.52644042872343, 2.19627898824948, 2.65935100369517, 2.49081127155002, 2.8936424225516, 2.58988825762867, 3.03688670365337, 2.90959381869282, 3.29496404454834, 2.98243013762956, 3.45177367760425), .Dim = c(2L, 10L)), out = c(4.24103993494241, 3.70729253620419, -0.643148952028978, -0.660922798465681, 5.33746531431071, 
args: 5.57544976372339, 5.48799787722146), group = c(1, 2, 4, 4, 7, 9, 9), names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")), .Names = c("stats", "n", "conf", "out", "group", "names")), notch = TRUE, width = NULL, varwidth = FALSE, log = "", border = "black", pars = structure(list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5, boxfill = "lavender"), .Names = c("boxwex", "staplewex", "outwex", "boxfill")), outline = TRUE, horizontal = FALSE, add = FALSE, at = NULL)
retn: 1:10

func: quote(bxp)
body: function (z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE, notch.frac = 0.5, log = "", border = par("fg"), pars = NULL, frame.plot = axes, horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL, ...) 
body: {
body:     pars <- c(list(...), pars)
body:     pars <- pars[unique(names(pars))]
body:     bplt <- function(x, wid, stats, out, conf, notch, xlog, i) {
body:         ok <- TRUE
body:         if (!any(is.na(stats))) {
body:             xP <- if (xlog) 
body:                 function(x, w) x * exp(w)
body:             else function(x, w) x + w
body:             wid <- wid/2
body:             if (notch) {
body:                 ok <- stats[2L] <= conf[1L] && conf[2L] <= stats[4L]
body:                 xx <- xP(x, wid * c(-1, 1, 1, notch.frac, 1, 1, -1, -1, -notch.frac, -1))
body:                 yy <- c(stats[c(2, 2)], conf[1L], stats[3L], conf[2L], stats[c(4, 4)], conf[2L], stats[3L], conf[1L])
body:             }
body:             else {
body:                 xx <- xP(x, wid * c(-1, 1, 1, -1))
body:                 yy <- stats[c(2, 2, 4, 4)]
body:             }
body:             if (!notch) 
body:                 notch.frac <- 1
body:             wntch <- notch.frac * wid
body:             xypolygon(xx, yy, lty = "blank", col = boxfill[i])
body:             xysegments(xP(x, -wntch), stats[3L], xP(x, +wntch), stats[3L], lty = medlty[i], lwd = medlwd[i], col = medcol[i], lend = 1)
body:             xypoints(x, stats[3L], pch = medpch[i], cex = medcex[i], col = medcol[i], bg = medbg[i])
body:             xysegments(rep.int(x, 2), stats[c(1, 5)], rep.int(x, 2), stats[c(2, 4)], lty = whisklty[i], lwd = whisklwd[i], col = whiskcol[i])
body:             xysegments(rep.int(xP(x, -wid * staplewex[i]), 2), stats[c(1, 5)], rep.int(xP(x, +wid * staplewex[i]), 2), stats[c(1, 5)], lty = staplelty[i], lwd = staplelwd[i], col = staplecol[i])
body:             xypolygon(xx, yy, lty = boxlty[i], lwd = boxlwd[i], border = boxcol[i])
body:             if ((nout <- length(out))) {
body:                 xysegments(rep(x - wid * outwex, nout), out, rep(x + wid * outwex, nout), out, lty = outlty[i], lwd = outlwd[i], col = outcol[i])
body:                 xypoints(rep.int(x, nout), out, pch = outpch[i], lwd = outlwd[i], cex = outcex[i], col = outcol[i], bg = outbg[i])
body:             }
body:             if (any(inf <- !is.finite(out))) {
body:                 warning(sprintf(ngettext(length(unique(out[inf])), "Outlier (%s) in boxplot %d is not drawn", "Outliers (%s) in boxplot %d are not drawn"), paste(unique(out[inf]), collapse = ", "), i), domain = NA)
body:             }
body:         }
body:         return(ok)
body:     }
body:     if (!is.list(z) || 0L == (n <- length(z$n))) 
body:         stop("invalid first argument")
body:     if (is.null(at)) 
body:         at <- 1L:n
body:     else if (length(at) != n) 
body:         stop(gettextf("'at' must have same length as 'z$n', i.e. %d", n), domain = NA)
body:     if (is.null(z$out)) 
body:         z$out <- numeric()
body:     if (is.null(z$group) || !outline) 
body:         z$group <- integer()
body:     if (is.null(pars$ylim)) 
body:         ylim <- range(z$stats[is.finite(z$stats)], if (outline) z$out[is.finite(z$out)], if (notch) z$conf[is.finite(z$conf)])
body:     else {
body:         ylim <- pars$ylim
body:         pars$ylim <- NULL
body:     }
body:     if (length(border) == 0L) 
body:         border <- par("fg")
body:     dev.hold()
body:     on.exit(dev.flush())
body:     if (!add) {
body:         if (is.null(pars$xlim)) 
body:             xlim <- range(at, finite = TRUE) + c(-0.5, 0.5)
body:         else {
body:             xlim <- pars$xlim
body:             pars$xlim <- NULL
body:         }
body:         plot.new()
body:         if (horizontal) 
body:             plot.window(ylim = xlim, xlim = ylim, log = log, xaxs = pars$yaxs)
body:         else plot.window(xlim = xlim, ylim = ylim, log = log, yaxs = pars$yaxs)
body:     }
body:     xlog <- (par("ylog") && horizontal) || (par("xlog") && !horizontal)
body:     pcycle <- function(p, def1, def2 = NULL) rep(if (length(p)) p else if (length(def1)) def1 else def2, length.out = n)
body:     p <- function(sym) pars[[sym, exact = TRUE]]
body:     boxlty <- pcycle(pars$boxlty, p("lty"), par("lty"))
body:     boxlwd <- pcycle(pars$boxlwd, p("lwd"), par("lwd"))
body:     boxcol <- pcycle(pars$boxcol, border)
body:     boxfill <- pcycle(pars$boxfill, par("bg"))
body:     boxwex <- pcycle(pars$boxwex, 0.8 * {
body:         if (n <= 1) 
body:             1
body:         else stats::quantile(diff(sort(if (xlog) 
body:             log(at)
body:         else at)), 0.1)
body:     })
body:     medlty <- pcycle(pars$medlty, p("lty"), par("lty"))
body:     medlwd <- pcycle(pars$medlwd, 3 * p("lwd"), 3 * par("lwd"))
body:     medpch <- pcycle(pars$medpch, NA_integer_)
body:     medcex <- pcycle(pars$medcex, p("cex"), par("cex"))
body:     medcol <- pcycle(pars$medcol, border)
body:     medbg <- pcycle(pars$medbg, p("bg"), par("bg"))
body:     whisklty <- pcycle(pars$whisklty, p("lty"), "dashed")
body:     whisklwd <- pcycle(pars$whisklwd, p("lwd"), par("lwd"))
body:     whiskcol <- pcycle(pars$whiskcol, border)
body:     staplelty <- pcycle(pars$staplelty, p("lty"), par("lty"))
body:     staplelwd <- pcycle(pars$staplelwd, p("lwd"), par("lwd"))
body:     staplecol <- pcycle(pars$staplecol, border)
body:     staplewex <- pcycle(pars$staplewex, 0.5)
body:     outlty <- pcycle(pars$outlty, "blank")
body:     outlwd <- pcycle(pars$outlwd, p("lwd"), par("lwd"))
body:     outpch <- pcycle(pars$outpch, p("pch"), par("pch"))
body:     outcex <- pcycle(pars$outcex, p("cex"), par("cex"))
body:     outcol <- pcycle(pars$outcol, border)
body:     outbg <- pcycle(pars$outbg, p("bg"), par("bg"))
body:     outwex <- pcycle(pars$outwex, 0.5)
body:     width <- if (!is.null(width)) {
body:         if (length(width) != n | any(is.na(width)) | any(width <= 0)) 
body:             stop("invalid boxplot widths")
body:         boxwex * width/max(width)
body:     }
body:     else if (varwidth) 
body:         boxwex * sqrt(z$n/max(z$n))
body:     else if (n == 1) 
body:         0.5 * boxwex
body:     else rep.int(boxwex, n)
body:     if (horizontal) {
body:         xypoints <- function(x, y, ...) points(y, x, ...)
body:         xypolygon <- function(x, y, ...) polygon(y, x, ...)
body:         xysegments <- function(x0, y0, x1, y1, ...) segments(y0, x0, y1, x1, ...)
body:     }
body:     else {
body:         xypoints <- points
body:         xypolygon <- polygon
body:         xysegments <- segments
body:     }
body:     ok <- TRUE
body:     for (i in 1L:n) ok <- ok & bplt(at[i], wid = width[i], stats = z$stats[, i], out = z$out[z$group == i], conf = z$conf[, i], notch = notch, xlog = xlog, i = i)
body:     if (!ok) 
body:         warning("some notches went outside hinges ('box'): maybe set notch=FALSE")
body:     axes <- is.null(pars$axes)
body:     if (!axes) {
body:         axes <- pars$axes
body:         pars$axes <- NULL
body:     }
body:     if (axes) {
body:         ax.pars <- pars[names(pars) %in% c("xaxt", "yaxt", "xaxp", "yaxp", "las", "cex.axis", "col.axis", "format")]
body:         if (is.null(show.names)) 
body:             show.names <- n > 1
body:         if (show.names) 
body:             do.call("axis", c(list(side = 1 + horizontal, at = at, labels = z$names), ax.pars))
body:         do.call("Axis", c(list(x = z$stats, side = 2 - horizontal), ax.pars))
body:     }
body:     do.call("title", pars[names(pars) %in% c("main", "cex.main", "col.main", "sub", "cex.sub", "col.sub", "xlab", "ylab", "cex.lab", "col.lab")])
body:     if (frame.plot) 
body:         box()
body:     invisible(at)
body: }
args: list(structure(list(stats = structure(c(0, 0, 0, 0, 0), .Dim = c(5L, 1L), class = structure("logical", .Names = "1")), n = 1, conf = structure(c(0, 0), .Dim = c(2L, 1L)), out = numeric(0), group = numeric(0), names = "1"), .Names = c("stats", "n", "conf", "out", "group", "names")), notch = FALSE, width = NULL, varwidth = FALSE, log = "", border = "black", pars = structure(list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5), .Names = c("boxwex", "staplewex", "outwex")), outline = TRUE, horizontal = FALSE, add = FALSE, at = NULL)
retn: 1L

func: quote(bxp)
body: function (z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE, notch.frac = 0.5, log = "", border = par("fg"), pars = NULL, frame.plot = axes, horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL, ...) 
body: {
body:     pars <- c(list(...), pars)
body:     pars <- pars[unique(names(pars))]
body:     bplt <- function(x, wid, stats, out, conf, notch, xlog, i) {
body:         ok <- TRUE
body:         if (!any(is.na(stats))) {
body:             xP <- if (xlog) 
body:                 function(x, w) x * exp(w)
body:             else function(x, w) x + w
body:             wid <- wid/2
body:             if (notch) {
body:                 ok <- stats[2L] <= conf[1L] && conf[2L] <= stats[4L]
body:                 xx <- xP(x, wid * c(-1, 1, 1, notch.frac, 1, 1, -1, -1, -notch.frac, -1))
body:                 yy <- c(stats[c(2, 2)], conf[1L], stats[3L], conf[2L], stats[c(4, 4)], conf[2L], stats[3L], conf[1L])
body:             }
body:             else {
body:                 xx <- xP(x, wid * c(-1, 1, 1, -1))
body:                 yy <- stats[c(2, 2, 4, 4)]
body:             }
body:             if (!notch) 
body:                 notch.frac <- 1
body:             wntch <- notch.frac * wid
body:             xypolygon(xx, yy, lty = "blank", col = boxfill[i])
body:             xysegments(xP(x, -wntch), stats[3L], xP(x, +wntch), stats[3L], lty = medlty[i], lwd = medlwd[i], col = medcol[i], lend = 1)
body:             xypoints(x, stats[3L], pch = medpch[i], cex = medcex[i], col = medcol[i], bg = medbg[i])
body:             xysegments(rep.int(x, 2), stats[c(1, 5)], rep.int(x, 2), stats[c(2, 4)], lty = whisklty[i], lwd = whisklwd[i], col = whiskcol[i])
body:             xysegments(rep.int(xP(x, -wid * staplewex[i]), 2), stats[c(1, 5)], rep.int(xP(x, +wid * staplewex[i]), 2), stats[c(1, 5)], lty = staplelty[i], lwd = staplelwd[i], col = staplecol[i])
body:             xypolygon(xx, yy, lty = boxlty[i], lwd = boxlwd[i], border = boxcol[i])
body:             if ((nout <- length(out))) {
body:                 xysegments(rep(x - wid * outwex, nout), out, rep(x + wid * outwex, nout), out, lty = outlty[i], lwd = outlwd[i], col = outcol[i])
body:                 xypoints(rep.int(x, nout), out, pch = outpch[i], lwd = outlwd[i], cex = outcex[i], col = outcol[i], bg = outbg[i])
body:             }
body:             if (any(inf <- !is.finite(out))) {
body:                 warning(sprintf(ngettext(length(unique(out[inf])), "Outlier (%s) in boxplot %d is not drawn", "Outliers (%s) in boxplot %d are not drawn"), paste(unique(out[inf]), collapse = ", "), i), domain = NA)
body:             }
body:         }
body:         return(ok)
body:     }
body:     if (!is.list(z) || 0L == (n <- length(z$n))) 
body:         stop("invalid first argument")
body:     if (is.null(at)) 
body:         at <- 1L:n
body:     else if (length(at) != n) 
body:         stop(gettextf("'at' must have same length as 'z$n', i.e. %d", n), domain = NA)
body:     if (is.null(z$out)) 
body:         z$out <- numeric()
body:     if (is.null(z$group) || !outline) 
body:         z$group <- integer()
body:     if (is.null(pars$ylim)) 
body:         ylim <- range(z$stats[is.finite(z$stats)], if (outline) z$out[is.finite(z$out)], if (notch) z$conf[is.finite(z$conf)])
body:     else {
body:         ylim <- pars$ylim
body:         pars$ylim <- NULL
body:     }
body:     if (length(border) == 0L) 
body:         border <- par("fg")
body:     dev.hold()
body:     on.exit(dev.flush())
body:     if (!add) {
body:         if (is.null(pars$xlim)) 
body:             xlim <- range(at, finite = TRUE) + c(-0.5, 0.5)
body:         else {
body:             xlim <- pars$xlim
body:             pars$xlim <- NULL
body:         }
body:         plot.new()
body:         if (horizontal) 
body:             plot.window(ylim = xlim, xlim = ylim, log = log, xaxs = pars$yaxs)
body:         else plot.window(xlim = xlim, ylim = ylim, log = log, yaxs = pars$yaxs)
body:     }
body:     xlog <- (par("ylog") && horizontal) || (par("xlog") && !horizontal)
body:     pcycle <- function(p, def1, def2 = NULL) rep(if (length(p)) p else if (length(def1)) def1 else def2, length.out = n)
body:     p <- function(sym) pars[[sym, exact = TRUE]]
body:     boxlty <- pcycle(pars$boxlty, p("lty"), par("lty"))
body:     boxlwd <- pcycle(pars$boxlwd, p("lwd"), par("lwd"))
body:     boxcol <- pcycle(pars$boxcol, border)
body:     boxfill <- pcycle(pars$boxfill, par("bg"))
body:     boxwex <- pcycle(pars$boxwex, 0.8 * {
body:         if (n <= 1) 
body:             1
body:         else stats::quantile(diff(sort(if (xlog) 
body:             log(at)
body:         else at)), 0.1)
body:     })
body:     medlty <- pcycle(pars$medlty, p("lty"), par("lty"))
body:     medlwd <- pcycle(pars$medlwd, 3 * p("lwd"), 3 * par("lwd"))
body:     medpch <- pcycle(pars$medpch, NA_integer_)
body:     medcex <- pcycle(pars$medcex, p("cex"), par("cex"))
body:     medcol <- pcycle(pars$medcol, border)
body:     medbg <- pcycle(pars$medbg, p("bg"), par("bg"))
body:     whisklty <- pcycle(pars$whisklty, p("lty"), "dashed")
body:     whisklwd <- pcycle(pars$whisklwd, p("lwd"), par("lwd"))
body:     whiskcol <- pcycle(pars$whiskcol, border)
body:     staplelty <- pcycle(pars$staplelty, p("lty"), par("lty"))
body:     staplelwd <- pcycle(pars$staplelwd, p("lwd"), par("lwd"))
body:     staplecol <- pcycle(pars$staplecol, border)
body:     staplewex <- pcycle(pars$staplewex, 0.5)
body:     outlty <- pcycle(pars$outlty, "blank")
body:     outlwd <- pcycle(pars$outlwd, p("lwd"), par("lwd"))
body:     outpch <- pcycle(pars$outpch, p("pch"), par("pch"))
body:     outcex <- pcycle(pars$outcex, p("cex"), par("cex"))
body:     outcol <- pcycle(pars$outcol, border)
body:     outbg <- pcycle(pars$outbg, p("bg"), par("bg"))
body:     outwex <- pcycle(pars$outwex, 0.5)
body:     width <- if (!is.null(width)) {
body:         if (length(width) != n | any(is.na(width)) | any(width <= 0)) 
body:             stop("invalid boxplot widths")
body:         boxwex * width/max(width)
body:     }
body:     else if (varwidth) 
body:         boxwex * sqrt(z$n/max(z$n))
body:     else if (n == 1) 
body:         0.5 * boxwex
body:     else rep.int(boxwex, n)
body:     if (horizontal) {
body:         xypoints <- function(x, y, ...) points(y, x, ...)
body:         xypolygon <- function(x, y, ...) polygon(y, x, ...)
body:         xysegments <- function(x0, y0, x1, y1, ...) segments(y0, x0, y1, x1, ...)
body:     }
body:     else {
body:         xypoints <- points
body:         xypolygon <- polygon
body:         xysegments <- segments
body:     }
body:     ok <- TRUE
body:     for (i in 1L:n) ok <- ok & bplt(at[i], wid = width[i], stats = z$stats[, i], out = z$out[z$group == i], conf = z$conf[, i], notch = notch, xlog = xlog, i = i)
body:     if (!ok) 
body:         warning("some notches went outside hinges ('box'): maybe set notch=FALSE")
body:     axes <- is.null(pars$axes)
body:     if (!axes) {
body:         axes <- pars$axes
body:         pars$axes <- NULL
body:     }
body:     if (axes) {
body:         ax.pars <- pars[names(pars) %in% c("xaxt", "yaxt", "xaxp", "yaxp", "las", "cex.axis", "col.axis", "format")]
body:         if (is.null(show.names)) 
body:             show.names <- n > 1
body:         if (show.names) 
body:             do.call("axis", c(list(side = 1 + horizontal, at = at, labels = z$names), ax.pars))
body:         do.call("Axis", c(list(x = z$stats, side = 2 - horizontal), ax.pars))
body:     }
body:     do.call("title", pars[names(pars) %in% c("main", "cex.main", "col.main", "sub", "cex.sub", "col.sub", "xlab", "ylab", "cex.lab", "col.lab")])
body:     if (frame.plot) 
body:         box()
body:     invisible(at)
body: }
args: list(structure(list(stats = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(5L, 2L), class = structure("logical", .Names = "1")), n = c(1, 1), conf = structure(c(0, 0, 0, 0), .Dim = c(2L, 2L)), out = numeric(0), group = numeric(0), names = c("1", "2")), .Names = c("stats", "n", "conf", "out", "group", "names")), notch = FALSE, width = NULL, varwidth = FALSE, log = "", border = "black", pars = structure(list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5), .Names = c("boxwex", "staplewex", "outwex"
args: )), outline = TRUE, horizontal = FALSE, add = FALSE, at = NULL)
retn: 1:2

